/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.hathora.cloud_sdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.hathora.cloud_sdk.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class CreateMultipartBuildParams {

    /**
     * System generated id for a build. Can also be user defined when creating a build.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buildId")
    private Optional<String> buildId;

    @JsonProperty("buildSizeInBytes")
    private double buildSizeInBytes;

    /**
     * Tag to associate an external version with a build. It is accessible via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV2/operation/GetBuildInfo).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buildTag")
    private Optional<String> buildTag;

    @JsonCreator
    public CreateMultipartBuildParams(
            @JsonProperty("buildId") Optional<String> buildId,
            @JsonProperty("buildSizeInBytes") double buildSizeInBytes,
            @JsonProperty("buildTag") Optional<String> buildTag) {
        Utils.checkNotNull(buildId, "buildId");
        Utils.checkNotNull(buildSizeInBytes, "buildSizeInBytes");
        Utils.checkNotNull(buildTag, "buildTag");
        this.buildId = buildId;
        this.buildSizeInBytes = buildSizeInBytes;
        this.buildTag = buildTag;
    }
    
    public CreateMultipartBuildParams(
            double buildSizeInBytes) {
        this(Optional.empty(), buildSizeInBytes, Optional.empty());
    }

    /**
     * System generated id for a build. Can also be user defined when creating a build.
     */
    @JsonIgnore
    public Optional<String> buildId() {
        return buildId;
    }

    @JsonIgnore
    public double buildSizeInBytes() {
        return buildSizeInBytes;
    }

    /**
     * Tag to associate an external version with a build. It is accessible via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV2/operation/GetBuildInfo).
     */
    @JsonIgnore
    public Optional<String> buildTag() {
        return buildTag;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * System generated id for a build. Can also be user defined when creating a build.
     */
    public CreateMultipartBuildParams withBuildId(String buildId) {
        Utils.checkNotNull(buildId, "buildId");
        this.buildId = Optional.ofNullable(buildId);
        return this;
    }

    /**
     * System generated id for a build. Can also be user defined when creating a build.
     */
    public CreateMultipartBuildParams withBuildId(Optional<String> buildId) {
        Utils.checkNotNull(buildId, "buildId");
        this.buildId = buildId;
        return this;
    }

    public CreateMultipartBuildParams withBuildSizeInBytes(double buildSizeInBytes) {
        Utils.checkNotNull(buildSizeInBytes, "buildSizeInBytes");
        this.buildSizeInBytes = buildSizeInBytes;
        return this;
    }

    /**
     * Tag to associate an external version with a build. It is accessible via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV2/operation/GetBuildInfo).
     */
    public CreateMultipartBuildParams withBuildTag(String buildTag) {
        Utils.checkNotNull(buildTag, "buildTag");
        this.buildTag = Optional.ofNullable(buildTag);
        return this;
    }

    /**
     * Tag to associate an external version with a build. It is accessible via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV2/operation/GetBuildInfo).
     */
    public CreateMultipartBuildParams withBuildTag(Optional<String> buildTag) {
        Utils.checkNotNull(buildTag, "buildTag");
        this.buildTag = buildTag;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateMultipartBuildParams other = (CreateMultipartBuildParams) o;
        return 
            Objects.deepEquals(this.buildId, other.buildId) &&
            Objects.deepEquals(this.buildSizeInBytes, other.buildSizeInBytes) &&
            Objects.deepEquals(this.buildTag, other.buildTag);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            buildId,
            buildSizeInBytes,
            buildTag);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateMultipartBuildParams.class,
                "buildId", buildId,
                "buildSizeInBytes", buildSizeInBytes,
                "buildTag", buildTag);
    }
    
    public final static class Builder {
 
        private Optional<String> buildId = Optional.empty();
 
        private Double buildSizeInBytes;
 
        private Optional<String> buildTag = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * System generated id for a build. Can also be user defined when creating a build.
         */
        public Builder buildId(String buildId) {
            Utils.checkNotNull(buildId, "buildId");
            this.buildId = Optional.ofNullable(buildId);
            return this;
        }

        /**
         * System generated id for a build. Can also be user defined when creating a build.
         */
        public Builder buildId(Optional<String> buildId) {
            Utils.checkNotNull(buildId, "buildId");
            this.buildId = buildId;
            return this;
        }

        public Builder buildSizeInBytes(double buildSizeInBytes) {
            Utils.checkNotNull(buildSizeInBytes, "buildSizeInBytes");
            this.buildSizeInBytes = buildSizeInBytes;
            return this;
        }

        /**
         * Tag to associate an external version with a build. It is accessible via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV2/operation/GetBuildInfo).
         */
        public Builder buildTag(String buildTag) {
            Utils.checkNotNull(buildTag, "buildTag");
            this.buildTag = Optional.ofNullable(buildTag);
            return this;
        }

        /**
         * Tag to associate an external version with a build. It is accessible via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV2/operation/GetBuildInfo).
         */
        public Builder buildTag(Optional<String> buildTag) {
            Utils.checkNotNull(buildTag, "buildTag");
            this.buildTag = buildTag;
            return this;
        }
        
        public CreateMultipartBuildParams build() {
            return new CreateMultipartBuildParams(
                buildId,
                buildSizeInBytes,
                buildTag);
        }
    }
}

