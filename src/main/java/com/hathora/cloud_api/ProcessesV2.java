/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.hathora.cloud_api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.hathora.cloud_api.models.errors.SDKError;
import com.hathora.cloud_api.models.operations.SDKMethodInterfaces.*;
import com.hathora.cloud_api.utils.HTTPClient;
import com.hathora.cloud_api.utils.HTTPRequest;
import com.hathora.cloud_api.utils.Hook.AfterErrorContextImpl;
import com.hathora.cloud_api.utils.Hook.AfterSuccessContextImpl;
import com.hathora.cloud_api.utils.Hook.BeforeRequestContextImpl;
import com.hathora.cloud_api.utils.JSON;
import com.hathora.cloud_api.utils.Retries.NonRetryableException;
import com.hathora.cloud_api.utils.Utils;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Operations to get data on active and stopped [processes](https://hathora.dev/docs/concepts/hathora-entities#process).
 */
public class ProcessesV2 implements
            MethodCallCreateProcess,
            MethodCallGetLatestProcesses,
            MethodCallGetProcessInfo,
            MethodCallStopProcess {

    private final SDKConfiguration sdkConfiguration;

    ProcessesV2(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Creates a [process](https://hathora.dev/docs/concepts/hathora-entities#process) without a room. Use this to pre-allocate processes ahead of time so that subsequent room assignment via [CreateRoom()](https://hathora.dev/api#tag/RoomV2/operation/CreateRoom) can be instant.
     * @return The call builder
     */
    public com.hathora.cloud_api.models.operations.CreateProcessRequestBuilder createProcess() {
        return new com.hathora.cloud_api.models.operations.CreateProcessRequestBuilder(this);
    }

    /**
     * Creates a [process](https://hathora.dev/docs/concepts/hathora-entities#process) without a room. Use this to pre-allocate processes ahead of time so that subsequent room assignment via [CreateRoom()](https://hathora.dev/api#tag/RoomV2/operation/CreateRoom) can be instant.
     * @param region
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public com.hathora.cloud_api.models.operations.CreateProcessResponse createProcess(
            com.hathora.cloud_api.models.shared.Region region) throws Exception {
        return createProcess(Optional.empty(), region);
    }
    /**
     * Creates a [process](https://hathora.dev/docs/concepts/hathora-entities#process) without a room. Use this to pre-allocate processes ahead of time so that subsequent room assignment via [CreateRoom()](https://hathora.dev/api#tag/RoomV2/operation/CreateRoom) can be instant.
     * @param appId
     * @param region
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public com.hathora.cloud_api.models.operations.CreateProcessResponse createProcess(
            Optional<? extends String> appId,
            com.hathora.cloud_api.models.shared.Region region) throws Exception {
        com.hathora.cloud_api.models.operations.CreateProcessRequest request =
            com.hathora.cloud_api.models.operations.CreateProcessRequest
                .builder()
                .appId(appId)
                .region(region)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                com.hathora.cloud_api.models.operations.CreateProcessRequest.class,
                _baseUrl,
                "/processes/v2/{appId}/create/{region}",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("CreateProcess", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "402", "404", "429", "4XX", "500", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("CreateProcess", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("CreateProcess", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("CreateProcess", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.hathora.cloud_api.models.operations.CreateProcessResponse.Builder _resBuilder = 
            com.hathora.cloud_api.models.operations.CreateProcessResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        com.hathora.cloud_api.models.operations.CreateProcessResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.hathora.cloud_api.models.shared.ProcessV2 _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.hathora.cloud_api.models.shared.ProcessV2>() {});
                _res.withProcessV2(java.util.Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "402", "404", "429", "500")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.hathora.cloud_api.models.errors.ApiError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.hathora.cloud_api.models.errors.ApiError>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    /**
     * Retrieve the 10 most recent [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `status` or `region`.
     * @return The call builder
     */
    public com.hathora.cloud_api.models.operations.GetLatestProcessesRequestBuilder getLatestProcesses() {
        return new com.hathora.cloud_api.models.operations.GetLatestProcessesRequestBuilder(this);
    }

    /**
     * Retrieve the 10 most recent [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `status` or `region`.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public com.hathora.cloud_api.models.operations.GetLatestProcessesResponse getLatestProcessesDirect() throws Exception {
        return getLatestProcesses(Optional.empty(), Optional.empty(), Optional.empty());
    }
    /**
     * Retrieve the 10 most recent [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `status` or `region`.
     * @param appId
     * @param region
     * @param status
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public com.hathora.cloud_api.models.operations.GetLatestProcessesResponse getLatestProcesses(
            Optional<? extends String> appId,
            Optional<? extends java.util.List<com.hathora.cloud_api.models.shared.Region>> region,
            Optional<? extends java.util.List<com.hathora.cloud_api.models.shared.ProcessStatus>> status) throws Exception {
        com.hathora.cloud_api.models.operations.GetLatestProcessesRequest request =
            com.hathora.cloud_api.models.operations.GetLatestProcessesRequest
                .builder()
                .appId(appId)
                .region(region)
                .status(status)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                com.hathora.cloud_api.models.operations.GetLatestProcessesRequest.class,
                _baseUrl,
                "/processes/v2/{appId}/list/latest",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                this.sdkConfiguration.userAgent);

        _req.addQueryParams(Utils.getQueryParams(
                com.hathora.cloud_api.models.operations.GetLatestProcessesRequest.class,
                request, 
                this.sdkConfiguration.globals));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("GetLatestProcesses", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "404", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("GetLatestProcesses", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("GetLatestProcesses", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("GetLatestProcesses", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.hathora.cloud_api.models.operations.GetLatestProcessesResponse.Builder _resBuilder = 
            com.hathora.cloud_api.models.operations.GetLatestProcessesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        com.hathora.cloud_api.models.operations.GetLatestProcessesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                java.util.List<com.hathora.cloud_api.models.shared.ProcessV2> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<java.util.List<com.hathora.cloud_api.models.shared.ProcessV2>>() {});
                _res.withClasses(java.util.Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "404", "429")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.hathora.cloud_api.models.errors.ApiError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.hathora.cloud_api.models.errors.ApiError>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    /**
     * Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * @return The call builder
     */
    public com.hathora.cloud_api.models.operations.GetProcessInfoRequestBuilder getProcessInfo() {
        return new com.hathora.cloud_api.models.operations.GetProcessInfoRequestBuilder(this);
    }

    /**
     * Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * @param processId
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public com.hathora.cloud_api.models.operations.GetProcessInfoResponse getProcessInfo(
            String processId) throws Exception {
        return getProcessInfo(Optional.empty(), processId);
    }
    /**
     * Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * @param appId
     * @param processId
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public com.hathora.cloud_api.models.operations.GetProcessInfoResponse getProcessInfo(
            Optional<? extends String> appId,
            String processId) throws Exception {
        com.hathora.cloud_api.models.operations.GetProcessInfoRequest request =
            com.hathora.cloud_api.models.operations.GetProcessInfoRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                com.hathora.cloud_api.models.operations.GetProcessInfoRequest.class,
                _baseUrl,
                "/processes/v2/{appId}/info/{processId}",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("GetProcessInfo", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "404", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("GetProcessInfo", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("GetProcessInfo", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("GetProcessInfo", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.hathora.cloud_api.models.operations.GetProcessInfoResponse.Builder _resBuilder = 
            com.hathora.cloud_api.models.operations.GetProcessInfoResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        com.hathora.cloud_api.models.operations.GetProcessInfoResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.hathora.cloud_api.models.shared.ProcessV2 _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.hathora.cloud_api.models.shared.ProcessV2>() {});
                _res.withProcessV2(java.util.Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "404", "429")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.hathora.cloud_api.models.errors.ApiError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.hathora.cloud_api.models.errors.ApiError>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    /**
     * Stops a [process](https://hathora.dev/docs/concepts/hathora-entities#process) immediately.
     * @return The call builder
     */
    public com.hathora.cloud_api.models.operations.StopProcessRequestBuilder stopProcess() {
        return new com.hathora.cloud_api.models.operations.StopProcessRequestBuilder(this);
    }

    /**
     * Stops a [process](https://hathora.dev/docs/concepts/hathora-entities#process) immediately.
     * @param processId
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public com.hathora.cloud_api.models.operations.StopProcessResponse stopProcess(
            String processId) throws Exception {
        return stopProcess(Optional.empty(), processId);
    }
    /**
     * Stops a [process](https://hathora.dev/docs/concepts/hathora-entities#process) immediately.
     * @param appId
     * @param processId
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public com.hathora.cloud_api.models.operations.StopProcessResponse stopProcess(
            Optional<? extends String> appId,
            String processId) throws Exception {
        com.hathora.cloud_api.models.operations.StopProcessRequest request =
            com.hathora.cloud_api.models.operations.StopProcessRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                com.hathora.cloud_api.models.operations.StopProcessRequest.class,
                _baseUrl,
                "/processes/v2/{appId}/stop/{processId}",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                this.sdkConfiguration.userAgent);

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("StopProcess", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "404", "429", "4XX", "500", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("StopProcess", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("StopProcess", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("StopProcess", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.hathora.cloud_api.models.operations.StopProcessResponse.Builder _resBuilder = 
            com.hathora.cloud_api.models.operations.StopProcessResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        com.hathora.cloud_api.models.operations.StopProcessResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "404", "429", "500")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.hathora.cloud_api.models.errors.ApiError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.hathora.cloud_api.models.errors.ApiError>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }

}
