/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.hathora.cloud_api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.hathora.cloud_api.models.errors.SDKError;
import com.hathora.cloud_api.models.operations.SDKMethodInterfaces.*;
import com.hathora.cloud_api.utils.HTTPClient;
import com.hathora.cloud_api.utils.HTTPRequest;
import com.hathora.cloud_api.utils.Hook.AfterErrorContextImpl;
import com.hathora.cloud_api.utils.Hook.AfterSuccessContextImpl;
import com.hathora.cloud_api.utils.Hook.BeforeRequestContextImpl;
import com.hathora.cloud_api.utils.JSON;
import com.hathora.cloud_api.utils.Retries.NonRetryableException;
import com.hathora.cloud_api.utils.Utils;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapitools.jackson.nullable.JsonNullable;

public class LobbiesV1 implements
            MethodCallCreatePrivateLobbyDeprecated,
            MethodCallCreatePublicLobbyDeprecated,
            MethodCallListActivePublicLobbiesDeprecatedV1 {

    private final SDKConfiguration sdkConfiguration;

    LobbiesV1(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public com.hathora.cloud_api.models.operations.CreatePrivateLobbyDeprecatedRequestBuilder createPrivateLobbyDeprecated() {
        return new com.hathora.cloud_api.models.operations.CreatePrivateLobbyDeprecatedRequestBuilder(this);
    }

    /**
     * @param security The security details to use for authentication.
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public com.hathora.cloud_api.models.operations.CreatePrivateLobbyDeprecatedResponse createPrivateLobbyDeprecated(
            com.hathora.cloud_api.models.operations.CreatePrivateLobbyDeprecatedSecurity security) throws Exception {
        return createPrivateLobbyDeprecated(security, Optional.empty(), Optional.empty(), Optional.empty());
    }
    /**
     * @param security The security details to use for authentication.
     * @param appId
     * @param local
     * @param region
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public com.hathora.cloud_api.models.operations.CreatePrivateLobbyDeprecatedResponse createPrivateLobbyDeprecated(
            com.hathora.cloud_api.models.operations.CreatePrivateLobbyDeprecatedSecurity security,
            Optional<? extends String> appId,
            Optional<? extends Boolean> local,
            Optional<? extends com.hathora.cloud_api.models.shared.Region> region) throws Exception {
        com.hathora.cloud_api.models.operations.CreatePrivateLobbyDeprecatedRequest request =
            com.hathora.cloud_api.models.operations.CreatePrivateLobbyDeprecatedRequest
                .builder()
                .appId(appId)
                .local(local)
                .region(region)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                com.hathora.cloud_api.models.operations.CreatePrivateLobbyDeprecatedRequest.class,
                _baseUrl,
                "/lobby/v1/{appId}/create/private",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                this.sdkConfiguration.userAgent);

        _req.addQueryParams(Utils.getQueryParams(
                com.hathora.cloud_api.models.operations.CreatePrivateLobbyDeprecatedRequest.class,
                request, 
                this.sdkConfiguration.globals));

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("CreatePrivateLobbyDeprecated", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "402", "404", "422", "429", "4XX", "500", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("CreatePrivateLobbyDeprecated", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("CreatePrivateLobbyDeprecated", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("CreatePrivateLobbyDeprecated", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.hathora.cloud_api.models.operations.CreatePrivateLobbyDeprecatedResponse.Builder _resBuilder = 
            com.hathora.cloud_api.models.operations.CreatePrivateLobbyDeprecatedResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        com.hathora.cloud_api.models.operations.CreatePrivateLobbyDeprecatedResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                String _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<String>() {});
                _res.withRoomId(java.util.Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "402", "404", "422", "429", "500")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.hathora.cloud_api.models.errors.ApiError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.hathora.cloud_api.models.errors.ApiError>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    /**
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public com.hathora.cloud_api.models.operations.CreatePublicLobbyDeprecatedRequestBuilder createPublicLobbyDeprecated() {
        return new com.hathora.cloud_api.models.operations.CreatePublicLobbyDeprecatedRequestBuilder(this);
    }

    /**
     * @param security The security details to use for authentication.
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public com.hathora.cloud_api.models.operations.CreatePublicLobbyDeprecatedResponse createPublicLobbyDeprecated(
            com.hathora.cloud_api.models.operations.CreatePublicLobbyDeprecatedSecurity security) throws Exception {
        return createPublicLobbyDeprecated(security, Optional.empty(), Optional.empty(), Optional.empty());
    }
    /**
     * @param security The security details to use for authentication.
     * @param appId
     * @param local
     * @param region
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public com.hathora.cloud_api.models.operations.CreatePublicLobbyDeprecatedResponse createPublicLobbyDeprecated(
            com.hathora.cloud_api.models.operations.CreatePublicLobbyDeprecatedSecurity security,
            Optional<? extends String> appId,
            Optional<? extends Boolean> local,
            Optional<? extends com.hathora.cloud_api.models.shared.Region> region) throws Exception {
        com.hathora.cloud_api.models.operations.CreatePublicLobbyDeprecatedRequest request =
            com.hathora.cloud_api.models.operations.CreatePublicLobbyDeprecatedRequest
                .builder()
                .appId(appId)
                .local(local)
                .region(region)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                com.hathora.cloud_api.models.operations.CreatePublicLobbyDeprecatedRequest.class,
                _baseUrl,
                "/lobby/v1/{appId}/create/public",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                this.sdkConfiguration.userAgent);

        _req.addQueryParams(Utils.getQueryParams(
                com.hathora.cloud_api.models.operations.CreatePublicLobbyDeprecatedRequest.class,
                request, 
                this.sdkConfiguration.globals));

        Utils.configureSecurity(_req, security);

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("CreatePublicLobbyDeprecated", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "402", "404", "422", "429", "4XX", "500", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("CreatePublicLobbyDeprecated", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("CreatePublicLobbyDeprecated", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("CreatePublicLobbyDeprecated", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.hathora.cloud_api.models.operations.CreatePublicLobbyDeprecatedResponse.Builder _resBuilder = 
            com.hathora.cloud_api.models.operations.CreatePublicLobbyDeprecatedResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        com.hathora.cloud_api.models.operations.CreatePublicLobbyDeprecatedResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                String _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<String>() {});
                _res.withRoomId(java.util.Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "402", "404", "422", "429", "500")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.hathora.cloud_api.models.errors.ApiError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.hathora.cloud_api.models.errors.ApiError>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }



    /**
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public com.hathora.cloud_api.models.operations.ListActivePublicLobbiesDeprecatedV1RequestBuilder listActivePublicLobbiesDeprecatedV1() {
        return new com.hathora.cloud_api.models.operations.ListActivePublicLobbiesDeprecatedV1RequestBuilder(this);
    }

    /**
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public com.hathora.cloud_api.models.operations.ListActivePublicLobbiesDeprecatedV1Response listActivePublicLobbiesDeprecatedV1Direct() throws Exception {
        return listActivePublicLobbiesDeprecatedV1(Optional.empty(), Optional.empty(), Optional.empty());
    }
    /**
     * @param appId
     * @param local
     * @param region
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public com.hathora.cloud_api.models.operations.ListActivePublicLobbiesDeprecatedV1Response listActivePublicLobbiesDeprecatedV1(
            Optional<? extends String> appId,
            Optional<? extends Boolean> local,
            Optional<? extends com.hathora.cloud_api.models.shared.Region> region) throws Exception {
        com.hathora.cloud_api.models.operations.ListActivePublicLobbiesDeprecatedV1Request request =
            com.hathora.cloud_api.models.operations.ListActivePublicLobbiesDeprecatedV1Request
                .builder()
                .appId(appId)
                .local(local)
                .region(region)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                com.hathora.cloud_api.models.operations.ListActivePublicLobbiesDeprecatedV1Request.class,
                _baseUrl,
                "/lobby/v1/{appId}/list",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                this.sdkConfiguration.userAgent);

        _req.addQueryParams(Utils.getQueryParams(
                com.hathora.cloud_api.models.operations.ListActivePublicLobbiesDeprecatedV1Request.class,
                request, 
                this.sdkConfiguration.globals));

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl("ListActivePublicLobbiesDeprecatedV1", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "429", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl("ListActivePublicLobbiesDeprecatedV1", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl("ListActivePublicLobbiesDeprecatedV1", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(new AfterErrorContextImpl("ListActivePublicLobbiesDeprecatedV1", Optional.of(java.util.List.of()), sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.hathora.cloud_api.models.operations.ListActivePublicLobbiesDeprecatedV1Response.Builder _resBuilder = 
            com.hathora.cloud_api.models.operations.ListActivePublicLobbiesDeprecatedV1Response
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        com.hathora.cloud_api.models.operations.ListActivePublicLobbiesDeprecatedV1Response _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                java.util.List<com.hathora.cloud_api.models.shared.Lobby> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<java.util.List<com.hathora.cloud_api.models.shared.Lobby>>() {});
                _res.withClasses(java.util.Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "429")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.hathora.cloud_api.models.errors.ApiError _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.hathora.cloud_api.models.errors.ApiError>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.toByteArrayAndClose(_httpRes.body()));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.toByteArrayAndClose(_httpRes.body()));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.toByteArrayAndClose(_httpRes.body()));
    }

}
