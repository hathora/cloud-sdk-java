/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.RequestOperation;

import dev.hathora.cloud_sdk.models.operations.LoginAnonymousRequest;
import dev.hathora.cloud_sdk.models.operations.LoginAnonymousRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.LoginAnonymousResponse;
import dev.hathora.cloud_sdk.models.operations.LoginGoogleRequest;
import dev.hathora.cloud_sdk.models.operations.LoginGoogleRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.LoginGoogleResponse;
import dev.hathora.cloud_sdk.models.operations.LoginNicknameRequest;
import dev.hathora.cloud_sdk.models.operations.LoginNicknameRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.LoginNicknameResponse;
import dev.hathora.cloud_sdk.models.shared.GoogleIdTokenObject;
import dev.hathora.cloud_sdk.models.shared.NicknameObject;
import dev.hathora.cloud_sdk.operations.LoginAnonymous;
import dev.hathora.cloud_sdk.operations.LoginGoogle;
import dev.hathora.cloud_sdk.operations.LoginNickname;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

/**
 * Operations that allow you to generate a Hathora-signed [JSON web token (JWT)](https://jwt.io/) for [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service).
 */
public class AuthV1 {
    private final SDKConfiguration sdkConfiguration;

    AuthV1(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * LoginAnonymous
     * 
     * <p>Returns a unique player token for an anonymous user.
     * 
     * @return The call builder
     */
    public LoginAnonymousRequestBuilder loginAnonymous() {
        return new LoginAnonymousRequestBuilder(sdkConfiguration);
    }

    /**
     * LoginAnonymous
     * 
     * <p>Returns a unique player token for an anonymous user.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LoginAnonymousResponse loginAnonymousDirect() throws Exception {
        return loginAnonymous(Optional.empty());
    }

    /**
     * LoginAnonymous
     * 
     * <p>Returns a unique player token for an anonymous user.
     * 
     * @param appId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LoginAnonymousResponse loginAnonymous(Optional<String> appId) throws Exception {
        LoginAnonymousRequest request =
            LoginAnonymousRequest
                .builder()
                .appId(appId)
                .build();
        RequestOperation<LoginAnonymousRequest, LoginAnonymousResponse> operation
              = new LoginAnonymous.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * LoginGoogle
     * 
     * <p>Returns a unique player token using a Google-signed OIDC `idToken`.
     * 
     * @return The call builder
     */
    public LoginGoogleRequestBuilder loginGoogle() {
        return new LoginGoogleRequestBuilder(sdkConfiguration);
    }

    /**
     * LoginGoogle
     * 
     * <p>Returns a unique player token using a Google-signed OIDC `idToken`.
     * 
     * @param googleIdTokenObject 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LoginGoogleResponse loginGoogle(GoogleIdTokenObject googleIdTokenObject) throws Exception {
        return loginGoogle(googleIdTokenObject, Optional.empty());
    }

    /**
     * LoginGoogle
     * 
     * <p>Returns a unique player token using a Google-signed OIDC `idToken`.
     * 
     * @param googleIdTokenObject 
     * @param appId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LoginGoogleResponse loginGoogle(GoogleIdTokenObject googleIdTokenObject, Optional<String> appId) throws Exception {
        LoginGoogleRequest request =
            LoginGoogleRequest
                .builder()
                .googleIdTokenObject(googleIdTokenObject)
                .appId(appId)
                .build();
        RequestOperation<LoginGoogleRequest, LoginGoogleResponse> operation
              = new LoginGoogle.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * LoginNickname
     * 
     * <p>Returns a unique player token with a specified nickname for a user.
     * 
     * @return The call builder
     */
    public LoginNicknameRequestBuilder loginNickname() {
        return new LoginNicknameRequestBuilder(sdkConfiguration);
    }

    /**
     * LoginNickname
     * 
     * <p>Returns a unique player token with a specified nickname for a user.
     * 
     * @param nicknameObject 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LoginNicknameResponse loginNickname(NicknameObject nicknameObject) throws Exception {
        return loginNickname(nicknameObject, Optional.empty());
    }

    /**
     * LoginNickname
     * 
     * <p>Returns a unique player token with a specified nickname for a user.
     * 
     * @param nicknameObject 
     * @param appId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public LoginNicknameResponse loginNickname(NicknameObject nicknameObject, Optional<String> appId) throws Exception {
        LoginNicknameRequest request =
            LoginNicknameRequest
                .builder()
                .nicknameObject(nicknameObject)
                .appId(appId)
                .build();
        RequestOperation<LoginNicknameRequest, LoginNicknameResponse> operation
              = new LoginNickname.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
