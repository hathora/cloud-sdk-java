/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;

import dev.hathora.cloud_sdk.models.operations.CreateDeploymentRequest;
import dev.hathora.cloud_sdk.models.operations.GetDeploymentRequest;
import dev.hathora.cloud_sdk.models.operations.GetDeploymentsRequest;
import dev.hathora.cloud_sdk.models.operations.GetLatestDeploymentRequest;
import dev.hathora.cloud_sdk.models.operations.async.CreateDeploymentRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.CreateDeploymentResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetDeploymentRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetDeploymentResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetDeploymentsRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetDeploymentsResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetLatestDeploymentRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetLatestDeploymentResponse;
import dev.hathora.cloud_sdk.models.shared.DeploymentConfigV3;
import dev.hathora.cloud_sdk.operations.CreateDeployment;
import dev.hathora.cloud_sdk.operations.GetDeployment;
import dev.hathora.cloud_sdk.operations.GetDeployments;
import dev.hathora.cloud_sdk.operations.GetLatestDeployment;
import dev.hathora.cloud_sdk.utils.Headers;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

/**
 * Operations that allow you configure and manage an application's [build](https://hathora.dev/docs/concepts/hathora-entities#build) at runtime.
 */
public class AsyncDeploymentsV3 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final DeploymentsV3 syncSDK;

    AsyncDeploymentsV3(DeploymentsV3 syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public DeploymentsV3 sync() {
        return syncSDK;
    }


    /**
     * CreateDeployment
     * 
     * <p>Create a new [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment). Creating a new deployment means all new rooms created will use the latest deployment configuration, but existing games in progress will not be affected.
     * 
     * @return The async call builder
     */
    public CreateDeploymentRequestBuilder createDeployment() {
        return new CreateDeploymentRequestBuilder(sdkConfiguration);
    }

    /**
     * CreateDeployment
     * 
     * <p>Create a new [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment). Creating a new deployment means all new rooms created will use the latest deployment configuration, but existing games in progress will not be affected.
     * 
     * @param deploymentConfigV3 
     * @return CompletableFuture&lt;CreateDeploymentResponse&gt; - The async response
     */
    public CompletableFuture<CreateDeploymentResponse> createDeployment(DeploymentConfigV3 deploymentConfigV3) {
        return createDeployment(deploymentConfigV3, Optional.empty());
    }

    /**
     * CreateDeployment
     * 
     * <p>Create a new [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment). Creating a new deployment means all new rooms created will use the latest deployment configuration, but existing games in progress will not be affected.
     * 
     * @param deploymentConfigV3 
     * @param appId 
     * @return CompletableFuture&lt;CreateDeploymentResponse&gt; - The async response
     */
    public CompletableFuture<CreateDeploymentResponse> createDeployment(DeploymentConfigV3 deploymentConfigV3, Optional<String> appId) {
        CreateDeploymentRequest request =
            CreateDeploymentRequest
                .builder()
                .deploymentConfigV3(deploymentConfigV3)
                .appId(appId)
                .build();
        AsyncRequestOperation<CreateDeploymentRequest, CreateDeploymentResponse> operation
              = new CreateDeployment.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetDeployment
     * 
     * <p>Get details for a [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment).
     * 
     * @return The async call builder
     */
    public GetDeploymentRequestBuilder getDeployment() {
        return new GetDeploymentRequestBuilder(sdkConfiguration);
    }

    /**
     * GetDeployment
     * 
     * <p>Get details for a [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment).
     * 
     * @param deploymentId 
     * @return CompletableFuture&lt;GetDeploymentResponse&gt; - The async response
     */
    public CompletableFuture<GetDeploymentResponse> getDeployment(String deploymentId) {
        return getDeployment(Optional.empty(), deploymentId);
    }

    /**
     * GetDeployment
     * 
     * <p>Get details for a [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment).
     * 
     * @param appId 
     * @param deploymentId 
     * @return CompletableFuture&lt;GetDeploymentResponse&gt; - The async response
     */
    public CompletableFuture<GetDeploymentResponse> getDeployment(Optional<String> appId, String deploymentId) {
        GetDeploymentRequest request =
            GetDeploymentRequest
                .builder()
                .appId(appId)
                .deploymentId(deploymentId)
                .build();
        AsyncRequestOperation<GetDeploymentRequest, GetDeploymentResponse> operation
              = new GetDeployment.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetDeployments
     * 
     * <p>Returns an array of [deployments](https://hathora.dev/docs/concepts/hathora-entities#deployment) for an [application](https://hathora.dev/docs/concepts/hathora-entities#application), optionally filtered by deploymentTag or buildTag.
     * 
     * @return The async call builder
     */
    public GetDeploymentsRequestBuilder getDeployments() {
        return new GetDeploymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * GetDeployments
     * 
     * <p>Returns an array of [deployments](https://hathora.dev/docs/concepts/hathora-entities#deployment) for an [application](https://hathora.dev/docs/concepts/hathora-entities#application), optionally filtered by deploymentTag or buildTag.
     * 
     * @return CompletableFuture&lt;GetDeploymentsResponse&gt; - The async response
     */
    public CompletableFuture<GetDeploymentsResponse> getDeploymentsDirect() {
        return getDeployments(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * GetDeployments
     * 
     * <p>Returns an array of [deployments](https://hathora.dev/docs/concepts/hathora-entities#deployment) for an [application](https://hathora.dev/docs/concepts/hathora-entities#application), optionally filtered by deploymentTag or buildTag.
     * 
     * @param appId 
     * @param buildTag 
     * @param deploymentTag 
     * @return CompletableFuture&lt;GetDeploymentsResponse&gt; - The async response
     */
    public CompletableFuture<GetDeploymentsResponse> getDeployments(
            Optional<String> appId, Optional<String> buildTag,
            Optional<String> deploymentTag) {
        GetDeploymentsRequest request =
            GetDeploymentsRequest
                .builder()
                .appId(appId)
                .buildTag(buildTag)
                .deploymentTag(deploymentTag)
                .build();
        AsyncRequestOperation<GetDeploymentsRequest, GetDeploymentsResponse> operation
              = new GetDeployments.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetLatestDeployment
     * 
     * <p>Get the latest [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) for an [application](https://hathora.dev/docs/concepts/hathora-entities#application).
     * 
     * @return The async call builder
     */
    public GetLatestDeploymentRequestBuilder getLatestDeployment() {
        return new GetLatestDeploymentRequestBuilder(sdkConfiguration);
    }

    /**
     * GetLatestDeployment
     * 
     * <p>Get the latest [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) for an [application](https://hathora.dev/docs/concepts/hathora-entities#application).
     * 
     * @return CompletableFuture&lt;GetLatestDeploymentResponse&gt; - The async response
     */
    public CompletableFuture<GetLatestDeploymentResponse> getLatestDeploymentDirect() {
        return getLatestDeployment(Optional.empty());
    }

    /**
     * GetLatestDeployment
     * 
     * <p>Get the latest [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) for an [application](https://hathora.dev/docs/concepts/hathora-entities#application).
     * 
     * @param appId 
     * @return CompletableFuture&lt;GetLatestDeploymentResponse&gt; - The async response
     */
    public CompletableFuture<GetLatestDeploymentResponse> getLatestDeployment(Optional<String> appId) {
        GetLatestDeploymentRequest request =
            GetLatestDeploymentRequest
                .builder()
                .appId(appId)
                .build();
        AsyncRequestOperation<GetLatestDeploymentRequest, GetLatestDeploymentResponse> operation
              = new GetLatestDeployment.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
