/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;

import dev.hathora.cloud_sdk.models.operations.GetProcessInfoDeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.GetRunningProcessesRequest;
import dev.hathora.cloud_sdk.models.operations.GetStoppedProcessesRequest;
import dev.hathora.cloud_sdk.models.operations.async.GetProcessInfoDeprecatedRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetProcessInfoDeprecatedResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetRunningProcessesRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetRunningProcessesResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetStoppedProcessesRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetStoppedProcessesResponse;
import dev.hathora.cloud_sdk.models.shared.Region;
import dev.hathora.cloud_sdk.operations.GetProcessInfoDeprecated;
import dev.hathora.cloud_sdk.operations.GetRunningProcesses;
import dev.hathora.cloud_sdk.operations.GetStoppedProcesses;
import dev.hathora.cloud_sdk.utils.Headers;
import java.lang.Deprecated;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

/**
 * Deprecated. Use [ProcessesV3](https://hathora.dev/api#tag/ProcessesV3).
 */
public class AsyncProcessesV1 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final ProcessesV1 syncSDK;

    AsyncProcessesV1(ProcessesV1 syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public ProcessesV1 sync() {
        return syncSDK;
    }


    /**
     * GetProcessInfoDeprecated
     * 
     * <p>Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetProcessInfoDeprecatedRequestBuilder getProcessInfoDeprecated() {
        return new GetProcessInfoDeprecatedRequestBuilder(sdkConfiguration);
    }

    /**
     * GetProcessInfoDeprecated
     * 
     * <p>Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @param processId 
     * @return CompletableFuture&lt;GetProcessInfoDeprecatedResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<GetProcessInfoDeprecatedResponse> getProcessInfoDeprecated(String processId) {
        return getProcessInfoDeprecated(Optional.empty(), processId);
    }

    /**
     * GetProcessInfoDeprecated
     * 
     * <p>Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @param appId 
     * @param processId 
     * @return CompletableFuture&lt;GetProcessInfoDeprecatedResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<GetProcessInfoDeprecatedResponse> getProcessInfoDeprecated(Optional<String> appId, String processId) {
        GetProcessInfoDeprecatedRequest request =
            GetProcessInfoDeprecatedRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        AsyncRequestOperation<GetProcessInfoDeprecatedRequest, GetProcessInfoDeprecatedResponse> operation
              = new GetProcessInfoDeprecated.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetRunningProcesses
     * 
     * <p>Retrieve 10 most recently started [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `region`.
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetRunningProcessesRequestBuilder getRunningProcesses() {
        return new GetRunningProcessesRequestBuilder(sdkConfiguration);
    }

    /**
     * GetRunningProcesses
     * 
     * <p>Retrieve 10 most recently started [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `region`.
     * 
     * @return CompletableFuture&lt;GetRunningProcessesResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<GetRunningProcessesResponse> getRunningProcessesDirect() {
        return getRunningProcesses(Optional.empty(), Optional.empty());
    }

    /**
     * GetRunningProcesses
     * 
     * <p>Retrieve 10 most recently started [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `region`.
     * 
     * @param appId 
     * @param region 
     * @return CompletableFuture&lt;GetRunningProcessesResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<GetRunningProcessesResponse> getRunningProcesses(Optional<String> appId, Optional<? extends Region> region) {
        GetRunningProcessesRequest request =
            GetRunningProcessesRequest
                .builder()
                .appId(appId)
                .region(region)
                .build();
        AsyncRequestOperation<GetRunningProcessesRequest, GetRunningProcessesResponse> operation
              = new GetRunningProcesses.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetStoppedProcesses
     * 
     * <p>Retrieve 10 most recently stopped [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `region`.
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetStoppedProcessesRequestBuilder getStoppedProcesses() {
        return new GetStoppedProcessesRequestBuilder(sdkConfiguration);
    }

    /**
     * GetStoppedProcesses
     * 
     * <p>Retrieve 10 most recently stopped [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `region`.
     * 
     * @return CompletableFuture&lt;GetStoppedProcessesResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<GetStoppedProcessesResponse> getStoppedProcessesDirect() {
        return getStoppedProcesses(Optional.empty(), Optional.empty());
    }

    /**
     * GetStoppedProcesses
     * 
     * <p>Retrieve 10 most recently stopped [process](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `region`.
     * 
     * @param appId 
     * @param region 
     * @return CompletableFuture&lt;GetStoppedProcessesResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<GetStoppedProcessesResponse> getStoppedProcesses(Optional<String> appId, Optional<? extends Region> region) {
        GetStoppedProcessesRequest request =
            GetStoppedProcessesRequest
                .builder()
                .appId(appId)
                .region(region)
                .build();
        AsyncRequestOperation<GetStoppedProcessesRequest, GetStoppedProcessesResponse> operation
              = new GetStoppedProcesses.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
