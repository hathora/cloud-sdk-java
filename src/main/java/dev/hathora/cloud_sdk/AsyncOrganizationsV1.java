/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;
import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestlessOperation;

import dev.hathora.cloud_sdk.models.operations.AcceptInviteRequest;
import dev.hathora.cloud_sdk.models.operations.GetOrgMembersRequest;
import dev.hathora.cloud_sdk.models.operations.GetOrgPendingInvitesRequest;
import dev.hathora.cloud_sdk.models.operations.GetUsageLimitsRequest;
import dev.hathora.cloud_sdk.models.operations.InviteUserRequest;
import dev.hathora.cloud_sdk.models.operations.RejectInviteRequest;
import dev.hathora.cloud_sdk.models.operations.RescindInviteRequest;
import dev.hathora.cloud_sdk.models.operations.UpdateUserInviteRequest;
import dev.hathora.cloud_sdk.models.operations.async.AcceptInviteRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.AcceptInviteResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetOrgMembersRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetOrgMembersResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetOrgPendingInvitesRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetOrgPendingInvitesResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetOrgsRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetOrgsResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetUsageLimitsRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetUsageLimitsResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetUserPendingInvitesRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetUserPendingInvitesResponse;
import dev.hathora.cloud_sdk.models.operations.async.InviteUserRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.InviteUserResponse;
import dev.hathora.cloud_sdk.models.operations.async.RejectInviteRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.RejectInviteResponse;
import dev.hathora.cloud_sdk.models.operations.async.RescindInviteRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.RescindInviteResponse;
import dev.hathora.cloud_sdk.models.operations.async.UpdateUserInviteRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.UpdateUserInviteResponse;
import dev.hathora.cloud_sdk.models.shared.CreateUserInvite;
import dev.hathora.cloud_sdk.models.shared.RescindUserInvite;
import dev.hathora.cloud_sdk.models.shared.UpdateUserInvite;
import dev.hathora.cloud_sdk.operations.AcceptInvite;
import dev.hathora.cloud_sdk.operations.GetOrgMembers;
import dev.hathora.cloud_sdk.operations.GetOrgPendingInvites;
import dev.hathora.cloud_sdk.operations.GetOrgs;
import dev.hathora.cloud_sdk.operations.GetUsageLimits;
import dev.hathora.cloud_sdk.operations.GetUserPendingInvites;
import dev.hathora.cloud_sdk.operations.InviteUser;
import dev.hathora.cloud_sdk.operations.RejectInvite;
import dev.hathora.cloud_sdk.operations.RescindInvite;
import dev.hathora.cloud_sdk.utils.Headers;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncOrganizationsV1 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final OrganizationsV1 syncSDK;

    AsyncOrganizationsV1(OrganizationsV1 syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public OrganizationsV1 sync() {
        return syncSDK;
    }


    /**
     * AcceptInvite
     * 
     * @return The async call builder
     */
    public AcceptInviteRequestBuilder acceptInvite() {
        return new AcceptInviteRequestBuilder(sdkConfiguration);
    }

    /**
     * AcceptInvite
     * 
     * @param orgId 
     * @return CompletableFuture&lt;AcceptInviteResponse&gt; - The async response
     */
    public CompletableFuture<AcceptInviteResponse> acceptInvite(String orgId) {
        AcceptInviteRequest request =
            AcceptInviteRequest
                .builder()
                .orgId(orgId)
                .build();
        AsyncRequestOperation<AcceptInviteRequest, AcceptInviteResponse> operation
              = new AcceptInvite.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetOrgMembers
     * 
     * @return The async call builder
     */
    public GetOrgMembersRequestBuilder getOrgMembers() {
        return new GetOrgMembersRequestBuilder(sdkConfiguration);
    }

    /**
     * GetOrgMembers
     * 
     * @param orgId 
     * @return CompletableFuture&lt;GetOrgMembersResponse&gt; - The async response
     */
    public CompletableFuture<GetOrgMembersResponse> getOrgMembers(String orgId) {
        GetOrgMembersRequest request =
            GetOrgMembersRequest
                .builder()
                .orgId(orgId)
                .build();
        AsyncRequestOperation<GetOrgMembersRequest, GetOrgMembersResponse> operation
              = new GetOrgMembers.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetOrgPendingInvites
     * 
     * @return The async call builder
     */
    public GetOrgPendingInvitesRequestBuilder getOrgPendingInvites() {
        return new GetOrgPendingInvitesRequestBuilder(sdkConfiguration);
    }

    /**
     * GetOrgPendingInvites
     * 
     * @param orgId 
     * @return CompletableFuture&lt;GetOrgPendingInvitesResponse&gt; - The async response
     */
    public CompletableFuture<GetOrgPendingInvitesResponse> getOrgPendingInvites(String orgId) {
        GetOrgPendingInvitesRequest request =
            GetOrgPendingInvitesRequest
                .builder()
                .orgId(orgId)
                .build();
        AsyncRequestOperation<GetOrgPendingInvitesRequest, GetOrgPendingInvitesResponse> operation
              = new GetOrgPendingInvites.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetOrgs
     * 
     * <p>Returns an unsorted list of all organizations that you are a member of (an accepted membership invite). An organization is uniquely identified by an `orgId`.
     * 
     * @return The async call builder
     */
    public GetOrgsRequestBuilder getOrgs() {
        return new GetOrgsRequestBuilder(sdkConfiguration);
    }

    /**
     * GetOrgs
     * 
     * <p>Returns an unsorted list of all organizations that you are a member of (an accepted membership invite). An organization is uniquely identified by an `orgId`.
     * 
     * @return CompletableFuture&lt;GetOrgsResponse&gt; - The async response
     */
    public CompletableFuture<GetOrgsResponse> getOrgsDirect() {
        AsyncRequestlessOperation<GetOrgsResponse> operation
            = new GetOrgs.Async(sdkConfiguration, _headers);
        return operation.doRequest()
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetUsageLimits
     * 
     * @return The async call builder
     */
    public GetUsageLimitsRequestBuilder getUsageLimits() {
        return new GetUsageLimitsRequestBuilder(sdkConfiguration);
    }

    /**
     * GetUsageLimits
     * 
     * @return CompletableFuture&lt;GetUsageLimitsResponse&gt; - The async response
     */
    public CompletableFuture<GetUsageLimitsResponse> getUsageLimitsDirect() {
        return getUsageLimits(Optional.empty());
    }

    /**
     * GetUsageLimits
     * 
     * @param orgId 
     * @return CompletableFuture&lt;GetUsageLimitsResponse&gt; - The async response
     */
    public CompletableFuture<GetUsageLimitsResponse> getUsageLimits(Optional<String> orgId) {
        GetUsageLimitsRequest request =
            GetUsageLimitsRequest
                .builder()
                .orgId(orgId)
                .build();
        AsyncRequestOperation<GetUsageLimitsRequest, GetUsageLimitsResponse> operation
              = new GetUsageLimits.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetUserPendingInvites
     * 
     * @return The async call builder
     */
    public GetUserPendingInvitesRequestBuilder getUserPendingInvites() {
        return new GetUserPendingInvitesRequestBuilder(sdkConfiguration);
    }

    /**
     * GetUserPendingInvites
     * 
     * @return CompletableFuture&lt;GetUserPendingInvitesResponse&gt; - The async response
     */
    public CompletableFuture<GetUserPendingInvitesResponse> getUserPendingInvitesDirect() {
        AsyncRequestlessOperation<GetUserPendingInvitesResponse> operation
            = new GetUserPendingInvites.Async(sdkConfiguration, _headers);
        return operation.doRequest()
            .thenCompose(operation::handleResponse);
    }


    /**
     * InviteUser
     * 
     * @return The async call builder
     */
    public InviteUserRequestBuilder inviteUser() {
        return new InviteUserRequestBuilder(sdkConfiguration);
    }

    /**
     * InviteUser
     * 
     * @param createUserInvite 
     * @param orgId 
     * @return CompletableFuture&lt;InviteUserResponse&gt; - The async response
     */
    public CompletableFuture<InviteUserResponse> inviteUser(CreateUserInvite createUserInvite, String orgId) {
        InviteUserRequest request =
            InviteUserRequest
                .builder()
                .createUserInvite(createUserInvite)
                .orgId(orgId)
                .build();
        AsyncRequestOperation<InviteUserRequest, InviteUserResponse> operation
              = new InviteUser.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * RejectInvite
     * 
     * @return The async call builder
     */
    public RejectInviteRequestBuilder rejectInvite() {
        return new RejectInviteRequestBuilder(sdkConfiguration);
    }

    /**
     * RejectInvite
     * 
     * @param orgId 
     * @return CompletableFuture&lt;RejectInviteResponse&gt; - The async response
     */
    public CompletableFuture<RejectInviteResponse> rejectInvite(String orgId) {
        RejectInviteRequest request =
            RejectInviteRequest
                .builder()
                .orgId(orgId)
                .build();
        AsyncRequestOperation<RejectInviteRequest, RejectInviteResponse> operation
              = new RejectInvite.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * RescindInvite
     * 
     * @return The async call builder
     */
    public RescindInviteRequestBuilder rescindInvite() {
        return new RescindInviteRequestBuilder(sdkConfiguration);
    }

    /**
     * RescindInvite
     * 
     * @param rescindUserInvite 
     * @param orgId 
     * @return CompletableFuture&lt;RescindInviteResponse&gt; - The async response
     */
    public CompletableFuture<RescindInviteResponse> rescindInvite(RescindUserInvite rescindUserInvite, String orgId) {
        RescindInviteRequest request =
            RescindInviteRequest
                .builder()
                .rescindUserInvite(rescindUserInvite)
                .orgId(orgId)
                .build();
        AsyncRequestOperation<RescindInviteRequest, RescindInviteResponse> operation
              = new RescindInvite.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * UpdateUserInvite
     * 
     * @return The async call builder
     */
    public UpdateUserInviteRequestBuilder updateUserInvite() {
        return new UpdateUserInviteRequestBuilder(sdkConfiguration);
    }

    /**
     * UpdateUserInvite
     * 
     * @param updateUserInvite 
     * @param orgId 
     * @return CompletableFuture&lt;UpdateUserInviteResponse&gt; - The async response
     */
    public CompletableFuture<UpdateUserInviteResponse> updateUserInvite(UpdateUserInvite updateUserInvite, String orgId) {
        UpdateUserInviteRequest request =
            UpdateUserInviteRequest
                .builder()
                .updateUserInvite(updateUserInvite)
                .orgId(orgId)
                .build();
        AsyncRequestOperation<UpdateUserInviteRequest, UpdateUserInviteResponse> operation
              = new dev.hathora.cloud_sdk.operations.UpdateUserInvite.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
