/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;

import dev.hathora.cloud_sdk.models.operations.GetBalanceRequest;
import dev.hathora.cloud_sdk.models.operations.GetInvoicesRequest;
import dev.hathora.cloud_sdk.models.operations.GetPaymentMethodRequest;
import dev.hathora.cloud_sdk.models.operations.GetUpcomingInvoiceItemsRequest;
import dev.hathora.cloud_sdk.models.operations.GetUpcomingInvoiceTotalRequest;
import dev.hathora.cloud_sdk.models.operations.InitStripeCustomerPortalUrlRequest;
import dev.hathora.cloud_sdk.models.operations.async.GetBalanceRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetBalanceResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetInvoicesRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetInvoicesResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetPaymentMethodRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetPaymentMethodResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetUpcomingInvoiceItemsRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetUpcomingInvoiceItemsResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetUpcomingInvoiceTotalRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetUpcomingInvoiceTotalResponse;
import dev.hathora.cloud_sdk.models.operations.async.InitStripeCustomerPortalUrlRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.InitStripeCustomerPortalUrlResponse;
import dev.hathora.cloud_sdk.models.shared.CustomerPortalUrl;
import dev.hathora.cloud_sdk.operations.GetBalance;
import dev.hathora.cloud_sdk.operations.GetInvoices;
import dev.hathora.cloud_sdk.operations.GetPaymentMethod;
import dev.hathora.cloud_sdk.operations.GetUpcomingInvoiceItems;
import dev.hathora.cloud_sdk.operations.GetUpcomingInvoiceTotal;
import dev.hathora.cloud_sdk.operations.InitStripeCustomerPortalUrl;
import dev.hathora.cloud_sdk.utils.Headers;
import java.lang.Deprecated;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncBillingV1 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final BillingV1 syncSDK;

    AsyncBillingV1(BillingV1 syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public BillingV1 sync() {
        return syncSDK;
    }


    /**
     * GetBalance
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetBalanceRequestBuilder getBalance() {
        return new GetBalanceRequestBuilder(sdkConfiguration);
    }

    /**
     * GetBalance
     * 
     * @return CompletableFuture&lt;GetBalanceResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<GetBalanceResponse> getBalanceDirect() {
        return getBalance(Optional.empty());
    }

    /**
     * GetBalance
     * 
     * @param orgId 
     * @return CompletableFuture&lt;GetBalanceResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<GetBalanceResponse> getBalance(Optional<String> orgId) {
        GetBalanceRequest request =
            GetBalanceRequest
                .builder()
                .orgId(orgId)
                .build();
        AsyncRequestOperation<GetBalanceRequest, GetBalanceResponse> operation
              = new GetBalance.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetInvoices
     * 
     * @return The async call builder
     */
    public GetInvoicesRequestBuilder getInvoices() {
        return new GetInvoicesRequestBuilder(sdkConfiguration);
    }

    /**
     * GetInvoices
     * 
     * @return CompletableFuture&lt;GetInvoicesResponse&gt; - The async response
     */
    public CompletableFuture<GetInvoicesResponse> getInvoicesDirect() {
        return getInvoices(Optional.empty());
    }

    /**
     * GetInvoices
     * 
     * @param orgId 
     * @return CompletableFuture&lt;GetInvoicesResponse&gt; - The async response
     */
    public CompletableFuture<GetInvoicesResponse> getInvoices(Optional<String> orgId) {
        GetInvoicesRequest request =
            GetInvoicesRequest
                .builder()
                .orgId(orgId)
                .build();
        AsyncRequestOperation<GetInvoicesRequest, GetInvoicesResponse> operation
              = new GetInvoices.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetPaymentMethod
     * 
     * @return The async call builder
     */
    public GetPaymentMethodRequestBuilder getPaymentMethod() {
        return new GetPaymentMethodRequestBuilder(sdkConfiguration);
    }

    /**
     * GetPaymentMethod
     * 
     * @return CompletableFuture&lt;GetPaymentMethodResponse&gt; - The async response
     */
    public CompletableFuture<GetPaymentMethodResponse> getPaymentMethodDirect() {
        return getPaymentMethod(Optional.empty());
    }

    /**
     * GetPaymentMethod
     * 
     * @param orgId 
     * @return CompletableFuture&lt;GetPaymentMethodResponse&gt; - The async response
     */
    public CompletableFuture<GetPaymentMethodResponse> getPaymentMethod(Optional<String> orgId) {
        GetPaymentMethodRequest request =
            GetPaymentMethodRequest
                .builder()
                .orgId(orgId)
                .build();
        AsyncRequestOperation<GetPaymentMethodRequest, GetPaymentMethodResponse> operation
              = new GetPaymentMethod.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetUpcomingInvoiceItems
     * 
     * @return The async call builder
     */
    public GetUpcomingInvoiceItemsRequestBuilder getUpcomingInvoiceItems() {
        return new GetUpcomingInvoiceItemsRequestBuilder(sdkConfiguration);
    }

    /**
     * GetUpcomingInvoiceItems
     * 
     * @return CompletableFuture&lt;GetUpcomingInvoiceItemsResponse&gt; - The async response
     */
    public CompletableFuture<GetUpcomingInvoiceItemsResponse> getUpcomingInvoiceItemsDirect() {
        return getUpcomingInvoiceItems(Optional.empty());
    }

    /**
     * GetUpcomingInvoiceItems
     * 
     * @param orgId 
     * @return CompletableFuture&lt;GetUpcomingInvoiceItemsResponse&gt; - The async response
     */
    public CompletableFuture<GetUpcomingInvoiceItemsResponse> getUpcomingInvoiceItems(Optional<String> orgId) {
        GetUpcomingInvoiceItemsRequest request =
            GetUpcomingInvoiceItemsRequest
                .builder()
                .orgId(orgId)
                .build();
        AsyncRequestOperation<GetUpcomingInvoiceItemsRequest, GetUpcomingInvoiceItemsResponse> operation
              = new GetUpcomingInvoiceItems.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetUpcomingInvoiceTotal
     * 
     * @return The async call builder
     */
    public GetUpcomingInvoiceTotalRequestBuilder getUpcomingInvoiceTotal() {
        return new GetUpcomingInvoiceTotalRequestBuilder(sdkConfiguration);
    }

    /**
     * GetUpcomingInvoiceTotal
     * 
     * @return CompletableFuture&lt;GetUpcomingInvoiceTotalResponse&gt; - The async response
     */
    public CompletableFuture<GetUpcomingInvoiceTotalResponse> getUpcomingInvoiceTotalDirect() {
        return getUpcomingInvoiceTotal(Optional.empty());
    }

    /**
     * GetUpcomingInvoiceTotal
     * 
     * @param orgId 
     * @return CompletableFuture&lt;GetUpcomingInvoiceTotalResponse&gt; - The async response
     */
    public CompletableFuture<GetUpcomingInvoiceTotalResponse> getUpcomingInvoiceTotal(Optional<String> orgId) {
        GetUpcomingInvoiceTotalRequest request =
            GetUpcomingInvoiceTotalRequest
                .builder()
                .orgId(orgId)
                .build();
        AsyncRequestOperation<GetUpcomingInvoiceTotalRequest, GetUpcomingInvoiceTotalResponse> operation
              = new GetUpcomingInvoiceTotal.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * InitStripeCustomerPortalUrl
     * 
     * @return The async call builder
     */
    public InitStripeCustomerPortalUrlRequestBuilder initStripeCustomerPortalUrl() {
        return new InitStripeCustomerPortalUrlRequestBuilder(sdkConfiguration);
    }

    /**
     * InitStripeCustomerPortalUrl
     * 
     * @param customerPortalUrl 
     * @return CompletableFuture&lt;InitStripeCustomerPortalUrlResponse&gt; - The async response
     */
    public CompletableFuture<InitStripeCustomerPortalUrlResponse> initStripeCustomerPortalUrl(CustomerPortalUrl customerPortalUrl) {
        return initStripeCustomerPortalUrl(customerPortalUrl, Optional.empty());
    }

    /**
     * InitStripeCustomerPortalUrl
     * 
     * @param customerPortalUrl 
     * @param orgId 
     * @return CompletableFuture&lt;InitStripeCustomerPortalUrlResponse&gt; - The async response
     */
    public CompletableFuture<InitStripeCustomerPortalUrlResponse> initStripeCustomerPortalUrl(CustomerPortalUrl customerPortalUrl, Optional<String> orgId) {
        InitStripeCustomerPortalUrlRequest request =
            InitStripeCustomerPortalUrlRequest
                .builder()
                .customerPortalUrl(customerPortalUrl)
                .orgId(orgId)
                .build();
        AsyncRequestOperation<InitStripeCustomerPortalUrlRequest, InitStripeCustomerPortalUrlResponse> operation
              = new InitStripeCustomerPortalUrl.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
