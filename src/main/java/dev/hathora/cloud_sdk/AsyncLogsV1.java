/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;

import dev.hathora.cloud_sdk.models.operations.DownloadLogForProcessRequest;
import dev.hathora.cloud_sdk.models.operations.GetLogsForProcessRequest;
import dev.hathora.cloud_sdk.models.operations.async.DownloadLogForProcessRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.DownloadLogForProcessResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetLogsForProcessRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetLogsForProcessResponse;
import dev.hathora.cloud_sdk.operations.DownloadLogForProcess;
import dev.hathora.cloud_sdk.operations.GetLogsForProcess;
import dev.hathora.cloud_sdk.utils.Headers;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncLogsV1 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final LogsV1 syncSDK;

    AsyncLogsV1(LogsV1 syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public LogsV1 sync() {
        return syncSDK;
    }


    /**
     * DownloadLogForProcess
     * 
     * <p>Download entire log file for a stopped process.
     * 
     * @return The async call builder
     */
    public DownloadLogForProcessRequestBuilder downloadLogForProcess() {
        return new DownloadLogForProcessRequestBuilder(sdkConfiguration);
    }

    /**
     * DownloadLogForProcess
     * 
     * <p>Download entire log file for a stopped process.
     * 
     * @param processId 
     * @return CompletableFuture&lt;DownloadLogForProcessResponse&gt; - The async response
     */
    public CompletableFuture<DownloadLogForProcessResponse> downloadLogForProcess(String processId) {
        return downloadLogForProcess(Optional.empty(), processId);
    }

    /**
     * DownloadLogForProcess
     * 
     * <p>Download entire log file for a stopped process.
     * 
     * @param appId 
     * @param processId 
     * @return CompletableFuture&lt;DownloadLogForProcessResponse&gt; - The async response
     */
    public CompletableFuture<DownloadLogForProcessResponse> downloadLogForProcess(Optional<String> appId, String processId) {
        DownloadLogForProcessRequest request =
            DownloadLogForProcessRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        AsyncRequestOperation<DownloadLogForProcessRequest, DownloadLogForProcessResponse> operation
              = new DownloadLogForProcess.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetLogsForProcess
     * 
     * <p>Returns a stream of logs for a [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
     * 
     * @return The async call builder
     */
    public GetLogsForProcessRequestBuilder getLogsForProcess() {
        return new GetLogsForProcessRequestBuilder(sdkConfiguration);
    }

    /**
     * GetLogsForProcess
     * 
     * <p>Returns a stream of logs for a [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetLogsForProcessResponse&gt; - The async response
     */
    public CompletableFuture<GetLogsForProcessResponse> getLogsForProcess(GetLogsForProcessRequest request) {
        AsyncRequestOperation<GetLogsForProcessRequest, GetLogsForProcessResponse> operation
              = new GetLogsForProcess.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
