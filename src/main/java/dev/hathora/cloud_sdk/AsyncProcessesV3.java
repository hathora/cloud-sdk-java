/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;

import dev.hathora.cloud_sdk.models.operations.CreateProcessRequest;
import dev.hathora.cloud_sdk.models.operations.GetLatestProcessesRequest;
import dev.hathora.cloud_sdk.models.operations.GetProcessMetricsRequest;
import dev.hathora.cloud_sdk.models.operations.GetProcessRequest;
import dev.hathora.cloud_sdk.models.operations.GetProcessesCountExperimentalRequest;
import dev.hathora.cloud_sdk.models.operations.StopProcessRequest;
import dev.hathora.cloud_sdk.models.operations.async.CreateProcessRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.CreateProcessResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetLatestProcessesRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetLatestProcessesResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetProcessMetricsRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetProcessMetricsResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetProcessRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetProcessResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetProcessesCountExperimentalRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetProcessesCountExperimentalResponse;
import dev.hathora.cloud_sdk.models.operations.async.StopProcessRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.StopProcessResponse;
import dev.hathora.cloud_sdk.models.shared.Region;
import dev.hathora.cloud_sdk.operations.CreateProcess;
import dev.hathora.cloud_sdk.operations.GetLatestProcesses;
import dev.hathora.cloud_sdk.operations.GetProcess;
import dev.hathora.cloud_sdk.operations.GetProcessMetrics;
import dev.hathora.cloud_sdk.operations.GetProcessesCountExperimental;
import dev.hathora.cloud_sdk.operations.StopProcess;
import dev.hathora.cloud_sdk.utils.Headers;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

/**
 * Operations to get data on active and stopped [processes](https://hathora.dev/docs/concepts/hathora-entities#process).
 */
public class AsyncProcessesV3 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final ProcessesV3 syncSDK;

    AsyncProcessesV3(ProcessesV3 syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public ProcessesV3 sync() {
        return syncSDK;
    }


    /**
     * CreateProcess
     * 
     * <p>Creates a [process](https://hathora.dev/docs/concepts/hathora-entities#process) without a room. Use this to pre-allocate processes ahead of time so that subsequent room assignment via [CreateRoom()](https://hathora.dev/api#tag/RoomV2/operation/CreateRoom) can be instant.
     * 
     * @return The async call builder
     */
    public CreateProcessRequestBuilder createProcess() {
        return new CreateProcessRequestBuilder(sdkConfiguration);
    }

    /**
     * CreateProcess
     * 
     * <p>Creates a [process](https://hathora.dev/docs/concepts/hathora-entities#process) without a room. Use this to pre-allocate processes ahead of time so that subsequent room assignment via [CreateRoom()](https://hathora.dev/api#tag/RoomV2/operation/CreateRoom) can be instant.
     * 
     * @param region 
     * @return CompletableFuture&lt;CreateProcessResponse&gt; - The async response
     */
    public CompletableFuture<CreateProcessResponse> createProcess(Region region) {
        return createProcess(Optional.empty(), region);
    }

    /**
     * CreateProcess
     * 
     * <p>Creates a [process](https://hathora.dev/docs/concepts/hathora-entities#process) without a room. Use this to pre-allocate processes ahead of time so that subsequent room assignment via [CreateRoom()](https://hathora.dev/api#tag/RoomV2/operation/CreateRoom) can be instant.
     * 
     * @param appId 
     * @param region 
     * @return CompletableFuture&lt;CreateProcessResponse&gt; - The async response
     */
    public CompletableFuture<CreateProcessResponse> createProcess(Optional<String> appId, Region region) {
        CreateProcessRequest request =
            CreateProcessRequest
                .builder()
                .appId(appId)
                .region(region)
                .build();
        AsyncRequestOperation<CreateProcessRequest, CreateProcessResponse> operation
              = new CreateProcess.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetLatestProcesses
     * 
     * <p>Retrieve the 10 most recent [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `status` or `region`.
     * 
     * @return The async call builder
     */
    public GetLatestProcessesRequestBuilder getLatestProcesses() {
        return new GetLatestProcessesRequestBuilder(sdkConfiguration);
    }

    /**
     * GetLatestProcesses
     * 
     * <p>Retrieve the 10 most recent [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `status` or `region`.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetLatestProcessesResponse&gt; - The async response
     */
    public CompletableFuture<GetLatestProcessesResponse> getLatestProcesses(GetLatestProcessesRequest request) {
        AsyncRequestOperation<GetLatestProcessesRequest, GetLatestProcessesResponse> operation
              = new GetLatestProcesses.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetProcess
     * 
     * <p>Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @return The async call builder
     */
    public GetProcessRequestBuilder getProcess() {
        return new GetProcessRequestBuilder(sdkConfiguration);
    }

    /**
     * GetProcess
     * 
     * <p>Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @param processId 
     * @return CompletableFuture&lt;GetProcessResponse&gt; - The async response
     */
    public CompletableFuture<GetProcessResponse> getProcess(String processId) {
        return getProcess(Optional.empty(), processId);
    }

    /**
     * GetProcess
     * 
     * <p>Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @param appId 
     * @param processId 
     * @return CompletableFuture&lt;GetProcessResponse&gt; - The async response
     */
    public CompletableFuture<GetProcessResponse> getProcess(Optional<String> appId, String processId) {
        GetProcessRequest request =
            GetProcessRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        AsyncRequestOperation<GetProcessRequest, GetProcessResponse> operation
              = new GetProcess.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetProcessMetrics
     * 
     * @return The async call builder
     */
    public GetProcessMetricsRequestBuilder getProcessMetrics() {
        return new GetProcessMetricsRequestBuilder(sdkConfiguration);
    }

    /**
     * GetProcessMetrics
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetProcessMetricsResponse&gt; - The async response
     */
    public CompletableFuture<GetProcessMetricsResponse> getProcessMetrics(GetProcessMetricsRequest request) {
        AsyncRequestOperation<GetProcessMetricsRequest, GetProcessMetricsResponse> operation
              = new GetProcessMetrics.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetProcessesCountExperimental
     * 
     * <p>Count the number of [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter by optionally passing in a `status` or `region`.
     * 
     * @return The async call builder
     */
    public GetProcessesCountExperimentalRequestBuilder getProcessesCountExperimental() {
        return new GetProcessesCountExperimentalRequestBuilder(sdkConfiguration);
    }

    /**
     * GetProcessesCountExperimental
     * 
     * <p>Count the number of [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter by optionally passing in a `status` or `region`.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetProcessesCountExperimentalResponse&gt; - The async response
     */
    public CompletableFuture<GetProcessesCountExperimentalResponse> getProcessesCountExperimental(GetProcessesCountExperimentalRequest request) {
        AsyncRequestOperation<GetProcessesCountExperimentalRequest, GetProcessesCountExperimentalResponse> operation
              = new GetProcessesCountExperimental.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * StopProcess
     * 
     * <p>Stops a [process](https://hathora.dev/docs/concepts/hathora-entities#process) immediately.
     * 
     * @return The async call builder
     */
    public StopProcessRequestBuilder stopProcess() {
        return new StopProcessRequestBuilder(sdkConfiguration);
    }

    /**
     * StopProcess
     * 
     * <p>Stops a [process](https://hathora.dev/docs/concepts/hathora-entities#process) immediately.
     * 
     * @param processId 
     * @return CompletableFuture&lt;StopProcessResponse&gt; - The async response
     */
    public CompletableFuture<StopProcessResponse> stopProcess(String processId) {
        return stopProcess(Optional.empty(), processId);
    }

    /**
     * StopProcess
     * 
     * <p>Stops a [process](https://hathora.dev/docs/concepts/hathora-entities#process) immediately.
     * 
     * @param appId 
     * @param processId 
     * @return CompletableFuture&lt;StopProcessResponse&gt; - The async response
     */
    public CompletableFuture<StopProcessResponse> stopProcess(Optional<String> appId, String processId) {
        StopProcessRequest request =
            StopProcessRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        AsyncRequestOperation<StopProcessRequest, StopProcessResponse> operation
              = new StopProcess.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
