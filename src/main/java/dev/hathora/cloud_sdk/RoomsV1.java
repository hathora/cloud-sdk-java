/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.RequestOperation;

import dev.hathora.cloud_sdk.models.operations.CreateRoomDeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.CreateRoomDeprecatedRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.CreateRoomDeprecatedResponse;
import dev.hathora.cloud_sdk.models.operations.DestroyRoomDeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.DestroyRoomDeprecatedRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.DestroyRoomDeprecatedResponse;
import dev.hathora.cloud_sdk.models.operations.GetActiveRoomsForProcessDeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.GetActiveRoomsForProcessDeprecatedRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetActiveRoomsForProcessDeprecatedResponse;
import dev.hathora.cloud_sdk.models.operations.GetConnectionInfoDeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.GetConnectionInfoDeprecatedRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetConnectionInfoDeprecatedResponse;
import dev.hathora.cloud_sdk.models.operations.GetInactiveRoomsForProcessDeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.GetInactiveRoomsForProcessDeprecatedRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetInactiveRoomsForProcessDeprecatedResponse;
import dev.hathora.cloud_sdk.models.operations.GetRoomInfoDeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.GetRoomInfoDeprecatedRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetRoomInfoDeprecatedResponse;
import dev.hathora.cloud_sdk.models.operations.SuspendRoomDeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.SuspendRoomDeprecatedRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.SuspendRoomDeprecatedResponse;
import dev.hathora.cloud_sdk.models.shared.CreateRoomParams;
import dev.hathora.cloud_sdk.operations.CreateRoomDeprecated;
import dev.hathora.cloud_sdk.operations.DestroyRoomDeprecated;
import dev.hathora.cloud_sdk.operations.GetActiveRoomsForProcessDeprecated;
import dev.hathora.cloud_sdk.operations.GetConnectionInfoDeprecated;
import dev.hathora.cloud_sdk.operations.GetInactiveRoomsForProcessDeprecated;
import dev.hathora.cloud_sdk.operations.GetRoomInfoDeprecated;
import dev.hathora.cloud_sdk.operations.SuspendRoomDeprecated;
import dev.hathora.cloud_sdk.utils.Headers;
import java.lang.Deprecated;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class RoomsV1 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncRoomsV1 asyncSDK;

    RoomsV1(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncRoomsV1(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncRoomsV1 async() {
        return asyncSDK;
    }

    /**
     * CreateRoomDeprecated
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CreateRoomDeprecatedRequestBuilder createRoomDeprecated() {
        return new CreateRoomDeprecatedRequestBuilder(sdkConfiguration);
    }

    /**
     * CreateRoomDeprecated
     * 
     * @param createRoomParams 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CreateRoomDeprecatedResponse createRoomDeprecated(CreateRoomParams createRoomParams) throws Exception {
        return createRoomDeprecated(createRoomParams, Optional.empty(), Optional.empty());
    }

    /**
     * CreateRoomDeprecated
     * 
     * @param createRoomParams 
     * @param appId 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CreateRoomDeprecatedResponse createRoomDeprecated(
            CreateRoomParams createRoomParams, Optional<String> appId,
            Optional<String> roomId) throws Exception {
        CreateRoomDeprecatedRequest request =
            CreateRoomDeprecatedRequest
                .builder()
                .createRoomParams(createRoomParams)
                .appId(appId)
                .roomId(roomId)
                .build();
        RequestOperation<CreateRoomDeprecatedRequest, CreateRoomDeprecatedResponse> operation
              = new CreateRoomDeprecated.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * DestroyRoomDeprecated
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public DestroyRoomDeprecatedRequestBuilder destroyRoomDeprecated() {
        return new DestroyRoomDeprecatedRequestBuilder(sdkConfiguration);
    }

    /**
     * DestroyRoomDeprecated
     * 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public DestroyRoomDeprecatedResponse destroyRoomDeprecated(String roomId) throws Exception {
        return destroyRoomDeprecated(Optional.empty(), roomId);
    }

    /**
     * DestroyRoomDeprecated
     * 
     * @param appId 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public DestroyRoomDeprecatedResponse destroyRoomDeprecated(Optional<String> appId, String roomId) throws Exception {
        DestroyRoomDeprecatedRequest request =
            DestroyRoomDeprecatedRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        RequestOperation<DestroyRoomDeprecatedRequest, DestroyRoomDeprecatedResponse> operation
              = new DestroyRoomDeprecated.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetActiveRoomsForProcessDeprecated
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetActiveRoomsForProcessDeprecatedRequestBuilder getActiveRoomsForProcessDeprecated() {
        return new GetActiveRoomsForProcessDeprecatedRequestBuilder(sdkConfiguration);
    }

    /**
     * GetActiveRoomsForProcessDeprecated
     * 
     * @param processId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetActiveRoomsForProcessDeprecatedResponse getActiveRoomsForProcessDeprecated(String processId) throws Exception {
        return getActiveRoomsForProcessDeprecated(Optional.empty(), processId);
    }

    /**
     * GetActiveRoomsForProcessDeprecated
     * 
     * @param appId 
     * @param processId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetActiveRoomsForProcessDeprecatedResponse getActiveRoomsForProcessDeprecated(Optional<String> appId, String processId) throws Exception {
        GetActiveRoomsForProcessDeprecatedRequest request =
            GetActiveRoomsForProcessDeprecatedRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        RequestOperation<GetActiveRoomsForProcessDeprecatedRequest, GetActiveRoomsForProcessDeprecatedResponse> operation
              = new GetActiveRoomsForProcessDeprecated.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetConnectionInfoDeprecated
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetConnectionInfoDeprecatedRequestBuilder getConnectionInfoDeprecated() {
        return new GetConnectionInfoDeprecatedRequestBuilder(sdkConfiguration);
    }

    /**
     * GetConnectionInfoDeprecated
     * 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetConnectionInfoDeprecatedResponse getConnectionInfoDeprecated(String roomId) throws Exception {
        return getConnectionInfoDeprecated(Optional.empty(), roomId);
    }

    /**
     * GetConnectionInfoDeprecated
     * 
     * @param appId 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetConnectionInfoDeprecatedResponse getConnectionInfoDeprecated(Optional<String> appId, String roomId) throws Exception {
        GetConnectionInfoDeprecatedRequest request =
            GetConnectionInfoDeprecatedRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        RequestOperation<GetConnectionInfoDeprecatedRequest, GetConnectionInfoDeprecatedResponse> operation
              = new GetConnectionInfoDeprecated.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetInactiveRoomsForProcessDeprecated
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetInactiveRoomsForProcessDeprecatedRequestBuilder getInactiveRoomsForProcessDeprecated() {
        return new GetInactiveRoomsForProcessDeprecatedRequestBuilder(sdkConfiguration);
    }

    /**
     * GetInactiveRoomsForProcessDeprecated
     * 
     * @param processId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetInactiveRoomsForProcessDeprecatedResponse getInactiveRoomsForProcessDeprecated(String processId) throws Exception {
        return getInactiveRoomsForProcessDeprecated(Optional.empty(), processId);
    }

    /**
     * GetInactiveRoomsForProcessDeprecated
     * 
     * @param appId 
     * @param processId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetInactiveRoomsForProcessDeprecatedResponse getInactiveRoomsForProcessDeprecated(Optional<String> appId, String processId) throws Exception {
        GetInactiveRoomsForProcessDeprecatedRequest request =
            GetInactiveRoomsForProcessDeprecatedRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        RequestOperation<GetInactiveRoomsForProcessDeprecatedRequest, GetInactiveRoomsForProcessDeprecatedResponse> operation
              = new GetInactiveRoomsForProcessDeprecated.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetRoomInfoDeprecated
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetRoomInfoDeprecatedRequestBuilder getRoomInfoDeprecated() {
        return new GetRoomInfoDeprecatedRequestBuilder(sdkConfiguration);
    }

    /**
     * GetRoomInfoDeprecated
     * 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetRoomInfoDeprecatedResponse getRoomInfoDeprecated(String roomId) throws Exception {
        return getRoomInfoDeprecated(Optional.empty(), roomId);
    }

    /**
     * GetRoomInfoDeprecated
     * 
     * @param appId 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetRoomInfoDeprecatedResponse getRoomInfoDeprecated(Optional<String> appId, String roomId) throws Exception {
        GetRoomInfoDeprecatedRequest request =
            GetRoomInfoDeprecatedRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        RequestOperation<GetRoomInfoDeprecatedRequest, GetRoomInfoDeprecatedResponse> operation
              = new GetRoomInfoDeprecated.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * SuspendRoomDeprecated
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public SuspendRoomDeprecatedRequestBuilder suspendRoomDeprecated() {
        return new SuspendRoomDeprecatedRequestBuilder(sdkConfiguration);
    }

    /**
     * SuspendRoomDeprecated
     * 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public SuspendRoomDeprecatedResponse suspendRoomDeprecated(String roomId) throws Exception {
        return suspendRoomDeprecated(Optional.empty(), roomId);
    }

    /**
     * SuspendRoomDeprecated
     * 
     * @param appId 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public SuspendRoomDeprecatedResponse suspendRoomDeprecated(Optional<String> appId, String roomId) throws Exception {
        SuspendRoomDeprecatedRequest request =
            SuspendRoomDeprecatedRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        RequestOperation<SuspendRoomDeprecatedRequest, SuspendRoomDeprecatedResponse> operation
              = new SuspendRoomDeprecated.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
