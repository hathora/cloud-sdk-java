/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.RequestOperation;

import dev.hathora.cloud_sdk.models.operations.GetFleetMetricsRequest;
import dev.hathora.cloud_sdk.models.operations.GetFleetMetricsRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetFleetMetricsResponse;
import dev.hathora.cloud_sdk.models.operations.GetFleetRegionRequest;
import dev.hathora.cloud_sdk.models.operations.GetFleetRegionRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetFleetRegionResponse;
import dev.hathora.cloud_sdk.models.operations.GetFleetsRequest;
import dev.hathora.cloud_sdk.models.operations.GetFleetsRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetFleetsResponse;
import dev.hathora.cloud_sdk.models.operations.UpdateFleetRegionRequest;
import dev.hathora.cloud_sdk.models.operations.UpdateFleetRegionRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.UpdateFleetRegionResponse;
import dev.hathora.cloud_sdk.models.operations.UpdateFleetRequest;
import dev.hathora.cloud_sdk.models.operations.UpdateFleetRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.UpdateFleetResponse;
import dev.hathora.cloud_sdk.models.shared.Region;
import dev.hathora.cloud_sdk.models.shared.UpdateFleet;
import dev.hathora.cloud_sdk.operations.GetFleetMetrics;
import dev.hathora.cloud_sdk.operations.GetFleetRegion;
import dev.hathora.cloud_sdk.operations.GetFleets;
import dev.hathora.cloud_sdk.operations.UpdateFleetRegion;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

/**
 * Operations to manage and view a [fleet](https://hathora.dev/docs/concepts/hathora-entities#fleet).
 */
public class FleetsV1 {
    private final SDKConfiguration sdkConfiguration;

    FleetsV1(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * GetFleetMetrics
     * 
     * <p>Gets metrics for a [fleet](https://hathora.dev/docs/concepts/hathora-entities#fleet) in a region.
     * 
     * @return The call builder
     */
    public GetFleetMetricsRequestBuilder getFleetMetrics() {
        return new GetFleetMetricsRequestBuilder(sdkConfiguration);
    }

    /**
     * GetFleetMetrics
     * 
     * <p>Gets metrics for a [fleet](https://hathora.dev/docs/concepts/hathora-entities#fleet) in a region.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetFleetMetricsResponse getFleetMetrics(GetFleetMetricsRequest request) throws Exception {
        RequestOperation<GetFleetMetricsRequest, GetFleetMetricsResponse> operation
              = new GetFleetMetrics.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetFleetRegion
     * 
     * <p>Gets the configuration for a given [fleet](https://hathora.dev/docs/concepts/hathora-entities#fleet) in a region.
     * 
     * @return The call builder
     */
    public GetFleetRegionRequestBuilder getFleetRegion() {
        return new GetFleetRegionRequestBuilder(sdkConfiguration);
    }

    /**
     * GetFleetRegion
     * 
     * <p>Gets the configuration for a given [fleet](https://hathora.dev/docs/concepts/hathora-entities#fleet) in a region.
     * 
     * @param fleetId 
     * @param region 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetFleetRegionResponse getFleetRegion(String fleetId, Region region) throws Exception {
        return getFleetRegion(fleetId, Optional.empty(), region);
    }

    /**
     * GetFleetRegion
     * 
     * <p>Gets the configuration for a given [fleet](https://hathora.dev/docs/concepts/hathora-entities#fleet) in a region.
     * 
     * @param fleetId 
     * @param orgId 
     * @param region 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetFleetRegionResponse getFleetRegion(
            String fleetId, Optional<String> orgId,
            Region region) throws Exception {
        GetFleetRegionRequest request =
            GetFleetRegionRequest
                .builder()
                .fleetId(fleetId)
                .orgId(orgId)
                .region(region)
                .build();
        RequestOperation<GetFleetRegionRequest, GetFleetRegionResponse> operation
              = new GetFleetRegion.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetFleets
     * 
     * <p>Returns an array of [fleets](https://hathora.dev/docs/concepts/hathora-entities#fleet).
     * 
     * @return The call builder
     */
    public GetFleetsRequestBuilder getFleets() {
        return new GetFleetsRequestBuilder(sdkConfiguration);
    }

    /**
     * GetFleets
     * 
     * <p>Returns an array of [fleets](https://hathora.dev/docs/concepts/hathora-entities#fleet).
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetFleetsResponse getFleetsDirect() throws Exception {
        return getFleets(Optional.empty());
    }

    /**
     * GetFleets
     * 
     * <p>Returns an array of [fleets](https://hathora.dev/docs/concepts/hathora-entities#fleet).
     * 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetFleetsResponse getFleets(Optional<String> orgId) throws Exception {
        GetFleetsRequest request =
            GetFleetsRequest
                .builder()
                .orgId(orgId)
                .build();
        RequestOperation<GetFleetsRequest, GetFleetsResponse> operation
              = new GetFleets.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * UpdateFleet
     * 
     * <p>Updates a [fleet](https://hathora.dev/docs/concepts/hathora-entities#fleet)'s configuration.
     * 
     * @return The call builder
     */
    public UpdateFleetRequestBuilder updateFleet() {
        return new UpdateFleetRequestBuilder(sdkConfiguration);
    }

    /**
     * UpdateFleet
     * 
     * <p>Updates a [fleet](https://hathora.dev/docs/concepts/hathora-entities#fleet)'s configuration.
     * 
     * @param updateFleet 
     * @param fleetId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateFleetResponse updateFleet(UpdateFleet updateFleet, String fleetId) throws Exception {
        return updateFleet(updateFleet, fleetId, Optional.empty());
    }

    /**
     * UpdateFleet
     * 
     * <p>Updates a [fleet](https://hathora.dev/docs/concepts/hathora-entities#fleet)'s configuration.
     * 
     * @param updateFleet 
     * @param fleetId 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateFleetResponse updateFleet(
            UpdateFleet updateFleet, String fleetId,
            Optional<String> orgId) throws Exception {
        UpdateFleetRequest request =
            UpdateFleetRequest
                .builder()
                .updateFleet(updateFleet)
                .fleetId(fleetId)
                .orgId(orgId)
                .build();
        RequestOperation<UpdateFleetRequest, UpdateFleetResponse> operation
              = new dev.hathora.cloud_sdk.operations.UpdateFleet.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * UpdateFleetRegion
     * 
     * <p>Updates the configuration for a given [fleet](https://hathora.dev/docs/concepts/hathora-entities#fleet) in a region.
     * 
     * @return The call builder
     */
    public UpdateFleetRegionRequestBuilder updateFleetRegion() {
        return new UpdateFleetRegionRequestBuilder(sdkConfiguration);
    }

    /**
     * UpdateFleetRegion
     * 
     * <p>Updates the configuration for a given [fleet](https://hathora.dev/docs/concepts/hathora-entities#fleet) in a region.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateFleetRegionResponse updateFleetRegion(UpdateFleetRegionRequest request) throws Exception {
        RequestOperation<UpdateFleetRegionRequest, UpdateFleetRegionResponse> operation
              = new UpdateFleetRegion.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
