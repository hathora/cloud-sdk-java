/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;

import dev.hathora.cloud_sdk.models.operations.CreateLobbyDeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.CreateLobbyDeprecatedSecurity;
import dev.hathora.cloud_sdk.models.operations.CreateLocalLobbyRequest;
import dev.hathora.cloud_sdk.models.operations.CreateLocalLobbyRequestBody;
import dev.hathora.cloud_sdk.models.operations.CreateLocalLobbySecurity;
import dev.hathora.cloud_sdk.models.operations.CreatePrivateLobbyRequest;
import dev.hathora.cloud_sdk.models.operations.CreatePrivateLobbyRequestBody;
import dev.hathora.cloud_sdk.models.operations.CreatePrivateLobbySecurity;
import dev.hathora.cloud_sdk.models.operations.CreatePublicLobbyRequest;
import dev.hathora.cloud_sdk.models.operations.CreatePublicLobbyRequestBody;
import dev.hathora.cloud_sdk.models.operations.CreatePublicLobbySecurity;
import dev.hathora.cloud_sdk.models.operations.GetLobbyInfoRequest;
import dev.hathora.cloud_sdk.models.operations.ListActivePublicLobbiesDeprecatedV2Request;
import dev.hathora.cloud_sdk.models.operations.SetLobbyStateRequest;
import dev.hathora.cloud_sdk.models.operations.async.CreateLobbyDeprecatedRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.CreateLobbyDeprecatedResponse;
import dev.hathora.cloud_sdk.models.operations.async.CreateLocalLobbyRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.CreateLocalLobbyResponse;
import dev.hathora.cloud_sdk.models.operations.async.CreatePrivateLobbyRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.CreatePrivateLobbyResponse;
import dev.hathora.cloud_sdk.models.operations.async.CreatePublicLobbyRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.CreatePublicLobbyResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetLobbyInfoRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetLobbyInfoResponse;
import dev.hathora.cloud_sdk.models.operations.async.ListActivePublicLobbiesDeprecatedV2RequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.ListActivePublicLobbiesDeprecatedV2Response;
import dev.hathora.cloud_sdk.models.operations.async.SetLobbyStateRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.SetLobbyStateResponse;
import dev.hathora.cloud_sdk.models.shared.CreateLobbyParams;
import dev.hathora.cloud_sdk.models.shared.Region;
import dev.hathora.cloud_sdk.models.shared.SetLobbyStateParams;
import dev.hathora.cloud_sdk.operations.CreateLobbyDeprecated;
import dev.hathora.cloud_sdk.operations.CreateLocalLobby;
import dev.hathora.cloud_sdk.operations.CreatePrivateLobby;
import dev.hathora.cloud_sdk.operations.CreatePublicLobby;
import dev.hathora.cloud_sdk.operations.GetLobbyInfo;
import dev.hathora.cloud_sdk.operations.ListActivePublicLobbiesDeprecatedV2;
import dev.hathora.cloud_sdk.operations.SetLobbyState;
import dev.hathora.cloud_sdk.utils.Headers;
import java.lang.Deprecated;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncLobbiesV2 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final LobbiesV2 syncSDK;

    AsyncLobbiesV2(LobbiesV2 syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public LobbiesV2 sync() {
        return syncSDK;
    }


    /**
     * CreateLobbyDeprecated
     * 
     * <p>Create a new lobby for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). A lobby object is a wrapper around a [room](https://hathora.dev/docs/concepts/hathora-entities#room) object. With a lobby, you get additional functionality like configuring the visibility of the room, managing the state of a match, and retrieving a list of public lobbies to display to players.
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CreateLobbyDeprecatedRequestBuilder createLobbyDeprecated() {
        return new CreateLobbyDeprecatedRequestBuilder(sdkConfiguration);
    }

    /**
     * CreateLobbyDeprecated
     * 
     * <p>Create a new lobby for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). A lobby object is a wrapper around a [room](https://hathora.dev/docs/concepts/hathora-entities#room) object. With a lobby, you get additional functionality like configuring the visibility of the room, managing the state of a match, and retrieving a list of public lobbies to display to players.
     * 
     * @param security The security details to use for authentication.
     * @param createLobbyParams 
     * @return CompletableFuture&lt;CreateLobbyDeprecatedResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<CreateLobbyDeprecatedResponse> createLobbyDeprecated(CreateLobbyDeprecatedSecurity security, CreateLobbyParams createLobbyParams) {
        return createLobbyDeprecated(
                security, createLobbyParams, Optional.empty(),
                Optional.empty());
    }

    /**
     * CreateLobbyDeprecated
     * 
     * <p>Create a new lobby for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). A lobby object is a wrapper around a [room](https://hathora.dev/docs/concepts/hathora-entities#room) object. With a lobby, you get additional functionality like configuring the visibility of the room, managing the state of a match, and retrieving a list of public lobbies to display to players.
     * 
     * @param security The security details to use for authentication.
     * @param createLobbyParams 
     * @param appId 
     * @param roomId 
     * @return CompletableFuture&lt;CreateLobbyDeprecatedResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<CreateLobbyDeprecatedResponse> createLobbyDeprecated(
            CreateLobbyDeprecatedSecurity security, CreateLobbyParams createLobbyParams,
            Optional<String> appId, Optional<String> roomId) {
        CreateLobbyDeprecatedRequest request =
            CreateLobbyDeprecatedRequest
                .builder()
                .createLobbyParams(createLobbyParams)
                .appId(appId)
                .roomId(roomId)
                .build();
        AsyncRequestOperation<CreateLobbyDeprecatedRequest, CreateLobbyDeprecatedResponse> operation
              = new CreateLobbyDeprecated.Async(sdkConfiguration, security, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * CreateLocalLobby
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CreateLocalLobbyRequestBuilder createLocalLobby() {
        return new CreateLocalLobbyRequestBuilder(sdkConfiguration);
    }

    /**
     * CreateLocalLobby
     * 
     * @param security The security details to use for authentication.
     * @param requestBody 
     * @return CompletableFuture&lt;CreateLocalLobbyResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<CreateLocalLobbyResponse> createLocalLobby(CreateLocalLobbySecurity security, CreateLocalLobbyRequestBody requestBody) {
        return createLocalLobby(
                security, requestBody, Optional.empty(),
                Optional.empty());
    }

    /**
     * CreateLocalLobby
     * 
     * @param security The security details to use for authentication.
     * @param requestBody 
     * @param appId 
     * @param roomId 
     * @return CompletableFuture&lt;CreateLocalLobbyResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<CreateLocalLobbyResponse> createLocalLobby(
            CreateLocalLobbySecurity security, CreateLocalLobbyRequestBody requestBody,
            Optional<String> appId, Optional<String> roomId) {
        CreateLocalLobbyRequest request =
            CreateLocalLobbyRequest
                .builder()
                .requestBody(requestBody)
                .appId(appId)
                .roomId(roomId)
                .build();
        AsyncRequestOperation<CreateLocalLobbyRequest, CreateLocalLobbyResponse> operation
              = new CreateLocalLobby.Async(sdkConfiguration, security, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * CreatePrivateLobby
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CreatePrivateLobbyRequestBuilder createPrivateLobby() {
        return new CreatePrivateLobbyRequestBuilder(sdkConfiguration);
    }

    /**
     * CreatePrivateLobby
     * 
     * @param security The security details to use for authentication.
     * @param requestBody 
     * @return CompletableFuture&lt;CreatePrivateLobbyResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<CreatePrivateLobbyResponse> createPrivateLobby(CreatePrivateLobbySecurity security, CreatePrivateLobbyRequestBody requestBody) {
        return createPrivateLobby(
                security, requestBody, Optional.empty(),
                Optional.empty());
    }

    /**
     * CreatePrivateLobby
     * 
     * @param security The security details to use for authentication.
     * @param requestBody 
     * @param appId 
     * @param roomId 
     * @return CompletableFuture&lt;CreatePrivateLobbyResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<CreatePrivateLobbyResponse> createPrivateLobby(
            CreatePrivateLobbySecurity security, CreatePrivateLobbyRequestBody requestBody,
            Optional<String> appId, Optional<String> roomId) {
        CreatePrivateLobbyRequest request =
            CreatePrivateLobbyRequest
                .builder()
                .requestBody(requestBody)
                .appId(appId)
                .roomId(roomId)
                .build();
        AsyncRequestOperation<CreatePrivateLobbyRequest, CreatePrivateLobbyResponse> operation
              = new CreatePrivateLobby.Async(sdkConfiguration, security, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * CreatePublicLobby
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CreatePublicLobbyRequestBuilder createPublicLobby() {
        return new CreatePublicLobbyRequestBuilder(sdkConfiguration);
    }

    /**
     * CreatePublicLobby
     * 
     * @param security The security details to use for authentication.
     * @param requestBody 
     * @return CompletableFuture&lt;CreatePublicLobbyResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<CreatePublicLobbyResponse> createPublicLobby(CreatePublicLobbySecurity security, CreatePublicLobbyRequestBody requestBody) {
        return createPublicLobby(
                security, requestBody, Optional.empty(),
                Optional.empty());
    }

    /**
     * CreatePublicLobby
     * 
     * @param security The security details to use for authentication.
     * @param requestBody 
     * @param appId 
     * @param roomId 
     * @return CompletableFuture&lt;CreatePublicLobbyResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<CreatePublicLobbyResponse> createPublicLobby(
            CreatePublicLobbySecurity security, CreatePublicLobbyRequestBody requestBody,
            Optional<String> appId, Optional<String> roomId) {
        CreatePublicLobbyRequest request =
            CreatePublicLobbyRequest
                .builder()
                .requestBody(requestBody)
                .appId(appId)
                .roomId(roomId)
                .build();
        AsyncRequestOperation<CreatePublicLobbyRequest, CreatePublicLobbyResponse> operation
              = new CreatePublicLobby.Async(sdkConfiguration, security, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetLobbyInfo
     * 
     * <p>Get details for a lobby.
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetLobbyInfoRequestBuilder getLobbyInfo() {
        return new GetLobbyInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * GetLobbyInfo
     * 
     * <p>Get details for a lobby.
     * 
     * @param roomId 
     * @return CompletableFuture&lt;GetLobbyInfoResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<GetLobbyInfoResponse> getLobbyInfo(String roomId) {
        return getLobbyInfo(Optional.empty(), roomId);
    }

    /**
     * GetLobbyInfo
     * 
     * <p>Get details for a lobby.
     * 
     * @param appId 
     * @param roomId 
     * @return CompletableFuture&lt;GetLobbyInfoResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<GetLobbyInfoResponse> getLobbyInfo(Optional<String> appId, String roomId) {
        GetLobbyInfoRequest request =
            GetLobbyInfoRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        AsyncRequestOperation<GetLobbyInfoRequest, GetLobbyInfoResponse> operation
              = new GetLobbyInfo.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * ListActivePublicLobbiesDeprecatedV2
     * 
     * <p>Get all active lobbies for a an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter by optionally passing in a `region`. Use this endpoint to display all public lobbies that a player can join in the game client.
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public ListActivePublicLobbiesDeprecatedV2RequestBuilder listActivePublicLobbiesDeprecatedV2() {
        return new ListActivePublicLobbiesDeprecatedV2RequestBuilder(sdkConfiguration);
    }

    /**
     * ListActivePublicLobbiesDeprecatedV2
     * 
     * <p>Get all active lobbies for a an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter by optionally passing in a `region`. Use this endpoint to display all public lobbies that a player can join in the game client.
     * 
     * @return CompletableFuture&lt;ListActivePublicLobbiesDeprecatedV2Response&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<ListActivePublicLobbiesDeprecatedV2Response> listActivePublicLobbiesDeprecatedV2Direct() {
        return listActivePublicLobbiesDeprecatedV2(Optional.empty(), Optional.empty());
    }

    /**
     * ListActivePublicLobbiesDeprecatedV2
     * 
     * <p>Get all active lobbies for a an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter by optionally passing in a `region`. Use this endpoint to display all public lobbies that a player can join in the game client.
     * 
     * @param appId 
     * @param region 
     * @return CompletableFuture&lt;ListActivePublicLobbiesDeprecatedV2Response&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<ListActivePublicLobbiesDeprecatedV2Response> listActivePublicLobbiesDeprecatedV2(Optional<String> appId, Optional<? extends Region> region) {
        ListActivePublicLobbiesDeprecatedV2Request request =
            ListActivePublicLobbiesDeprecatedV2Request
                .builder()
                .appId(appId)
                .region(region)
                .build();
        AsyncRequestOperation<ListActivePublicLobbiesDeprecatedV2Request, ListActivePublicLobbiesDeprecatedV2Response> operation
              = new ListActivePublicLobbiesDeprecatedV2.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * SetLobbyState
     * 
     * <p>Set the state of a lobby. State is intended to be set by the server and must be smaller than 1MB. Use this endpoint to store match data like live player count to enforce max number of clients or persist end-game data (i.e. winner or final scores).
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public SetLobbyStateRequestBuilder setLobbyState() {
        return new SetLobbyStateRequestBuilder(sdkConfiguration);
    }

    /**
     * SetLobbyState
     * 
     * <p>Set the state of a lobby. State is intended to be set by the server and must be smaller than 1MB. Use this endpoint to store match data like live player count to enforce max number of clients or persist end-game data (i.e. winner or final scores).
     * 
     * @param setLobbyStateParams 
     * @param roomId 
     * @return CompletableFuture&lt;SetLobbyStateResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<SetLobbyStateResponse> setLobbyState(SetLobbyStateParams setLobbyStateParams, String roomId) {
        return setLobbyState(setLobbyStateParams, Optional.empty(), roomId);
    }

    /**
     * SetLobbyState
     * 
     * <p>Set the state of a lobby. State is intended to be set by the server and must be smaller than 1MB. Use this endpoint to store match data like live player count to enforce max number of clients or persist end-game data (i.e. winner or final scores).
     * 
     * @param setLobbyStateParams 
     * @param appId 
     * @param roomId 
     * @return CompletableFuture&lt;SetLobbyStateResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<SetLobbyStateResponse> setLobbyState(
            SetLobbyStateParams setLobbyStateParams, Optional<String> appId,
            String roomId) {
        SetLobbyStateRequest request =
            SetLobbyStateRequest
                .builder()
                .setLobbyStateParams(setLobbyStateParams)
                .appId(appId)
                .roomId(roomId)
                .build();
        AsyncRequestOperation<SetLobbyStateRequest, SetLobbyStateResponse> operation
              = new SetLobbyState.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
