/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.RequestOperation;

import dev.hathora.cloud_sdk.models.operations.CreateProcessRequest;
import dev.hathora.cloud_sdk.models.operations.CreateProcessRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.CreateProcessResponse;
import dev.hathora.cloud_sdk.models.operations.GetLatestProcessesRequest;
import dev.hathora.cloud_sdk.models.operations.GetLatestProcessesRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetLatestProcessesResponse;
import dev.hathora.cloud_sdk.models.operations.GetProcessMetricsRequest;
import dev.hathora.cloud_sdk.models.operations.GetProcessMetricsRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetProcessMetricsResponse;
import dev.hathora.cloud_sdk.models.operations.GetProcessRequest;
import dev.hathora.cloud_sdk.models.operations.GetProcessRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetProcessResponse;
import dev.hathora.cloud_sdk.models.operations.GetProcessesCountExperimentalRequest;
import dev.hathora.cloud_sdk.models.operations.GetProcessesCountExperimentalRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetProcessesCountExperimentalResponse;
import dev.hathora.cloud_sdk.models.operations.StopProcessRequest;
import dev.hathora.cloud_sdk.models.operations.StopProcessRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.StopProcessResponse;
import dev.hathora.cloud_sdk.models.shared.Region;
import dev.hathora.cloud_sdk.operations.CreateProcess;
import dev.hathora.cloud_sdk.operations.GetLatestProcesses;
import dev.hathora.cloud_sdk.operations.GetProcess;
import dev.hathora.cloud_sdk.operations.GetProcessMetrics;
import dev.hathora.cloud_sdk.operations.GetProcessesCountExperimental;
import dev.hathora.cloud_sdk.operations.StopProcess;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

/**
 * Operations to get data on active and stopped [processes](https://hathora.dev/docs/concepts/hathora-entities#process).
 */
public class ProcessesV3 {
    private final SDKConfiguration sdkConfiguration;

    ProcessesV3(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * CreateProcess
     * 
     * <p>Creates a [process](https://hathora.dev/docs/concepts/hathora-entities#process) without a room. Use this to pre-allocate processes ahead of time so that subsequent room assignment via [CreateRoom()](https://hathora.dev/api#tag/RoomV2/operation/CreateRoom) can be instant.
     * 
     * @return The call builder
     */
    public CreateProcessRequestBuilder createProcess() {
        return new CreateProcessRequestBuilder(sdkConfiguration);
    }

    /**
     * CreateProcess
     * 
     * <p>Creates a [process](https://hathora.dev/docs/concepts/hathora-entities#process) without a room. Use this to pre-allocate processes ahead of time so that subsequent room assignment via [CreateRoom()](https://hathora.dev/api#tag/RoomV2/operation/CreateRoom) can be instant.
     * 
     * @param region 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateProcessResponse createProcess(Region region) throws Exception {
        return createProcess(Optional.empty(), region);
    }

    /**
     * CreateProcess
     * 
     * <p>Creates a [process](https://hathora.dev/docs/concepts/hathora-entities#process) without a room. Use this to pre-allocate processes ahead of time so that subsequent room assignment via [CreateRoom()](https://hathora.dev/api#tag/RoomV2/operation/CreateRoom) can be instant.
     * 
     * @param appId 
     * @param region 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateProcessResponse createProcess(Optional<String> appId, Region region) throws Exception {
        CreateProcessRequest request =
            CreateProcessRequest
                .builder()
                .appId(appId)
                .region(region)
                .build();
        RequestOperation<CreateProcessRequest, CreateProcessResponse> operation
              = new CreateProcess.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetLatestProcesses
     * 
     * <p>Retrieve the 10 most recent [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `status` or `region`.
     * 
     * @return The call builder
     */
    public GetLatestProcessesRequestBuilder getLatestProcesses() {
        return new GetLatestProcessesRequestBuilder(sdkConfiguration);
    }

    /**
     * GetLatestProcesses
     * 
     * <p>Retrieve the 10 most recent [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `status` or `region`.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetLatestProcessesResponse getLatestProcesses(GetLatestProcessesRequest request) throws Exception {
        RequestOperation<GetLatestProcessesRequest, GetLatestProcessesResponse> operation
              = new GetLatestProcesses.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetProcess
     * 
     * <p>Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @return The call builder
     */
    public GetProcessRequestBuilder getProcess() {
        return new GetProcessRequestBuilder(sdkConfiguration);
    }

    /**
     * GetProcess
     * 
     * <p>Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @param processId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetProcessResponse getProcess(String processId) throws Exception {
        return getProcess(Optional.empty(), processId);
    }

    /**
     * GetProcess
     * 
     * <p>Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @param appId 
     * @param processId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetProcessResponse getProcess(Optional<String> appId, String processId) throws Exception {
        GetProcessRequest request =
            GetProcessRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        RequestOperation<GetProcessRequest, GetProcessResponse> operation
              = new GetProcess.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetProcessMetrics
     * 
     * @return The call builder
     */
    public GetProcessMetricsRequestBuilder getProcessMetrics() {
        return new GetProcessMetricsRequestBuilder(sdkConfiguration);
    }

    /**
     * GetProcessMetrics
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetProcessMetricsResponse getProcessMetrics(GetProcessMetricsRequest request) throws Exception {
        RequestOperation<GetProcessMetricsRequest, GetProcessMetricsResponse> operation
              = new GetProcessMetrics.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetProcessesCountExperimental
     * 
     * <p>Count the number of [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter by optionally passing in a `status` or `region`.
     * 
     * @return The call builder
     */
    public GetProcessesCountExperimentalRequestBuilder getProcessesCountExperimental() {
        return new GetProcessesCountExperimentalRequestBuilder(sdkConfiguration);
    }

    /**
     * GetProcessesCountExperimental
     * 
     * <p>Count the number of [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter by optionally passing in a `status` or `region`.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetProcessesCountExperimentalResponse getProcessesCountExperimental(GetProcessesCountExperimentalRequest request) throws Exception {
        RequestOperation<GetProcessesCountExperimentalRequest, GetProcessesCountExperimentalResponse> operation
              = new GetProcessesCountExperimental.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * StopProcess
     * 
     * <p>Stops a [process](https://hathora.dev/docs/concepts/hathora-entities#process) immediately.
     * 
     * @return The call builder
     */
    public StopProcessRequestBuilder stopProcess() {
        return new StopProcessRequestBuilder(sdkConfiguration);
    }

    /**
     * StopProcess
     * 
     * <p>Stops a [process](https://hathora.dev/docs/concepts/hathora-entities#process) immediately.
     * 
     * @param processId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public StopProcessResponse stopProcess(String processId) throws Exception {
        return stopProcess(Optional.empty(), processId);
    }

    /**
     * StopProcess
     * 
     * <p>Stops a [process](https://hathora.dev/docs/concepts/hathora-entities#process) immediately.
     * 
     * @param appId 
     * @param processId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public StopProcessResponse stopProcess(Optional<String> appId, String processId) throws Exception {
        StopProcessRequest request =
            StopProcessRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        RequestOperation<StopProcessRequest, StopProcessResponse> operation
              = new StopProcess.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
