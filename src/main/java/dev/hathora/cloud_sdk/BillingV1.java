/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.RequestOperation;

import dev.hathora.cloud_sdk.models.operations.GetBalanceRequest;
import dev.hathora.cloud_sdk.models.operations.GetBalanceRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetBalanceResponse;
import dev.hathora.cloud_sdk.models.operations.GetInvoicesRequest;
import dev.hathora.cloud_sdk.models.operations.GetInvoicesRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetInvoicesResponse;
import dev.hathora.cloud_sdk.models.operations.GetPaymentMethodRequest;
import dev.hathora.cloud_sdk.models.operations.GetPaymentMethodRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetPaymentMethodResponse;
import dev.hathora.cloud_sdk.models.operations.GetUpcomingInvoiceItemsRequest;
import dev.hathora.cloud_sdk.models.operations.GetUpcomingInvoiceItemsRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetUpcomingInvoiceItemsResponse;
import dev.hathora.cloud_sdk.models.operations.GetUpcomingInvoiceTotalRequest;
import dev.hathora.cloud_sdk.models.operations.GetUpcomingInvoiceTotalRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetUpcomingInvoiceTotalResponse;
import dev.hathora.cloud_sdk.models.operations.InitStripeCustomerPortalUrlRequest;
import dev.hathora.cloud_sdk.models.operations.InitStripeCustomerPortalUrlRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.InitStripeCustomerPortalUrlResponse;
import dev.hathora.cloud_sdk.models.shared.CustomerPortalUrl;
import dev.hathora.cloud_sdk.operations.GetBalance;
import dev.hathora.cloud_sdk.operations.GetInvoices;
import dev.hathora.cloud_sdk.operations.GetPaymentMethod;
import dev.hathora.cloud_sdk.operations.GetUpcomingInvoiceItems;
import dev.hathora.cloud_sdk.operations.GetUpcomingInvoiceTotal;
import dev.hathora.cloud_sdk.operations.InitStripeCustomerPortalUrl;
import dev.hathora.cloud_sdk.utils.Headers;
import java.lang.Deprecated;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class BillingV1 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncBillingV1 asyncSDK;

    BillingV1(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncBillingV1(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncBillingV1 async() {
        return asyncSDK;
    }

    /**
     * GetBalance
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetBalanceRequestBuilder getBalance() {
        return new GetBalanceRequestBuilder(sdkConfiguration);
    }

    /**
     * GetBalance
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetBalanceResponse getBalanceDirect() throws Exception {
        return getBalance(Optional.empty());
    }

    /**
     * GetBalance
     * 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetBalanceResponse getBalance(Optional<String> orgId) throws Exception {
        GetBalanceRequest request =
            GetBalanceRequest
                .builder()
                .orgId(orgId)
                .build();
        RequestOperation<GetBalanceRequest, GetBalanceResponse> operation
              = new GetBalance.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetInvoices
     * 
     * @return The call builder
     */
    public GetInvoicesRequestBuilder getInvoices() {
        return new GetInvoicesRequestBuilder(sdkConfiguration);
    }

    /**
     * GetInvoices
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetInvoicesResponse getInvoicesDirect() throws Exception {
        return getInvoices(Optional.empty());
    }

    /**
     * GetInvoices
     * 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetInvoicesResponse getInvoices(Optional<String> orgId) throws Exception {
        GetInvoicesRequest request =
            GetInvoicesRequest
                .builder()
                .orgId(orgId)
                .build();
        RequestOperation<GetInvoicesRequest, GetInvoicesResponse> operation
              = new GetInvoices.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetPaymentMethod
     * 
     * @return The call builder
     */
    public GetPaymentMethodRequestBuilder getPaymentMethod() {
        return new GetPaymentMethodRequestBuilder(sdkConfiguration);
    }

    /**
     * GetPaymentMethod
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPaymentMethodResponse getPaymentMethodDirect() throws Exception {
        return getPaymentMethod(Optional.empty());
    }

    /**
     * GetPaymentMethod
     * 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPaymentMethodResponse getPaymentMethod(Optional<String> orgId) throws Exception {
        GetPaymentMethodRequest request =
            GetPaymentMethodRequest
                .builder()
                .orgId(orgId)
                .build();
        RequestOperation<GetPaymentMethodRequest, GetPaymentMethodResponse> operation
              = new GetPaymentMethod.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetUpcomingInvoiceItems
     * 
     * @return The call builder
     */
    public GetUpcomingInvoiceItemsRequestBuilder getUpcomingInvoiceItems() {
        return new GetUpcomingInvoiceItemsRequestBuilder(sdkConfiguration);
    }

    /**
     * GetUpcomingInvoiceItems
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUpcomingInvoiceItemsResponse getUpcomingInvoiceItemsDirect() throws Exception {
        return getUpcomingInvoiceItems(Optional.empty());
    }

    /**
     * GetUpcomingInvoiceItems
     * 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUpcomingInvoiceItemsResponse getUpcomingInvoiceItems(Optional<String> orgId) throws Exception {
        GetUpcomingInvoiceItemsRequest request =
            GetUpcomingInvoiceItemsRequest
                .builder()
                .orgId(orgId)
                .build();
        RequestOperation<GetUpcomingInvoiceItemsRequest, GetUpcomingInvoiceItemsResponse> operation
              = new GetUpcomingInvoiceItems.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetUpcomingInvoiceTotal
     * 
     * @return The call builder
     */
    public GetUpcomingInvoiceTotalRequestBuilder getUpcomingInvoiceTotal() {
        return new GetUpcomingInvoiceTotalRequestBuilder(sdkConfiguration);
    }

    /**
     * GetUpcomingInvoiceTotal
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUpcomingInvoiceTotalResponse getUpcomingInvoiceTotalDirect() throws Exception {
        return getUpcomingInvoiceTotal(Optional.empty());
    }

    /**
     * GetUpcomingInvoiceTotal
     * 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUpcomingInvoiceTotalResponse getUpcomingInvoiceTotal(Optional<String> orgId) throws Exception {
        GetUpcomingInvoiceTotalRequest request =
            GetUpcomingInvoiceTotalRequest
                .builder()
                .orgId(orgId)
                .build();
        RequestOperation<GetUpcomingInvoiceTotalRequest, GetUpcomingInvoiceTotalResponse> operation
              = new GetUpcomingInvoiceTotal.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * InitStripeCustomerPortalUrl
     * 
     * @return The call builder
     */
    public InitStripeCustomerPortalUrlRequestBuilder initStripeCustomerPortalUrl() {
        return new InitStripeCustomerPortalUrlRequestBuilder(sdkConfiguration);
    }

    /**
     * InitStripeCustomerPortalUrl
     * 
     * @param customerPortalUrl 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public InitStripeCustomerPortalUrlResponse initStripeCustomerPortalUrl(CustomerPortalUrl customerPortalUrl) throws Exception {
        return initStripeCustomerPortalUrl(customerPortalUrl, Optional.empty());
    }

    /**
     * InitStripeCustomerPortalUrl
     * 
     * @param customerPortalUrl 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public InitStripeCustomerPortalUrlResponse initStripeCustomerPortalUrl(CustomerPortalUrl customerPortalUrl, Optional<String> orgId) throws Exception {
        InitStripeCustomerPortalUrlRequest request =
            InitStripeCustomerPortalUrlRequest
                .builder()
                .customerPortalUrl(customerPortalUrl)
                .orgId(orgId)
                .build();
        RequestOperation<InitStripeCustomerPortalUrlRequest, InitStripeCustomerPortalUrlResponse> operation
              = new InitStripeCustomerPortalUrl.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
