/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;

import dev.hathora.cloud_sdk.models.operations.CreateLobbyRequest;
import dev.hathora.cloud_sdk.models.operations.CreateLobbySecurity;
import dev.hathora.cloud_sdk.models.operations.GetLobbyInfoByRoomIdRequest;
import dev.hathora.cloud_sdk.models.operations.GetLobbyInfoByShortCodeRequest;
import dev.hathora.cloud_sdk.models.operations.ListActivePublicLobbiesRequest;
import dev.hathora.cloud_sdk.models.operations.async.CreateLobbyRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.CreateLobbyResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetLobbyInfoByRoomIdRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetLobbyInfoByRoomIdResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetLobbyInfoByShortCodeRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetLobbyInfoByShortCodeResponse;
import dev.hathora.cloud_sdk.models.operations.async.ListActivePublicLobbiesRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.ListActivePublicLobbiesResponse;
import dev.hathora.cloud_sdk.models.shared.Region;
import dev.hathora.cloud_sdk.operations.CreateLobby;
import dev.hathora.cloud_sdk.operations.GetLobbyInfoByRoomId;
import dev.hathora.cloud_sdk.operations.GetLobbyInfoByShortCode;
import dev.hathora.cloud_sdk.operations.ListActivePublicLobbies;
import dev.hathora.cloud_sdk.utils.Headers;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncLobbiesV3 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final LobbiesV3 syncSDK;

    AsyncLobbiesV3(LobbiesV3 syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public LobbiesV3 sync() {
        return syncSDK;
    }


    /**
     * CreateLobby
     * 
     * <p>Create a new lobby for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). A lobby object is a wrapper around a [room](https://hathora.dev/docs/concepts/hathora-entities#room) object. With a lobby, you get additional functionality like configuring the visibility of the room, managing the state of a match, and retrieving a list of public lobbies to display to players.
     * 
     * @return The async call builder
     */
    public CreateLobbyRequestBuilder createLobby() {
        return new CreateLobbyRequestBuilder(sdkConfiguration);
    }

    /**
     * CreateLobby
     * 
     * <p>Create a new lobby for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). A lobby object is a wrapper around a [room](https://hathora.dev/docs/concepts/hathora-entities#room) object. With a lobby, you get additional functionality like configuring the visibility of the room, managing the state of a match, and retrieving a list of public lobbies to display to players.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param security The security details to use for authentication.
     * @return CompletableFuture&lt;CreateLobbyResponse&gt; - The async response
     */
    public CompletableFuture<CreateLobbyResponse> createLobby(CreateLobbyRequest request, CreateLobbySecurity security) {
        AsyncRequestOperation<CreateLobbyRequest, CreateLobbyResponse> operation
              = new CreateLobby.Async(sdkConfiguration, security, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetLobbyInfoByRoomId
     * 
     * <p>Get details for a lobby.
     * 
     * @return The async call builder
     */
    public GetLobbyInfoByRoomIdRequestBuilder getLobbyInfoByRoomId() {
        return new GetLobbyInfoByRoomIdRequestBuilder(sdkConfiguration);
    }

    /**
     * GetLobbyInfoByRoomId
     * 
     * <p>Get details for a lobby.
     * 
     * @param roomId 
     * @return CompletableFuture&lt;GetLobbyInfoByRoomIdResponse&gt; - The async response
     */
    public CompletableFuture<GetLobbyInfoByRoomIdResponse> getLobbyInfoByRoomId(String roomId) {
        return getLobbyInfoByRoomId(Optional.empty(), roomId);
    }

    /**
     * GetLobbyInfoByRoomId
     * 
     * <p>Get details for a lobby.
     * 
     * @param appId 
     * @param roomId 
     * @return CompletableFuture&lt;GetLobbyInfoByRoomIdResponse&gt; - The async response
     */
    public CompletableFuture<GetLobbyInfoByRoomIdResponse> getLobbyInfoByRoomId(Optional<String> appId, String roomId) {
        GetLobbyInfoByRoomIdRequest request =
            GetLobbyInfoByRoomIdRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        AsyncRequestOperation<GetLobbyInfoByRoomIdRequest, GetLobbyInfoByRoomIdResponse> operation
              = new GetLobbyInfoByRoomId.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetLobbyInfoByShortCode
     * 
     * <p>Get details for a lobby. If 2 or more lobbies have the same `shortCode`, then the most recently created lobby will be returned.
     * 
     * @return The async call builder
     */
    public GetLobbyInfoByShortCodeRequestBuilder getLobbyInfoByShortCode() {
        return new GetLobbyInfoByShortCodeRequestBuilder(sdkConfiguration);
    }

    /**
     * GetLobbyInfoByShortCode
     * 
     * <p>Get details for a lobby. If 2 or more lobbies have the same `shortCode`, then the most recently created lobby will be returned.
     * 
     * @param shortCode 
     * @return CompletableFuture&lt;GetLobbyInfoByShortCodeResponse&gt; - The async response
     */
    public CompletableFuture<GetLobbyInfoByShortCodeResponse> getLobbyInfoByShortCode(String shortCode) {
        return getLobbyInfoByShortCode(Optional.empty(), shortCode);
    }

    /**
     * GetLobbyInfoByShortCode
     * 
     * <p>Get details for a lobby. If 2 or more lobbies have the same `shortCode`, then the most recently created lobby will be returned.
     * 
     * @param appId 
     * @param shortCode 
     * @return CompletableFuture&lt;GetLobbyInfoByShortCodeResponse&gt; - The async response
     */
    public CompletableFuture<GetLobbyInfoByShortCodeResponse> getLobbyInfoByShortCode(Optional<String> appId, String shortCode) {
        GetLobbyInfoByShortCodeRequest request =
            GetLobbyInfoByShortCodeRequest
                .builder()
                .appId(appId)
                .shortCode(shortCode)
                .build();
        AsyncRequestOperation<GetLobbyInfoByShortCodeRequest, GetLobbyInfoByShortCodeResponse> operation
              = new GetLobbyInfoByShortCode.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * ListActivePublicLobbies
     * 
     * <p>Get all active lobbies for a given [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `region`. Use this endpoint to display all public lobbies that a player can join in the game client.
     * 
     * @return The async call builder
     */
    public ListActivePublicLobbiesRequestBuilder listActivePublicLobbies() {
        return new ListActivePublicLobbiesRequestBuilder(sdkConfiguration);
    }

    /**
     * ListActivePublicLobbies
     * 
     * <p>Get all active lobbies for a given [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `region`. Use this endpoint to display all public lobbies that a player can join in the game client.
     * 
     * @return CompletableFuture&lt;ListActivePublicLobbiesResponse&gt; - The async response
     */
    public CompletableFuture<ListActivePublicLobbiesResponse> listActivePublicLobbiesDirect() {
        return listActivePublicLobbies(Optional.empty(), Optional.empty());
    }

    /**
     * ListActivePublicLobbies
     * 
     * <p>Get all active lobbies for a given [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `region`. Use this endpoint to display all public lobbies that a player can join in the game client.
     * 
     * @param appId 
     * @param region 
     * @return CompletableFuture&lt;ListActivePublicLobbiesResponse&gt; - The async response
     */
    public CompletableFuture<ListActivePublicLobbiesResponse> listActivePublicLobbies(Optional<String> appId, Optional<? extends Region> region) {
        ListActivePublicLobbiesRequest request =
            ListActivePublicLobbiesRequest
                .builder()
                .appId(appId)
                .region(region)
                .build();
        AsyncRequestOperation<ListActivePublicLobbiesRequest, ListActivePublicLobbiesResponse> operation
              = new ListActivePublicLobbies.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
