/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;

import dev.hathora.cloud_sdk.models.operations.CreateAppRequest;
import dev.hathora.cloud_sdk.models.operations.DeleteAppRequest;
import dev.hathora.cloud_sdk.models.operations.GetAppRequest;
import dev.hathora.cloud_sdk.models.operations.GetAppsRequest;
import dev.hathora.cloud_sdk.models.operations.PatchAppRequest;
import dev.hathora.cloud_sdk.models.operations.UpdateAppRequest;
import dev.hathora.cloud_sdk.models.operations.async.CreateAppRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.CreateAppResponse;
import dev.hathora.cloud_sdk.models.operations.async.DeleteAppRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.DeleteAppResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetAppRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetAppResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetAppsRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetAppsResponse;
import dev.hathora.cloud_sdk.models.operations.async.PatchAppRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.PatchAppResponse;
import dev.hathora.cloud_sdk.models.operations.async.UpdateAppRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.UpdateAppResponse;
import dev.hathora.cloud_sdk.models.shared.AppConfigWithServiceConfig;
import dev.hathora.cloud_sdk.models.shared.CreateAppConfig;
import dev.hathora.cloud_sdk.models.shared.PartialAppConfigWithServiceConfig;
import dev.hathora.cloud_sdk.operations.CreateApp;
import dev.hathora.cloud_sdk.operations.DeleteApp;
import dev.hathora.cloud_sdk.operations.GetApp;
import dev.hathora.cloud_sdk.operations.GetApps;
import dev.hathora.cloud_sdk.operations.PatchApp;
import dev.hathora.cloud_sdk.operations.UpdateApp;
import dev.hathora.cloud_sdk.utils.Headers;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

/**
 * Operations that allow you manage your [applications](https://hathora.dev/docs/concepts/hathora-entities#application).
 */
public class AsyncAppsV2 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AppsV2 syncSDK;

    AsyncAppsV2(AppsV2 syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public AppsV2 sync() {
        return syncSDK;
    }


    /**
     * CreateApp
     * 
     * <p>Create a new [application](https://hathora.dev/docs/concepts/hathora-entities#application).
     * 
     * @return The async call builder
     */
    public CreateAppRequestBuilder createApp() {
        return new CreateAppRequestBuilder(sdkConfiguration);
    }

    /**
     * CreateApp
     * 
     * <p>Create a new [application](https://hathora.dev/docs/concepts/hathora-entities#application).
     * 
     * @param createAppConfig 
     * @return CompletableFuture&lt;CreateAppResponse&gt; - The async response
     */
    public CompletableFuture<CreateAppResponse> createApp(CreateAppConfig createAppConfig) {
        return createApp(createAppConfig, Optional.empty());
    }

    /**
     * CreateApp
     * 
     * <p>Create a new [application](https://hathora.dev/docs/concepts/hathora-entities#application).
     * 
     * @param createAppConfig 
     * @param orgId 
     * @return CompletableFuture&lt;CreateAppResponse&gt; - The async response
     */
    public CompletableFuture<CreateAppResponse> createApp(CreateAppConfig createAppConfig, Optional<String> orgId) {
        CreateAppRequest request =
            CreateAppRequest
                .builder()
                .createAppConfig(createAppConfig)
                .orgId(orgId)
                .build();
        AsyncRequestOperation<CreateAppRequest, CreateAppResponse> operation
              = new CreateApp.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * DeleteApp
     * 
     * <p>Delete an [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Your organization will lose access to this application.
     * 
     * @return The async call builder
     */
    public DeleteAppRequestBuilder deleteApp() {
        return new DeleteAppRequestBuilder(sdkConfiguration);
    }

    /**
     * DeleteApp
     * 
     * <p>Delete an [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Your organization will lose access to this application.
     * 
     * @return CompletableFuture&lt;DeleteAppResponse&gt; - The async response
     */
    public CompletableFuture<DeleteAppResponse> deleteAppDirect() {
        return deleteApp(Optional.empty());
    }

    /**
     * DeleteApp
     * 
     * <p>Delete an [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`. Your organization will lose access to this application.
     * 
     * @param appId 
     * @return CompletableFuture&lt;DeleteAppResponse&gt; - The async response
     */
    public CompletableFuture<DeleteAppResponse> deleteApp(Optional<String> appId) {
        DeleteAppRequest request =
            DeleteAppRequest
                .builder()
                .appId(appId)
                .build();
        AsyncRequestOperation<DeleteAppRequest, DeleteAppResponse> operation
              = new DeleteApp.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetApp
     * 
     * <p>Get details for an [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
     * 
     * @return The async call builder
     */
    public GetAppRequestBuilder getApp() {
        return new GetAppRequestBuilder(sdkConfiguration);
    }

    /**
     * GetApp
     * 
     * <p>Get details for an [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
     * 
     * @return CompletableFuture&lt;GetAppResponse&gt; - The async response
     */
    public CompletableFuture<GetAppResponse> getAppDirect() {
        return getApp(Optional.empty());
    }

    /**
     * GetApp
     * 
     * <p>Get details for an [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
     * 
     * @param appId 
     * @return CompletableFuture&lt;GetAppResponse&gt; - The async response
     */
    public CompletableFuture<GetAppResponse> getApp(Optional<String> appId) {
        GetAppRequest request =
            GetAppRequest
                .builder()
                .appId(appId)
                .build();
        AsyncRequestOperation<GetAppRequest, GetAppResponse> operation
              = new GetApp.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetApps
     * 
     * <p>Returns an unsorted list of your organization’s [applications](https://hathora.dev/docs/concepts/hathora-entities#application). An application is uniquely identified by an `appId`.
     * 
     * @return The async call builder
     */
    public GetAppsRequestBuilder getApps() {
        return new GetAppsRequestBuilder(sdkConfiguration);
    }

    /**
     * GetApps
     * 
     * <p>Returns an unsorted list of your organization’s [applications](https://hathora.dev/docs/concepts/hathora-entities#application). An application is uniquely identified by an `appId`.
     * 
     * @return CompletableFuture&lt;GetAppsResponse&gt; - The async response
     */
    public CompletableFuture<GetAppsResponse> getAppsDirect() {
        return getApps(Optional.empty());
    }

    /**
     * GetApps
     * 
     * <p>Returns an unsorted list of your organization’s [applications](https://hathora.dev/docs/concepts/hathora-entities#application). An application is uniquely identified by an `appId`.
     * 
     * @param orgId 
     * @return CompletableFuture&lt;GetAppsResponse&gt; - The async response
     */
    public CompletableFuture<GetAppsResponse> getApps(Optional<String> orgId) {
        GetAppsRequest request =
            GetAppsRequest
                .builder()
                .orgId(orgId)
                .build();
        AsyncRequestOperation<GetAppsRequest, GetAppsResponse> operation
              = new GetApps.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * PatchApp
     * 
     * <p>Patch data for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
     * 
     * @return The async call builder
     */
    public PatchAppRequestBuilder patchApp() {
        return new PatchAppRequestBuilder(sdkConfiguration);
    }

    /**
     * PatchApp
     * 
     * <p>Patch data for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
     * 
     * @param partialAppConfigWithServiceConfig Make all properties in T optional
     * @return CompletableFuture&lt;PatchAppResponse&gt; - The async response
     */
    public CompletableFuture<PatchAppResponse> patchApp(PartialAppConfigWithServiceConfig partialAppConfigWithServiceConfig) {
        return patchApp(partialAppConfigWithServiceConfig, Optional.empty());
    }

    /**
     * PatchApp
     * 
     * <p>Patch data for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
     * 
     * @param partialAppConfigWithServiceConfig Make all properties in T optional
     * @param appId 
     * @return CompletableFuture&lt;PatchAppResponse&gt; - The async response
     */
    public CompletableFuture<PatchAppResponse> patchApp(PartialAppConfigWithServiceConfig partialAppConfigWithServiceConfig, Optional<String> appId) {
        PatchAppRequest request =
            PatchAppRequest
                .builder()
                .partialAppConfigWithServiceConfig(partialAppConfigWithServiceConfig)
                .appId(appId)
                .build();
        AsyncRequestOperation<PatchAppRequest, PatchAppResponse> operation
              = new PatchApp.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * UpdateApp
     * 
     * <p>Set application config (will override all fields) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
     * 
     * @return The async call builder
     */
    public UpdateAppRequestBuilder updateApp() {
        return new UpdateAppRequestBuilder(sdkConfiguration);
    }

    /**
     * UpdateApp
     * 
     * <p>Set application config (will override all fields) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
     * 
     * @param appConfigWithServiceConfig 
     * @return CompletableFuture&lt;UpdateAppResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAppResponse> updateApp(AppConfigWithServiceConfig appConfigWithServiceConfig) {
        return updateApp(appConfigWithServiceConfig, Optional.empty());
    }

    /**
     * UpdateApp
     * 
     * <p>Set application config (will override all fields) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application) using `appId`.
     * 
     * @param appConfigWithServiceConfig 
     * @param appId 
     * @return CompletableFuture&lt;UpdateAppResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAppResponse> updateApp(AppConfigWithServiceConfig appConfigWithServiceConfig, Optional<String> appId) {
        UpdateAppRequest request =
            UpdateAppRequest
                .builder()
                .appConfigWithServiceConfig(appConfigWithServiceConfig)
                .appId(appId)
                .build();
        AsyncRequestOperation<UpdateAppRequest, UpdateAppResponse> operation
              = new UpdateApp.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
