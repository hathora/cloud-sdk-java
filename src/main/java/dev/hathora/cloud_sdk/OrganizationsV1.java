/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.RequestOperation;
import static dev.hathora.cloud_sdk.operations.Operations.RequestlessOperation;

import dev.hathora.cloud_sdk.models.operations.AcceptInviteRequest;
import dev.hathora.cloud_sdk.models.operations.AcceptInviteRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.AcceptInviteResponse;
import dev.hathora.cloud_sdk.models.operations.GetOrgMembersRequest;
import dev.hathora.cloud_sdk.models.operations.GetOrgMembersRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetOrgMembersResponse;
import dev.hathora.cloud_sdk.models.operations.GetOrgPendingInvitesRequest;
import dev.hathora.cloud_sdk.models.operations.GetOrgPendingInvitesRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetOrgPendingInvitesResponse;
import dev.hathora.cloud_sdk.models.operations.GetOrgsRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetOrgsResponse;
import dev.hathora.cloud_sdk.models.operations.GetUsageLimitsRequest;
import dev.hathora.cloud_sdk.models.operations.GetUsageLimitsRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetUsageLimitsResponse;
import dev.hathora.cloud_sdk.models.operations.GetUserPendingInvitesRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetUserPendingInvitesResponse;
import dev.hathora.cloud_sdk.models.operations.InviteUserRequest;
import dev.hathora.cloud_sdk.models.operations.InviteUserRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.InviteUserResponse;
import dev.hathora.cloud_sdk.models.operations.RejectInviteRequest;
import dev.hathora.cloud_sdk.models.operations.RejectInviteRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.RejectInviteResponse;
import dev.hathora.cloud_sdk.models.operations.RescindInviteRequest;
import dev.hathora.cloud_sdk.models.operations.RescindInviteRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.RescindInviteResponse;
import dev.hathora.cloud_sdk.models.operations.UpdateUserInviteRequest;
import dev.hathora.cloud_sdk.models.operations.UpdateUserInviteRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.UpdateUserInviteResponse;
import dev.hathora.cloud_sdk.models.shared.CreateUserInvite;
import dev.hathora.cloud_sdk.models.shared.RescindUserInvite;
import dev.hathora.cloud_sdk.models.shared.UpdateUserInvite;
import dev.hathora.cloud_sdk.operations.AcceptInvite;
import dev.hathora.cloud_sdk.operations.GetOrgMembers;
import dev.hathora.cloud_sdk.operations.GetOrgPendingInvites;
import dev.hathora.cloud_sdk.operations.GetOrgs;
import dev.hathora.cloud_sdk.operations.GetUsageLimits;
import dev.hathora.cloud_sdk.operations.GetUserPendingInvites;
import dev.hathora.cloud_sdk.operations.InviteUser;
import dev.hathora.cloud_sdk.operations.RejectInvite;
import dev.hathora.cloud_sdk.operations.RescindInvite;
import dev.hathora.cloud_sdk.utils.Headers;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class OrganizationsV1 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncOrganizationsV1 asyncSDK;

    OrganizationsV1(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncOrganizationsV1(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncOrganizationsV1 async() {
        return asyncSDK;
    }

    /**
     * AcceptInvite
     * 
     * @return The call builder
     */
    public AcceptInviteRequestBuilder acceptInvite() {
        return new AcceptInviteRequestBuilder(sdkConfiguration);
    }

    /**
     * AcceptInvite
     * 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AcceptInviteResponse acceptInvite(String orgId) throws Exception {
        AcceptInviteRequest request =
            AcceptInviteRequest
                .builder()
                .orgId(orgId)
                .build();
        RequestOperation<AcceptInviteRequest, AcceptInviteResponse> operation
              = new AcceptInvite.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetOrgMembers
     * 
     * @return The call builder
     */
    public GetOrgMembersRequestBuilder getOrgMembers() {
        return new GetOrgMembersRequestBuilder(sdkConfiguration);
    }

    /**
     * GetOrgMembers
     * 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOrgMembersResponse getOrgMembers(String orgId) throws Exception {
        GetOrgMembersRequest request =
            GetOrgMembersRequest
                .builder()
                .orgId(orgId)
                .build();
        RequestOperation<GetOrgMembersRequest, GetOrgMembersResponse> operation
              = new GetOrgMembers.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetOrgPendingInvites
     * 
     * @return The call builder
     */
    public GetOrgPendingInvitesRequestBuilder getOrgPendingInvites() {
        return new GetOrgPendingInvitesRequestBuilder(sdkConfiguration);
    }

    /**
     * GetOrgPendingInvites
     * 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOrgPendingInvitesResponse getOrgPendingInvites(String orgId) throws Exception {
        GetOrgPendingInvitesRequest request =
            GetOrgPendingInvitesRequest
                .builder()
                .orgId(orgId)
                .build();
        RequestOperation<GetOrgPendingInvitesRequest, GetOrgPendingInvitesResponse> operation
              = new GetOrgPendingInvites.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetOrgs
     * 
     * <p>Returns an unsorted list of all organizations that you are a member of (an accepted membership invite). An organization is uniquely identified by an `orgId`.
     * 
     * @return The call builder
     */
    public GetOrgsRequestBuilder getOrgs() {
        return new GetOrgsRequestBuilder(sdkConfiguration);
    }

    /**
     * GetOrgs
     * 
     * <p>Returns an unsorted list of all organizations that you are a member of (an accepted membership invite). An organization is uniquely identified by an `orgId`.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetOrgsResponse getOrgsDirect() throws Exception {
        RequestlessOperation<GetOrgsResponse> operation
            = new GetOrgs.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * GetUsageLimits
     * 
     * @return The call builder
     */
    public GetUsageLimitsRequestBuilder getUsageLimits() {
        return new GetUsageLimitsRequestBuilder(sdkConfiguration);
    }

    /**
     * GetUsageLimits
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUsageLimitsResponse getUsageLimitsDirect() throws Exception {
        return getUsageLimits(Optional.empty());
    }

    /**
     * GetUsageLimits
     * 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUsageLimitsResponse getUsageLimits(Optional<String> orgId) throws Exception {
        GetUsageLimitsRequest request =
            GetUsageLimitsRequest
                .builder()
                .orgId(orgId)
                .build();
        RequestOperation<GetUsageLimitsRequest, GetUsageLimitsResponse> operation
              = new GetUsageLimits.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetUserPendingInvites
     * 
     * @return The call builder
     */
    public GetUserPendingInvitesRequestBuilder getUserPendingInvites() {
        return new GetUserPendingInvitesRequestBuilder(sdkConfiguration);
    }

    /**
     * GetUserPendingInvites
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUserPendingInvitesResponse getUserPendingInvitesDirect() throws Exception {
        RequestlessOperation<GetUserPendingInvitesResponse> operation
            = new GetUserPendingInvites.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * InviteUser
     * 
     * @return The call builder
     */
    public InviteUserRequestBuilder inviteUser() {
        return new InviteUserRequestBuilder(sdkConfiguration);
    }

    /**
     * InviteUser
     * 
     * @param createUserInvite 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public InviteUserResponse inviteUser(CreateUserInvite createUserInvite, String orgId) throws Exception {
        InviteUserRequest request =
            InviteUserRequest
                .builder()
                .createUserInvite(createUserInvite)
                .orgId(orgId)
                .build();
        RequestOperation<InviteUserRequest, InviteUserResponse> operation
              = new InviteUser.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * RejectInvite
     * 
     * @return The call builder
     */
    public RejectInviteRequestBuilder rejectInvite() {
        return new RejectInviteRequestBuilder(sdkConfiguration);
    }

    /**
     * RejectInvite
     * 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RejectInviteResponse rejectInvite(String orgId) throws Exception {
        RejectInviteRequest request =
            RejectInviteRequest
                .builder()
                .orgId(orgId)
                .build();
        RequestOperation<RejectInviteRequest, RejectInviteResponse> operation
              = new RejectInvite.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * RescindInvite
     * 
     * @return The call builder
     */
    public RescindInviteRequestBuilder rescindInvite() {
        return new RescindInviteRequestBuilder(sdkConfiguration);
    }

    /**
     * RescindInvite
     * 
     * @param rescindUserInvite 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RescindInviteResponse rescindInvite(RescindUserInvite rescindUserInvite, String orgId) throws Exception {
        RescindInviteRequest request =
            RescindInviteRequest
                .builder()
                .rescindUserInvite(rescindUserInvite)
                .orgId(orgId)
                .build();
        RequestOperation<RescindInviteRequest, RescindInviteResponse> operation
              = new RescindInvite.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * UpdateUserInvite
     * 
     * @return The call builder
     */
    public UpdateUserInviteRequestBuilder updateUserInvite() {
        return new UpdateUserInviteRequestBuilder(sdkConfiguration);
    }

    /**
     * UpdateUserInvite
     * 
     * @param updateUserInvite 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateUserInviteResponse updateUserInvite(UpdateUserInvite updateUserInvite, String orgId) throws Exception {
        UpdateUserInviteRequest request =
            UpdateUserInviteRequest
                .builder()
                .updateUserInvite(updateUserInvite)
                .orgId(orgId)
                .build();
        RequestOperation<UpdateUserInviteRequest, UpdateUserInviteResponse> operation
              = new dev.hathora.cloud_sdk.operations.UpdateUserInvite.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
