/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;

import dev.hathora.cloud_sdk.models.operations.CreateProcessV2DeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.GetLatestProcessesV2DeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.GetProcessInfoV2DeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.GetProcessesCountExperimentalV2DeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.StopProcessV2DeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.async.CreateProcessV2DeprecatedRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.CreateProcessV2DeprecatedResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetLatestProcessesV2DeprecatedRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetLatestProcessesV2DeprecatedResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetProcessInfoV2DeprecatedRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetProcessInfoV2DeprecatedResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetProcessesCountExperimentalV2DeprecatedRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetProcessesCountExperimentalV2DeprecatedResponse;
import dev.hathora.cloud_sdk.models.operations.async.StopProcessV2DeprecatedRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.StopProcessV2DeprecatedResponse;
import dev.hathora.cloud_sdk.models.shared.ProcessStatus;
import dev.hathora.cloud_sdk.models.shared.Region;
import dev.hathora.cloud_sdk.operations.CreateProcessV2Deprecated;
import dev.hathora.cloud_sdk.operations.GetLatestProcessesV2Deprecated;
import dev.hathora.cloud_sdk.operations.GetProcessInfoV2Deprecated;
import dev.hathora.cloud_sdk.operations.GetProcessesCountExperimentalV2Deprecated;
import dev.hathora.cloud_sdk.operations.StopProcessV2Deprecated;
import dev.hathora.cloud_sdk.utils.Headers;
import java.lang.Deprecated;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

/**
 * Deprecated. Use [ProcessesV3](https://hathora.dev/api#tag/ProcessesV3).
 */
public class AsyncProcessesV2 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final ProcessesV2 syncSDK;

    AsyncProcessesV2(ProcessesV2 syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public ProcessesV2 sync() {
        return syncSDK;
    }


    /**
     * CreateProcessV2Deprecated
     * 
     * <p>Creates a [process](https://hathora.dev/docs/concepts/hathora-entities#process) without a room. Use this to pre-allocate processes ahead of time so that subsequent room assignment via [CreateRoom()](https://hathora.dev/api#tag/RoomV2/operation/CreateRoom) can be instant.
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CreateProcessV2DeprecatedRequestBuilder createProcessV2Deprecated() {
        return new CreateProcessV2DeprecatedRequestBuilder(sdkConfiguration);
    }

    /**
     * CreateProcessV2Deprecated
     * 
     * <p>Creates a [process](https://hathora.dev/docs/concepts/hathora-entities#process) without a room. Use this to pre-allocate processes ahead of time so that subsequent room assignment via [CreateRoom()](https://hathora.dev/api#tag/RoomV2/operation/CreateRoom) can be instant.
     * 
     * @param region 
     * @return CompletableFuture&lt;CreateProcessV2DeprecatedResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<CreateProcessV2DeprecatedResponse> createProcessV2Deprecated(Region region) {
        return createProcessV2Deprecated(Optional.empty(), region);
    }

    /**
     * CreateProcessV2Deprecated
     * 
     * <p>Creates a [process](https://hathora.dev/docs/concepts/hathora-entities#process) without a room. Use this to pre-allocate processes ahead of time so that subsequent room assignment via [CreateRoom()](https://hathora.dev/api#tag/RoomV2/operation/CreateRoom) can be instant.
     * 
     * @param appId 
     * @param region 
     * @return CompletableFuture&lt;CreateProcessV2DeprecatedResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<CreateProcessV2DeprecatedResponse> createProcessV2Deprecated(Optional<String> appId, Region region) {
        CreateProcessV2DeprecatedRequest request =
            CreateProcessV2DeprecatedRequest
                .builder()
                .appId(appId)
                .region(region)
                .build();
        AsyncRequestOperation<CreateProcessV2DeprecatedRequest, CreateProcessV2DeprecatedResponse> operation
              = new CreateProcessV2Deprecated.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetLatestProcessesV2Deprecated
     * 
     * <p>Retrieve the 10 most recent [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `status` or `region`.
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetLatestProcessesV2DeprecatedRequestBuilder getLatestProcessesV2Deprecated() {
        return new GetLatestProcessesV2DeprecatedRequestBuilder(sdkConfiguration);
    }

    /**
     * GetLatestProcessesV2Deprecated
     * 
     * <p>Retrieve the 10 most recent [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `status` or `region`.
     * 
     * @return CompletableFuture&lt;GetLatestProcessesV2DeprecatedResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<GetLatestProcessesV2DeprecatedResponse> getLatestProcessesV2DeprecatedDirect() {
        return getLatestProcessesV2Deprecated(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * GetLatestProcessesV2Deprecated
     * 
     * <p>Retrieve the 10 most recent [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `status` or `region`.
     * 
     * @param appId 
     * @param region 
     * @param status 
     * @return CompletableFuture&lt;GetLatestProcessesV2DeprecatedResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<GetLatestProcessesV2DeprecatedResponse> getLatestProcessesV2Deprecated(
            Optional<String> appId, Optional<? extends List<Region>> region,
            Optional<? extends List<ProcessStatus>> status) {
        GetLatestProcessesV2DeprecatedRequest request =
            GetLatestProcessesV2DeprecatedRequest
                .builder()
                .appId(appId)
                .region(region)
                .status(status)
                .build();
        AsyncRequestOperation<GetLatestProcessesV2DeprecatedRequest, GetLatestProcessesV2DeprecatedResponse> operation
              = new GetLatestProcessesV2Deprecated.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetProcessInfoV2Deprecated
     * 
     * <p>Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetProcessInfoV2DeprecatedRequestBuilder getProcessInfoV2Deprecated() {
        return new GetProcessInfoV2DeprecatedRequestBuilder(sdkConfiguration);
    }

    /**
     * GetProcessInfoV2Deprecated
     * 
     * <p>Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @param processId 
     * @return CompletableFuture&lt;GetProcessInfoV2DeprecatedResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<GetProcessInfoV2DeprecatedResponse> getProcessInfoV2Deprecated(String processId) {
        return getProcessInfoV2Deprecated(Optional.empty(), processId);
    }

    /**
     * GetProcessInfoV2Deprecated
     * 
     * <p>Get details for a [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @param appId 
     * @param processId 
     * @return CompletableFuture&lt;GetProcessInfoV2DeprecatedResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<GetProcessInfoV2DeprecatedResponse> getProcessInfoV2Deprecated(Optional<String> appId, String processId) {
        GetProcessInfoV2DeprecatedRequest request =
            GetProcessInfoV2DeprecatedRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        AsyncRequestOperation<GetProcessInfoV2DeprecatedRequest, GetProcessInfoV2DeprecatedResponse> operation
              = new GetProcessInfoV2Deprecated.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetProcessesCountExperimentalV2Deprecated
     * 
     * <p>Count the number of [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter by optionally passing in a `status` or `region`.
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public GetProcessesCountExperimentalV2DeprecatedRequestBuilder getProcessesCountExperimentalV2Deprecated() {
        return new GetProcessesCountExperimentalV2DeprecatedRequestBuilder(sdkConfiguration);
    }

    /**
     * GetProcessesCountExperimentalV2Deprecated
     * 
     * <p>Count the number of [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter by optionally passing in a `status` or `region`.
     * 
     * @return CompletableFuture&lt;GetProcessesCountExperimentalV2DeprecatedResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<GetProcessesCountExperimentalV2DeprecatedResponse> getProcessesCountExperimentalV2DeprecatedDirect() {
        return getProcessesCountExperimentalV2Deprecated(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * GetProcessesCountExperimentalV2Deprecated
     * 
     * <p>Count the number of [processes](https://hathora.dev/docs/concepts/hathora-entities#process) objects for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter by optionally passing in a `status` or `region`.
     * 
     * @param appId 
     * @param region 
     * @param status 
     * @return CompletableFuture&lt;GetProcessesCountExperimentalV2DeprecatedResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<GetProcessesCountExperimentalV2DeprecatedResponse> getProcessesCountExperimentalV2Deprecated(
            Optional<String> appId, Optional<? extends List<Region>> region,
            Optional<? extends List<ProcessStatus>> status) {
        GetProcessesCountExperimentalV2DeprecatedRequest request =
            GetProcessesCountExperimentalV2DeprecatedRequest
                .builder()
                .appId(appId)
                .region(region)
                .status(status)
                .build();
        AsyncRequestOperation<GetProcessesCountExperimentalV2DeprecatedRequest, GetProcessesCountExperimentalV2DeprecatedResponse> operation
              = new GetProcessesCountExperimentalV2Deprecated.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * StopProcessV2Deprecated
     * 
     * <p>Stops a [process](https://hathora.dev/docs/concepts/hathora-entities#process) immediately.
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public StopProcessV2DeprecatedRequestBuilder stopProcessV2Deprecated() {
        return new StopProcessV2DeprecatedRequestBuilder(sdkConfiguration);
    }

    /**
     * StopProcessV2Deprecated
     * 
     * <p>Stops a [process](https://hathora.dev/docs/concepts/hathora-entities#process) immediately.
     * 
     * @param processId 
     * @return CompletableFuture&lt;StopProcessV2DeprecatedResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<StopProcessV2DeprecatedResponse> stopProcessV2Deprecated(String processId) {
        return stopProcessV2Deprecated(Optional.empty(), processId);
    }

    /**
     * StopProcessV2Deprecated
     * 
     * <p>Stops a [process](https://hathora.dev/docs/concepts/hathora-entities#process) immediately.
     * 
     * @param appId 
     * @param processId 
     * @return CompletableFuture&lt;StopProcessV2DeprecatedResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<StopProcessV2DeprecatedResponse> stopProcessV2Deprecated(Optional<String> appId, String processId) {
        StopProcessV2DeprecatedRequest request =
            StopProcessV2DeprecatedRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        AsyncRequestOperation<StopProcessV2DeprecatedRequest, StopProcessV2DeprecatedResponse> operation
              = new StopProcessV2Deprecated.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
