/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.RequestOperation;

import dev.hathora.cloud_sdk.models.operations.DownloadLogForProcessRequest;
import dev.hathora.cloud_sdk.models.operations.DownloadLogForProcessRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.DownloadLogForProcessResponse;
import dev.hathora.cloud_sdk.models.operations.GetLogsForProcessRequest;
import dev.hathora.cloud_sdk.models.operations.GetLogsForProcessRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetLogsForProcessResponse;
import dev.hathora.cloud_sdk.operations.DownloadLogForProcess;
import dev.hathora.cloud_sdk.operations.GetLogsForProcess;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class LogsV1 {
    private final SDKConfiguration sdkConfiguration;

    LogsV1(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * DownloadLogForProcess
     * 
     * <p>Download entire log file for a stopped process.
     * 
     * @return The call builder
     */
    public DownloadLogForProcessRequestBuilder downloadLogForProcess() {
        return new DownloadLogForProcessRequestBuilder(sdkConfiguration);
    }

    /**
     * DownloadLogForProcess
     * 
     * <p>Download entire log file for a stopped process.
     * 
     * @param processId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DownloadLogForProcessResponse downloadLogForProcess(String processId) throws Exception {
        return downloadLogForProcess(Optional.empty(), processId);
    }

    /**
     * DownloadLogForProcess
     * 
     * <p>Download entire log file for a stopped process.
     * 
     * @param appId 
     * @param processId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DownloadLogForProcessResponse downloadLogForProcess(Optional<String> appId, String processId) throws Exception {
        DownloadLogForProcessRequest request =
            DownloadLogForProcessRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        RequestOperation<DownloadLogForProcessRequest, DownloadLogForProcessResponse> operation
              = new DownloadLogForProcess.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetLogsForProcess
     * 
     * <p>Returns a stream of logs for a [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
     * 
     * @return The call builder
     */
    public GetLogsForProcessRequestBuilder getLogsForProcess() {
        return new GetLogsForProcessRequestBuilder(sdkConfiguration);
    }

    /**
     * GetLogsForProcess
     * 
     * <p>Returns a stream of logs for a [process](https://hathora.dev/docs/concepts/hathora-entities#process) using `appId` and `processId`.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetLogsForProcessResponse getLogsForProcess(GetLogsForProcessRequest request) throws Exception {
        RequestOperation<GetLogsForProcessRequest, GetLogsForProcessResponse> operation
              = new GetLogsForProcess.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
