/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.RequestOperation;

import dev.hathora.cloud_sdk.models.operations.CreateDeploymentRequest;
import dev.hathora.cloud_sdk.models.operations.CreateDeploymentRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.CreateDeploymentResponse;
import dev.hathora.cloud_sdk.models.operations.GetDeploymentRequest;
import dev.hathora.cloud_sdk.models.operations.GetDeploymentRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetDeploymentResponse;
import dev.hathora.cloud_sdk.models.operations.GetDeploymentsRequest;
import dev.hathora.cloud_sdk.models.operations.GetDeploymentsRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetDeploymentsResponse;
import dev.hathora.cloud_sdk.models.operations.GetLatestDeploymentRequest;
import dev.hathora.cloud_sdk.models.operations.GetLatestDeploymentRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetLatestDeploymentResponse;
import dev.hathora.cloud_sdk.models.shared.DeploymentConfigV3;
import dev.hathora.cloud_sdk.operations.CreateDeployment;
import dev.hathora.cloud_sdk.operations.GetDeployment;
import dev.hathora.cloud_sdk.operations.GetDeployments;
import dev.hathora.cloud_sdk.operations.GetLatestDeployment;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

/**
 * Operations that allow you configure and manage an application's [build](https://hathora.dev/docs/concepts/hathora-entities#build) at runtime.
 */
public class DeploymentsV3 {
    private final SDKConfiguration sdkConfiguration;

    DeploymentsV3(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * CreateDeployment
     * 
     * <p>Create a new [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment). Creating a new deployment means all new rooms created will use the latest deployment configuration, but existing games in progress will not be affected.
     * 
     * @return The call builder
     */
    public CreateDeploymentRequestBuilder createDeployment() {
        return new CreateDeploymentRequestBuilder(sdkConfiguration);
    }

    /**
     * CreateDeployment
     * 
     * <p>Create a new [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment). Creating a new deployment means all new rooms created will use the latest deployment configuration, but existing games in progress will not be affected.
     * 
     * @param deploymentConfigV3 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateDeploymentResponse createDeployment(DeploymentConfigV3 deploymentConfigV3) throws Exception {
        return createDeployment(deploymentConfigV3, Optional.empty());
    }

    /**
     * CreateDeployment
     * 
     * <p>Create a new [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment). Creating a new deployment means all new rooms created will use the latest deployment configuration, but existing games in progress will not be affected.
     * 
     * @param deploymentConfigV3 
     * @param appId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateDeploymentResponse createDeployment(DeploymentConfigV3 deploymentConfigV3, Optional<String> appId) throws Exception {
        CreateDeploymentRequest request =
            CreateDeploymentRequest
                .builder()
                .deploymentConfigV3(deploymentConfigV3)
                .appId(appId)
                .build();
        RequestOperation<CreateDeploymentRequest, CreateDeploymentResponse> operation
              = new CreateDeployment.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetDeployment
     * 
     * <p>Get details for a [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment).
     * 
     * @return The call builder
     */
    public GetDeploymentRequestBuilder getDeployment() {
        return new GetDeploymentRequestBuilder(sdkConfiguration);
    }

    /**
     * GetDeployment
     * 
     * <p>Get details for a [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment).
     * 
     * @param deploymentId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetDeploymentResponse getDeployment(String deploymentId) throws Exception {
        return getDeployment(Optional.empty(), deploymentId);
    }

    /**
     * GetDeployment
     * 
     * <p>Get details for a [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment).
     * 
     * @param appId 
     * @param deploymentId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetDeploymentResponse getDeployment(Optional<String> appId, String deploymentId) throws Exception {
        GetDeploymentRequest request =
            GetDeploymentRequest
                .builder()
                .appId(appId)
                .deploymentId(deploymentId)
                .build();
        RequestOperation<GetDeploymentRequest, GetDeploymentResponse> operation
              = new GetDeployment.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetDeployments
     * 
     * <p>Returns an array of [deployments](https://hathora.dev/docs/concepts/hathora-entities#deployment) for an [application](https://hathora.dev/docs/concepts/hathora-entities#application), optionally filtered by deploymentTag or buildTag.
     * 
     * @return The call builder
     */
    public GetDeploymentsRequestBuilder getDeployments() {
        return new GetDeploymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * GetDeployments
     * 
     * <p>Returns an array of [deployments](https://hathora.dev/docs/concepts/hathora-entities#deployment) for an [application](https://hathora.dev/docs/concepts/hathora-entities#application), optionally filtered by deploymentTag or buildTag.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetDeploymentsResponse getDeploymentsDirect() throws Exception {
        return getDeployments(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * GetDeployments
     * 
     * <p>Returns an array of [deployments](https://hathora.dev/docs/concepts/hathora-entities#deployment) for an [application](https://hathora.dev/docs/concepts/hathora-entities#application), optionally filtered by deploymentTag or buildTag.
     * 
     * @param appId 
     * @param buildTag 
     * @param deploymentTag 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetDeploymentsResponse getDeployments(
            Optional<String> appId, Optional<String> buildTag,
            Optional<String> deploymentTag) throws Exception {
        GetDeploymentsRequest request =
            GetDeploymentsRequest
                .builder()
                .appId(appId)
                .buildTag(buildTag)
                .deploymentTag(deploymentTag)
                .build();
        RequestOperation<GetDeploymentsRequest, GetDeploymentsResponse> operation
              = new GetDeployments.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetLatestDeployment
     * 
     * <p>Get the latest [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) for an [application](https://hathora.dev/docs/concepts/hathora-entities#application).
     * 
     * @return The call builder
     */
    public GetLatestDeploymentRequestBuilder getLatestDeployment() {
        return new GetLatestDeploymentRequestBuilder(sdkConfiguration);
    }

    /**
     * GetLatestDeployment
     * 
     * <p>Get the latest [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) for an [application](https://hathora.dev/docs/concepts/hathora-entities#application).
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetLatestDeploymentResponse getLatestDeploymentDirect() throws Exception {
        return getLatestDeployment(Optional.empty());
    }

    /**
     * GetLatestDeployment
     * 
     * <p>Get the latest [deployment](https://hathora.dev/docs/concepts/hathora-entities#deployment) for an [application](https://hathora.dev/docs/concepts/hathora-entities#application).
     * 
     * @param appId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetLatestDeploymentResponse getLatestDeployment(Optional<String> appId) throws Exception {
        GetLatestDeploymentRequest request =
            GetLatestDeploymentRequest
                .builder()
                .appId(appId)
                .build();
        RequestOperation<GetLatestDeploymentRequest, GetLatestDeploymentResponse> operation
              = new GetLatestDeployment.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
