/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import dev.hathora.cloud_sdk.utils.AsyncHooks;
import dev.hathora.cloud_sdk.utils.Globals;
import dev.hathora.cloud_sdk.utils.HTTPClient;
import dev.hathora.cloud_sdk.utils.Hooks;
import dev.hathora.cloud_sdk.utils.RetryConfig;
import dev.hathora.cloud_sdk.utils.SpeakeasyHTTPClient;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;

public class SDKConfiguration {

    private static final String LANGUAGE = "java";
    public static final String OPENAPI_DOC_VERSION = "0.0.1";
    public static final String SDK_VERSION = "3.3.0";
    public static final String GEN_VERSION = "2.708.2";
    private static final String BASE_PACKAGE = "dev.hathora.cloud_sdk";
    public static final String USER_AGENT = 
            String.format("speakeasy-sdk/%s %s %s %s %s",
                LANGUAGE, SDK_VERSION, GEN_VERSION, OPENAPI_DOC_VERSION, BASE_PACKAGE);

    private SecuritySource securitySource = SecuritySource.of(null);
    
    public SecuritySource securitySource() {
        return securitySource;
    }
    
    public void setSecuritySource(SecuritySource securitySource) {
        Utils.checkNotNull(securitySource, "securitySource");
        this.securitySource = securitySource;
    }
    
    private HTTPClient client = new SpeakeasyHTTPClient();
    
    public HTTPClient client() {
        return client;
    }
    
    public void setClient(HTTPClient client) {
        Utils.checkNotNull(client, "client");
        this.client = client;
    }
    
    private String serverUrl;
    
    public String serverUrl() {
        return serverUrl;
    }
    
    public void setServerUrl(String serverUrl) {
        Utils.checkNotNull(serverUrl, "serverUrl");
        this.serverUrl = trimFinalSlash(serverUrl);
    }
    
    private static String trimFinalSlash(String url) {
        if (url == null) {
            return null;
        } else if (url.endsWith("/")) {
            return url.substring(0, url.length() - 1);
        } else  {
            return url;
        }
    }
    
    public String resolvedServerUrl() {
        return serverUrl;
    }
    
    private int serverIdx = 0;
    
    public void setServerIdx(int serverIdx) {
        this.serverIdx = serverIdx;
    }
    
    public int serverIdx() {
        return serverIdx;
    }
    
    
    private Hooks _hooks = createHooks();

    private static Hooks createHooks() {
        Hooks hooks = new Hooks();
        return hooks;
    }
    
    public Hooks hooks() {
        return _hooks;
    }

    public void setHooks(Hooks hooks) {
        this._hooks = hooks;
    }

    /**
     * Initializes state (for example hooks).
     **/
    public void initialize() {
    }

    @SuppressWarnings("serial")
    public Globals globals = new Globals();
    /**
     * Sets the globals configuration. Used by Spring Boot auto-configuration.
     *
     * @param globals The globals configuration to set.
     */
    public void setGlobals(Globals globals) {
        Utils.checkNotNull(globals, "globals");
        this.globals = globals;
    }
    
    private Optional<RetryConfig> retryConfig = Optional.empty();
    
    public Optional<RetryConfig> retryConfig() {
        return retryConfig;
    }

    public void setRetryConfig(Optional<RetryConfig> retryConfig) {
        Utils.checkNotNull(retryConfig, "retryConfig");
        this.retryConfig = retryConfig;
    }
    private ScheduledExecutorService retryScheduler = Executors.newSingleThreadScheduledExecutor();
    
    public ScheduledExecutorService retryScheduler() {
        return retryScheduler;
    }

    public void setAsyncRetryScheduler(ScheduledExecutorService retryScheduler) {
        Utils.checkNotNull(retryScheduler, "retryScheduler");
        this.retryScheduler = retryScheduler;
    }

    private AsyncHooks _asyncHooks = new AsyncHooks();

    public AsyncHooks asyncHooks() {
        return _asyncHooks;
    }

    public void setAsyncHooks(AsyncHooks asyncHooks) {
        Utils.checkNotNull(asyncHooks, "asyncHooks");
        this._asyncHooks = asyncHooks;
    }
}
