/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;

import dev.hathora.cloud_sdk.models.operations.CreateRoomRequest;
import dev.hathora.cloud_sdk.models.operations.DestroyRoomRequest;
import dev.hathora.cloud_sdk.models.operations.GetActiveRoomsForProcessRequest;
import dev.hathora.cloud_sdk.models.operations.GetConnectionInfoRequest;
import dev.hathora.cloud_sdk.models.operations.GetInactiveRoomsForProcessRequest;
import dev.hathora.cloud_sdk.models.operations.GetRoomInfoRequest;
import dev.hathora.cloud_sdk.models.operations.ResumeRoomRequest;
import dev.hathora.cloud_sdk.models.operations.SuspendRoomV2DeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.UpdateRoomConfigRequest;
import dev.hathora.cloud_sdk.models.operations.async.CreateRoomRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.CreateRoomResponse;
import dev.hathora.cloud_sdk.models.operations.async.DestroyRoomRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.DestroyRoomResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetActiveRoomsForProcessRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetActiveRoomsForProcessResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetConnectionInfoRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetConnectionInfoResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetInactiveRoomsForProcessRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetInactiveRoomsForProcessResponse;
import dev.hathora.cloud_sdk.models.operations.async.GetRoomInfoRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.GetRoomInfoResponse;
import dev.hathora.cloud_sdk.models.operations.async.ResumeRoomRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.ResumeRoomResponse;
import dev.hathora.cloud_sdk.models.operations.async.SuspendRoomV2DeprecatedRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.SuspendRoomV2DeprecatedResponse;
import dev.hathora.cloud_sdk.models.operations.async.UpdateRoomConfigRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.UpdateRoomConfigResponse;
import dev.hathora.cloud_sdk.models.shared.CreateRoomParams;
import dev.hathora.cloud_sdk.models.shared.UpdateRoomConfigParams;
import dev.hathora.cloud_sdk.operations.CreateRoom;
import dev.hathora.cloud_sdk.operations.DestroyRoom;
import dev.hathora.cloud_sdk.operations.GetActiveRoomsForProcess;
import dev.hathora.cloud_sdk.operations.GetConnectionInfo;
import dev.hathora.cloud_sdk.operations.GetInactiveRoomsForProcess;
import dev.hathora.cloud_sdk.operations.GetRoomInfo;
import dev.hathora.cloud_sdk.operations.ResumeRoom;
import dev.hathora.cloud_sdk.operations.SuspendRoomV2Deprecated;
import dev.hathora.cloud_sdk.operations.UpdateRoomConfig;
import dev.hathora.cloud_sdk.utils.Headers;
import java.lang.Deprecated;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncRoomsV2 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final RoomsV2 syncSDK;

    AsyncRoomsV2(RoomsV2 syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public RoomsV2 sync() {
        return syncSDK;
    }


    /**
     * CreateRoom
     * 
     * <p>Create a new [room](https://hathora.dev/docs/concepts/hathora-entities#room) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application). Poll the [`GetConnectionInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetConnectionInfo) endpoint to get connection details for an active room.
     * 
     * @return The async call builder
     */
    public CreateRoomRequestBuilder createRoom() {
        return new CreateRoomRequestBuilder(sdkConfiguration);
    }

    /**
     * CreateRoom
     * 
     * <p>Create a new [room](https://hathora.dev/docs/concepts/hathora-entities#room) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application). Poll the [`GetConnectionInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetConnectionInfo) endpoint to get connection details for an active room.
     * 
     * @param createRoomParams 
     * @return CompletableFuture&lt;CreateRoomResponse&gt; - The async response
     */
    public CompletableFuture<CreateRoomResponse> createRoom(CreateRoomParams createRoomParams) {
        return createRoom(createRoomParams, Optional.empty(), Optional.empty());
    }

    /**
     * CreateRoom
     * 
     * <p>Create a new [room](https://hathora.dev/docs/concepts/hathora-entities#room) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application). Poll the [`GetConnectionInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetConnectionInfo) endpoint to get connection details for an active room.
     * 
     * @param createRoomParams 
     * @param appId 
     * @param roomId 
     * @return CompletableFuture&lt;CreateRoomResponse&gt; - The async response
     */
    public CompletableFuture<CreateRoomResponse> createRoom(
            CreateRoomParams createRoomParams, Optional<String> appId,
            Optional<String> roomId) {
        CreateRoomRequest request =
            CreateRoomRequest
                .builder()
                .createRoomParams(createRoomParams)
                .appId(appId)
                .roomId(roomId)
                .build();
        AsyncRequestOperation<CreateRoomRequest, CreateRoomResponse> operation
              = new CreateRoom.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * DestroyRoom
     * 
     * <p>Destroy a [room](https://hathora.dev/docs/concepts/hathora-entities#room). All associated metadata is deleted.
     * 
     * @return The async call builder
     */
    public DestroyRoomRequestBuilder destroyRoom() {
        return new DestroyRoomRequestBuilder(sdkConfiguration);
    }

    /**
     * DestroyRoom
     * 
     * <p>Destroy a [room](https://hathora.dev/docs/concepts/hathora-entities#room). All associated metadata is deleted.
     * 
     * @param roomId 
     * @return CompletableFuture&lt;DestroyRoomResponse&gt; - The async response
     */
    public CompletableFuture<DestroyRoomResponse> destroyRoom(String roomId) {
        return destroyRoom(Optional.empty(), roomId);
    }

    /**
     * DestroyRoom
     * 
     * <p>Destroy a [room](https://hathora.dev/docs/concepts/hathora-entities#room). All associated metadata is deleted.
     * 
     * @param appId 
     * @param roomId 
     * @return CompletableFuture&lt;DestroyRoomResponse&gt; - The async response
     */
    public CompletableFuture<DestroyRoomResponse> destroyRoom(Optional<String> appId, String roomId) {
        DestroyRoomRequest request =
            DestroyRoomRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        AsyncRequestOperation<DestroyRoomRequest, DestroyRoomResponse> operation
              = new DestroyRoom.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetActiveRoomsForProcess
     * 
     * <p>Get all active [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @return The async call builder
     */
    public GetActiveRoomsForProcessRequestBuilder getActiveRoomsForProcess() {
        return new GetActiveRoomsForProcessRequestBuilder(sdkConfiguration);
    }

    /**
     * GetActiveRoomsForProcess
     * 
     * <p>Get all active [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @param processId 
     * @return CompletableFuture&lt;GetActiveRoomsForProcessResponse&gt; - The async response
     */
    public CompletableFuture<GetActiveRoomsForProcessResponse> getActiveRoomsForProcess(String processId) {
        return getActiveRoomsForProcess(Optional.empty(), processId);
    }

    /**
     * GetActiveRoomsForProcess
     * 
     * <p>Get all active [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @param appId 
     * @param processId 
     * @return CompletableFuture&lt;GetActiveRoomsForProcessResponse&gt; - The async response
     */
    public CompletableFuture<GetActiveRoomsForProcessResponse> getActiveRoomsForProcess(Optional<String> appId, String processId) {
        GetActiveRoomsForProcessRequest request =
            GetActiveRoomsForProcessRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        AsyncRequestOperation<GetActiveRoomsForProcessRequest, GetActiveRoomsForProcessResponse> operation
              = new GetActiveRoomsForProcess.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetConnectionInfo
     * 
     * <p>Poll this endpoint to get connection details to a [room](https://hathora.dev/docs/concepts/hathora-entities#room). Clients can call this endpoint without authentication.
     * 
     * @return The async call builder
     */
    public GetConnectionInfoRequestBuilder getConnectionInfo() {
        return new GetConnectionInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * GetConnectionInfo
     * 
     * <p>Poll this endpoint to get connection details to a [room](https://hathora.dev/docs/concepts/hathora-entities#room). Clients can call this endpoint without authentication.
     * 
     * @param roomId 
     * @return CompletableFuture&lt;GetConnectionInfoResponse&gt; - The async response
     */
    public CompletableFuture<GetConnectionInfoResponse> getConnectionInfo(String roomId) {
        return getConnectionInfo(Optional.empty(), roomId);
    }

    /**
     * GetConnectionInfo
     * 
     * <p>Poll this endpoint to get connection details to a [room](https://hathora.dev/docs/concepts/hathora-entities#room). Clients can call this endpoint without authentication.
     * 
     * @param appId 
     * @param roomId 
     * @return CompletableFuture&lt;GetConnectionInfoResponse&gt; - The async response
     */
    public CompletableFuture<GetConnectionInfoResponse> getConnectionInfo(Optional<String> appId, String roomId) {
        GetConnectionInfoRequest request =
            GetConnectionInfoRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        AsyncRequestOperation<GetConnectionInfoRequest, GetConnectionInfoResponse> operation
              = new GetConnectionInfo.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetInactiveRoomsForProcess
     * 
     * <p>Get all inactive [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @return The async call builder
     */
    public GetInactiveRoomsForProcessRequestBuilder getInactiveRoomsForProcess() {
        return new GetInactiveRoomsForProcessRequestBuilder(sdkConfiguration);
    }

    /**
     * GetInactiveRoomsForProcess
     * 
     * <p>Get all inactive [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @param processId 
     * @return CompletableFuture&lt;GetInactiveRoomsForProcessResponse&gt; - The async response
     */
    public CompletableFuture<GetInactiveRoomsForProcessResponse> getInactiveRoomsForProcess(String processId) {
        return getInactiveRoomsForProcess(Optional.empty(), processId);
    }

    /**
     * GetInactiveRoomsForProcess
     * 
     * <p>Get all inactive [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @param appId 
     * @param processId 
     * @return CompletableFuture&lt;GetInactiveRoomsForProcessResponse&gt; - The async response
     */
    public CompletableFuture<GetInactiveRoomsForProcessResponse> getInactiveRoomsForProcess(Optional<String> appId, String processId) {
        GetInactiveRoomsForProcessRequest request =
            GetInactiveRoomsForProcessRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        AsyncRequestOperation<GetInactiveRoomsForProcessRequest, GetInactiveRoomsForProcessResponse> operation
              = new GetInactiveRoomsForProcess.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * GetRoomInfo
     * 
     * <p>Retreive current and historical allocation data for a [room](https://hathora.dev/docs/concepts/hathora-entities#room).
     * 
     * @return The async call builder
     */
    public GetRoomInfoRequestBuilder getRoomInfo() {
        return new GetRoomInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * GetRoomInfo
     * 
     * <p>Retreive current and historical allocation data for a [room](https://hathora.dev/docs/concepts/hathora-entities#room).
     * 
     * @param roomId 
     * @return CompletableFuture&lt;GetRoomInfoResponse&gt; - The async response
     */
    public CompletableFuture<GetRoomInfoResponse> getRoomInfo(String roomId) {
        return getRoomInfo(Optional.empty(), roomId);
    }

    /**
     * GetRoomInfo
     * 
     * <p>Retreive current and historical allocation data for a [room](https://hathora.dev/docs/concepts/hathora-entities#room).
     * 
     * @param appId 
     * @param roomId 
     * @return CompletableFuture&lt;GetRoomInfoResponse&gt; - The async response
     */
    public CompletableFuture<GetRoomInfoResponse> getRoomInfo(Optional<String> appId, String roomId) {
        GetRoomInfoRequest request =
            GetRoomInfoRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        AsyncRequestOperation<GetRoomInfoRequest, GetRoomInfoResponse> operation
              = new GetRoomInfo.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * ResumeRoom
     * 
     * @return The async call builder
     */
    public ResumeRoomRequestBuilder resumeRoom() {
        return new ResumeRoomRequestBuilder(sdkConfiguration);
    }

    /**
     * ResumeRoom
     * 
     * @param roomId 
     * @return CompletableFuture&lt;ResumeRoomResponse&gt; - The async response
     */
    public CompletableFuture<ResumeRoomResponse> resumeRoom(String roomId) {
        return resumeRoom(Optional.empty(), roomId);
    }

    /**
     * ResumeRoom
     * 
     * @param appId 
     * @param roomId 
     * @return CompletableFuture&lt;ResumeRoomResponse&gt; - The async response
     */
    public CompletableFuture<ResumeRoomResponse> resumeRoom(Optional<String> appId, String roomId) {
        ResumeRoomRequest request =
            ResumeRoomRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        AsyncRequestOperation<ResumeRoomRequest, ResumeRoomResponse> operation
              = new ResumeRoom.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * SuspendRoomV2Deprecated
     * 
     * <p>Suspend a [room](https://hathora.dev/docs/concepts/hathora-entities#room). The room is unallocated from the process but can be rescheduled later using the same `roomId`.
     * 
     * @return The async call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public SuspendRoomV2DeprecatedRequestBuilder suspendRoomV2Deprecated() {
        return new SuspendRoomV2DeprecatedRequestBuilder(sdkConfiguration);
    }

    /**
     * SuspendRoomV2Deprecated
     * 
     * <p>Suspend a [room](https://hathora.dev/docs/concepts/hathora-entities#room). The room is unallocated from the process but can be rescheduled later using the same `roomId`.
     * 
     * @param roomId 
     * @return CompletableFuture&lt;SuspendRoomV2DeprecatedResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<SuspendRoomV2DeprecatedResponse> suspendRoomV2Deprecated(String roomId) {
        return suspendRoomV2Deprecated(Optional.empty(), roomId);
    }

    /**
     * SuspendRoomV2Deprecated
     * 
     * <p>Suspend a [room](https://hathora.dev/docs/concepts/hathora-entities#room). The room is unallocated from the process but can be rescheduled later using the same `roomId`.
     * 
     * @param appId 
     * @param roomId 
     * @return CompletableFuture&lt;SuspendRoomV2DeprecatedResponse&gt; - The async response
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public CompletableFuture<SuspendRoomV2DeprecatedResponse> suspendRoomV2Deprecated(Optional<String> appId, String roomId) {
        SuspendRoomV2DeprecatedRequest request =
            SuspendRoomV2DeprecatedRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        AsyncRequestOperation<SuspendRoomV2DeprecatedRequest, SuspendRoomV2DeprecatedResponse> operation
              = new SuspendRoomV2Deprecated.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * UpdateRoomConfig
     * 
     * @return The async call builder
     */
    public UpdateRoomConfigRequestBuilder updateRoomConfig() {
        return new UpdateRoomConfigRequestBuilder(sdkConfiguration);
    }

    /**
     * UpdateRoomConfig
     * 
     * @param updateRoomConfigParams 
     * @param roomId 
     * @return CompletableFuture&lt;UpdateRoomConfigResponse&gt; - The async response
     */
    public CompletableFuture<UpdateRoomConfigResponse> updateRoomConfig(UpdateRoomConfigParams updateRoomConfigParams, String roomId) {
        return updateRoomConfig(updateRoomConfigParams, Optional.empty(), roomId);
    }

    /**
     * UpdateRoomConfig
     * 
     * @param updateRoomConfigParams 
     * @param appId 
     * @param roomId 
     * @return CompletableFuture&lt;UpdateRoomConfigResponse&gt; - The async response
     */
    public CompletableFuture<UpdateRoomConfigResponse> updateRoomConfig(
            UpdateRoomConfigParams updateRoomConfigParams, Optional<String> appId,
            String roomId) {
        UpdateRoomConfigRequest request =
            UpdateRoomConfigRequest
                .builder()
                .updateRoomConfigParams(updateRoomConfigParams)
                .appId(appId)
                .roomId(roomId)
                .build();
        AsyncRequestOperation<UpdateRoomConfigRequest, UpdateRoomConfigResponse> operation
              = new UpdateRoomConfig.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
