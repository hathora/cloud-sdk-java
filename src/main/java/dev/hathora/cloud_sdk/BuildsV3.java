/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.RequestOperation;

import dev.hathora.cloud_sdk.models.operations.CreateBuildRegistryRequest;
import dev.hathora.cloud_sdk.models.operations.CreateBuildRegistryRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.CreateBuildRegistryResponse;
import dev.hathora.cloud_sdk.models.operations.CreateBuildRequest;
import dev.hathora.cloud_sdk.models.operations.CreateBuildRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.CreateBuildResponse;
import dev.hathora.cloud_sdk.models.operations.DeleteBuildRequest;
import dev.hathora.cloud_sdk.models.operations.DeleteBuildRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.DeleteBuildResponse;
import dev.hathora.cloud_sdk.models.operations.GetBuildRequest;
import dev.hathora.cloud_sdk.models.operations.GetBuildRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetBuildResponse;
import dev.hathora.cloud_sdk.models.operations.GetBuildsRequest;
import dev.hathora.cloud_sdk.models.operations.GetBuildsRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetBuildsResponse;
import dev.hathora.cloud_sdk.models.operations.RunBuildRegistryRequest;
import dev.hathora.cloud_sdk.models.operations.RunBuildRegistryRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.RunBuildRegistryResponse;
import dev.hathora.cloud_sdk.models.operations.RunBuildRequest;
import dev.hathora.cloud_sdk.models.operations.RunBuildRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.RunBuildResponse;
import dev.hathora.cloud_sdk.models.shared.CreateBuildV3Params;
import dev.hathora.cloud_sdk.models.shared.CreateMultipartBuildParams;
import dev.hathora.cloud_sdk.models.shared.RegistryConfig;
import dev.hathora.cloud_sdk.operations.CreateBuild;
import dev.hathora.cloud_sdk.operations.CreateBuildRegistry;
import dev.hathora.cloud_sdk.operations.DeleteBuild;
import dev.hathora.cloud_sdk.operations.GetBuild;
import dev.hathora.cloud_sdk.operations.GetBuilds;
import dev.hathora.cloud_sdk.operations.RunBuild;
import dev.hathora.cloud_sdk.operations.RunBuildRegistry;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

/**
 * Operations that allow you create and manage your [builds](https://hathora.dev/docs/concepts/hathora-entities#build).
 */
public class BuildsV3 {
    private final SDKConfiguration sdkConfiguration;

    BuildsV3(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * CreateBuild
     * 
     * <p>Creates a new [build](https://hathora.dev/docs/concepts/hathora-entities#build) with optional `multipartUploadUrls` that can be used to upload larger builds in parts before calling `runBuild`. Responds with a `buildId` that you must pass to [`RunBuild()`](https://hathora.dev/api#tag/BuildV1/operation/RunBuild) to build the game server artifact. You can optionally pass in a `buildTag` to associate an external version with a build.
     * 
     * @return The call builder
     */
    public CreateBuildRequestBuilder createBuild() {
        return new CreateBuildRequestBuilder(sdkConfiguration);
    }

    /**
     * CreateBuild
     * 
     * <p>Creates a new [build](https://hathora.dev/docs/concepts/hathora-entities#build) with optional `multipartUploadUrls` that can be used to upload larger builds in parts before calling `runBuild`. Responds with a `buildId` that you must pass to [`RunBuild()`](https://hathora.dev/api#tag/BuildV1/operation/RunBuild) to build the game server artifact. You can optionally pass in a `buildTag` to associate an external version with a build.
     * 
     * @param createMultipartBuildParams 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateBuildResponse createBuild(CreateMultipartBuildParams createMultipartBuildParams) throws Exception {
        return createBuild(createMultipartBuildParams, Optional.empty());
    }

    /**
     * CreateBuild
     * 
     * <p>Creates a new [build](https://hathora.dev/docs/concepts/hathora-entities#build) with optional `multipartUploadUrls` that can be used to upload larger builds in parts before calling `runBuild`. Responds with a `buildId` that you must pass to [`RunBuild()`](https://hathora.dev/api#tag/BuildV1/operation/RunBuild) to build the game server artifact. You can optionally pass in a `buildTag` to associate an external version with a build.
     * 
     * @param createMultipartBuildParams 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateBuildResponse createBuild(CreateMultipartBuildParams createMultipartBuildParams, Optional<String> orgId) throws Exception {
        CreateBuildRequest request =
            CreateBuildRequest
                .builder()
                .createMultipartBuildParams(createMultipartBuildParams)
                .orgId(orgId)
                .build();
        RequestOperation<CreateBuildRequest, CreateBuildResponse> operation
              = new CreateBuild.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * CreateBuildRegistry
     * 
     * <p>Creates a new [build](https://hathora.dev/docs/concepts/hathora-entities#build) to be used with `runBuildRegistry`. Responds with a `buildId` that you must pass to [`RunBuildRegistry()`](https://hathora.dev/api#tag/BuildV3/operation/RunBuildRegistry) to build the game server artifact. You can optionally pass in a `buildTag` to associate an external version with a build.
     * 
     * @return The call builder
     */
    public CreateBuildRegistryRequestBuilder createBuildRegistry() {
        return new CreateBuildRegistryRequestBuilder(sdkConfiguration);
    }

    /**
     * CreateBuildRegistry
     * 
     * <p>Creates a new [build](https://hathora.dev/docs/concepts/hathora-entities#build) to be used with `runBuildRegistry`. Responds with a `buildId` that you must pass to [`RunBuildRegistry()`](https://hathora.dev/api#tag/BuildV3/operation/RunBuildRegistry) to build the game server artifact. You can optionally pass in a `buildTag` to associate an external version with a build.
     * 
     * @param createBuildV3Params 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateBuildRegistryResponse createBuildRegistry(CreateBuildV3Params createBuildV3Params) throws Exception {
        return createBuildRegistry(createBuildV3Params, Optional.empty());
    }

    /**
     * CreateBuildRegistry
     * 
     * <p>Creates a new [build](https://hathora.dev/docs/concepts/hathora-entities#build) to be used with `runBuildRegistry`. Responds with a `buildId` that you must pass to [`RunBuildRegistry()`](https://hathora.dev/api#tag/BuildV3/operation/RunBuildRegistry) to build the game server artifact. You can optionally pass in a `buildTag` to associate an external version with a build.
     * 
     * @param createBuildV3Params 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateBuildRegistryResponse createBuildRegistry(CreateBuildV3Params createBuildV3Params, Optional<String> orgId) throws Exception {
        CreateBuildRegistryRequest request =
            CreateBuildRegistryRequest
                .builder()
                .createBuildV3Params(createBuildV3Params)
                .orgId(orgId)
                .build();
        RequestOperation<CreateBuildRegistryRequest, CreateBuildRegistryResponse> operation
              = new CreateBuildRegistry.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * DeleteBuild
     * 
     * <p>Delete a [build](https://hathora.dev/docs/concepts/hathora-entities#build). All associated metadata is deleted.
     * Be careful which builds you delete. This endpoint does not prevent you from deleting actively used builds.
     * Deleting a build that is actively build used by an app's deployment will cause failures when creating rooms.
     * 
     * @return The call builder
     */
    public DeleteBuildRequestBuilder deleteBuild() {
        return new DeleteBuildRequestBuilder(sdkConfiguration);
    }

    /**
     * DeleteBuild
     * 
     * <p>Delete a [build](https://hathora.dev/docs/concepts/hathora-entities#build). All associated metadata is deleted.
     * Be careful which builds you delete. This endpoint does not prevent you from deleting actively used builds.
     * Deleting a build that is actively build used by an app's deployment will cause failures when creating rooms.
     * 
     * @param buildId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteBuildResponse deleteBuild(String buildId) throws Exception {
        return deleteBuild(buildId, Optional.empty());
    }

    /**
     * DeleteBuild
     * 
     * <p>Delete a [build](https://hathora.dev/docs/concepts/hathora-entities#build). All associated metadata is deleted.
     * Be careful which builds you delete. This endpoint does not prevent you from deleting actively used builds.
     * Deleting a build that is actively build used by an app's deployment will cause failures when creating rooms.
     * 
     * @param buildId 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteBuildResponse deleteBuild(String buildId, Optional<String> orgId) throws Exception {
        DeleteBuildRequest request =
            DeleteBuildRequest
                .builder()
                .buildId(buildId)
                .orgId(orgId)
                .build();
        RequestOperation<DeleteBuildRequest, DeleteBuildResponse> operation
              = new DeleteBuild.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetBuild
     * 
     * <p>Get details for a [build](https://hathora.dev/docs/concepts/hathora-entities#build).
     * 
     * @return The call builder
     */
    public GetBuildRequestBuilder getBuild() {
        return new GetBuildRequestBuilder(sdkConfiguration);
    }

    /**
     * GetBuild
     * 
     * <p>Get details for a [build](https://hathora.dev/docs/concepts/hathora-entities#build).
     * 
     * @param buildId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBuildResponse getBuild(String buildId) throws Exception {
        return getBuild(buildId, Optional.empty());
    }

    /**
     * GetBuild
     * 
     * <p>Get details for a [build](https://hathora.dev/docs/concepts/hathora-entities#build).
     * 
     * @param buildId 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBuildResponse getBuild(String buildId, Optional<String> orgId) throws Exception {
        GetBuildRequest request =
            GetBuildRequest
                .builder()
                .buildId(buildId)
                .orgId(orgId)
                .build();
        RequestOperation<GetBuildRequest, GetBuildResponse> operation
              = new GetBuild.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetBuilds
     * 
     * <p>Returns an array of [builds](https://hathora.dev/docs/concepts/hathora-entities#build) for an [application](https://hathora.dev/docs/concepts/hathora-entities#application).
     * 
     * @return The call builder
     */
    public GetBuildsRequestBuilder getBuilds() {
        return new GetBuildsRequestBuilder(sdkConfiguration);
    }

    /**
     * GetBuilds
     * 
     * <p>Returns an array of [builds](https://hathora.dev/docs/concepts/hathora-entities#build) for an [application](https://hathora.dev/docs/concepts/hathora-entities#application).
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBuildsResponse getBuildsDirect() throws Exception {
        return getBuilds(Optional.empty());
    }

    /**
     * GetBuilds
     * 
     * <p>Returns an array of [builds](https://hathora.dev/docs/concepts/hathora-entities#build) for an [application](https://hathora.dev/docs/concepts/hathora-entities#application).
     * 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBuildsResponse getBuilds(Optional<String> orgId) throws Exception {
        GetBuildsRequest request =
            GetBuildsRequest
                .builder()
                .orgId(orgId)
                .build();
        RequestOperation<GetBuildsRequest, GetBuildsResponse> operation
              = new GetBuilds.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * RunBuild
     * 
     * <p>Builds a game server artifact from a tarball you provide. Pass in the `buildId` generated from [`CreateBuild()`](https://hathora.dev/api#tag/BuildV1/operation/CreateBuild).
     * 
     * @return The call builder
     */
    public RunBuildRequestBuilder runBuild() {
        return new RunBuildRequestBuilder(sdkConfiguration);
    }

    /**
     * RunBuild
     * 
     * <p>Builds a game server artifact from a tarball you provide. Pass in the `buildId` generated from [`CreateBuild()`](https://hathora.dev/api#tag/BuildV1/operation/CreateBuild).
     * 
     * @param buildId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RunBuildResponse runBuild(String buildId) throws Exception {
        return runBuild(buildId, Optional.empty());
    }

    /**
     * RunBuild
     * 
     * <p>Builds a game server artifact from a tarball you provide. Pass in the `buildId` generated from [`CreateBuild()`](https://hathora.dev/api#tag/BuildV1/operation/CreateBuild).
     * 
     * @param buildId 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RunBuildResponse runBuild(String buildId, Optional<String> orgId) throws Exception {
        RunBuildRequest request =
            RunBuildRequest
                .builder()
                .buildId(buildId)
                .orgId(orgId)
                .build();
        RequestOperation<RunBuildRequest, RunBuildResponse> operation
              = new RunBuild.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * RunBuildRegistry
     * 
     * <p>Builds a game server artifact from a public or private registry. Pass in the `buildId` generated from [`CreateBuild()`](https://hathora.dev/api#tag/BuildV1/operation/CreateBuild).
     * 
     * @return The call builder
     */
    public RunBuildRegistryRequestBuilder runBuildRegistry() {
        return new RunBuildRegistryRequestBuilder(sdkConfiguration);
    }

    /**
     * RunBuildRegistry
     * 
     * <p>Builds a game server artifact from a public or private registry. Pass in the `buildId` generated from [`CreateBuild()`](https://hathora.dev/api#tag/BuildV1/operation/CreateBuild).
     * 
     * @param registryConfig 
     * @param buildId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RunBuildRegistryResponse runBuildRegistry(RegistryConfig registryConfig, String buildId) throws Exception {
        return runBuildRegistry(registryConfig, buildId, Optional.empty());
    }

    /**
     * RunBuildRegistry
     * 
     * <p>Builds a game server artifact from a public or private registry. Pass in the `buildId` generated from [`CreateBuild()`](https://hathora.dev/api#tag/BuildV1/operation/CreateBuild).
     * 
     * @param registryConfig 
     * @param buildId 
     * @param orgId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RunBuildRegistryResponse runBuildRegistry(
            RegistryConfig registryConfig, String buildId,
            Optional<String> orgId) throws Exception {
        RunBuildRegistryRequest request =
            RunBuildRegistryRequest
                .builder()
                .registryConfig(registryConfig)
                .buildId(buildId)
                .orgId(orgId)
                .build();
        RequestOperation<RunBuildRegistryRequest, RunBuildRegistryResponse> operation
              = new RunBuildRegistry.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
