/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;

import dev.hathora.cloud_sdk.models.operations.LoginAnonymousRequest;
import dev.hathora.cloud_sdk.models.operations.LoginGoogleRequest;
import dev.hathora.cloud_sdk.models.operations.LoginNicknameRequest;
import dev.hathora.cloud_sdk.models.operations.async.LoginAnonymousRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.LoginAnonymousResponse;
import dev.hathora.cloud_sdk.models.operations.async.LoginGoogleRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.LoginGoogleResponse;
import dev.hathora.cloud_sdk.models.operations.async.LoginNicknameRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.async.LoginNicknameResponse;
import dev.hathora.cloud_sdk.models.shared.GoogleIdTokenObject;
import dev.hathora.cloud_sdk.models.shared.NicknameObject;
import dev.hathora.cloud_sdk.operations.LoginAnonymous;
import dev.hathora.cloud_sdk.operations.LoginGoogle;
import dev.hathora.cloud_sdk.operations.LoginNickname;
import dev.hathora.cloud_sdk.utils.Headers;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

/**
 * Operations that allow you to generate a Hathora-signed [JSON web token (JWT)](https://jwt.io/) for [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service).
 */
public class AsyncAuthV1 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AuthV1 syncSDK;

    AsyncAuthV1(AuthV1 syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public AuthV1 sync() {
        return syncSDK;
    }


    /**
     * LoginAnonymous
     * 
     * <p>Returns a unique player token for an anonymous user.
     * 
     * @return The async call builder
     */
    public LoginAnonymousRequestBuilder loginAnonymous() {
        return new LoginAnonymousRequestBuilder(sdkConfiguration);
    }

    /**
     * LoginAnonymous
     * 
     * <p>Returns a unique player token for an anonymous user.
     * 
     * @return CompletableFuture&lt;LoginAnonymousResponse&gt; - The async response
     */
    public CompletableFuture<LoginAnonymousResponse> loginAnonymousDirect() {
        return loginAnonymous(Optional.empty());
    }

    /**
     * LoginAnonymous
     * 
     * <p>Returns a unique player token for an anonymous user.
     * 
     * @param appId 
     * @return CompletableFuture&lt;LoginAnonymousResponse&gt; - The async response
     */
    public CompletableFuture<LoginAnonymousResponse> loginAnonymous(Optional<String> appId) {
        LoginAnonymousRequest request =
            LoginAnonymousRequest
                .builder()
                .appId(appId)
                .build();
        AsyncRequestOperation<LoginAnonymousRequest, LoginAnonymousResponse> operation
              = new LoginAnonymous.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * LoginGoogle
     * 
     * <p>Returns a unique player token using a Google-signed OIDC `idToken`.
     * 
     * @return The async call builder
     */
    public LoginGoogleRequestBuilder loginGoogle() {
        return new LoginGoogleRequestBuilder(sdkConfiguration);
    }

    /**
     * LoginGoogle
     * 
     * <p>Returns a unique player token using a Google-signed OIDC `idToken`.
     * 
     * @param googleIdTokenObject 
     * @return CompletableFuture&lt;LoginGoogleResponse&gt; - The async response
     */
    public CompletableFuture<LoginGoogleResponse> loginGoogle(GoogleIdTokenObject googleIdTokenObject) {
        return loginGoogle(googleIdTokenObject, Optional.empty());
    }

    /**
     * LoginGoogle
     * 
     * <p>Returns a unique player token using a Google-signed OIDC `idToken`.
     * 
     * @param googleIdTokenObject 
     * @param appId 
     * @return CompletableFuture&lt;LoginGoogleResponse&gt; - The async response
     */
    public CompletableFuture<LoginGoogleResponse> loginGoogle(GoogleIdTokenObject googleIdTokenObject, Optional<String> appId) {
        LoginGoogleRequest request =
            LoginGoogleRequest
                .builder()
                .googleIdTokenObject(googleIdTokenObject)
                .appId(appId)
                .build();
        AsyncRequestOperation<LoginGoogleRequest, LoginGoogleResponse> operation
              = new LoginGoogle.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * LoginNickname
     * 
     * <p>Returns a unique player token with a specified nickname for a user.
     * 
     * @return The async call builder
     */
    public LoginNicknameRequestBuilder loginNickname() {
        return new LoginNicknameRequestBuilder(sdkConfiguration);
    }

    /**
     * LoginNickname
     * 
     * <p>Returns a unique player token with a specified nickname for a user.
     * 
     * @param nicknameObject 
     * @return CompletableFuture&lt;LoginNicknameResponse&gt; - The async response
     */
    public CompletableFuture<LoginNicknameResponse> loginNickname(NicknameObject nicknameObject) {
        return loginNickname(nicknameObject, Optional.empty());
    }

    /**
     * LoginNickname
     * 
     * <p>Returns a unique player token with a specified nickname for a user.
     * 
     * @param nicknameObject 
     * @param appId 
     * @return CompletableFuture&lt;LoginNicknameResponse&gt; - The async response
     */
    public CompletableFuture<LoginNicknameResponse> loginNickname(NicknameObject nicknameObject, Optional<String> appId) {
        LoginNicknameRequest request =
            LoginNicknameRequest
                .builder()
                .nicknameObject(nicknameObject)
                .appId(appId)
                .build();
        AsyncRequestOperation<LoginNicknameRequest, LoginNicknameResponse> operation
              = new LoginNickname.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
