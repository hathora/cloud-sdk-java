/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;


public class AutoscalerConfig {
    /**
     * If vCPU utilization rate is above this threshold percentage, the autoscaler will scale up.
     * If set to 100 this disables preemptive autoscaling (i.e. nodes will only scale up when you
     * run out of capacity and request more resources).
     */
    @JsonProperty("scaleUpThreshold")
    private int scaleUpThreshold;

    @JsonCreator
    public AutoscalerConfig(
            @JsonProperty("scaleUpThreshold") int scaleUpThreshold) {
        Utils.checkNotNull(scaleUpThreshold, "scaleUpThreshold");
        this.scaleUpThreshold = scaleUpThreshold;
    }

    /**
     * If vCPU utilization rate is above this threshold percentage, the autoscaler will scale up.
     * If set to 100 this disables preemptive autoscaling (i.e. nodes will only scale up when you
     * run out of capacity and request more resources).
     */
    @JsonIgnore
    public int scaleUpThreshold() {
        return scaleUpThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * If vCPU utilization rate is above this threshold percentage, the autoscaler will scale up.
     * If set to 100 this disables preemptive autoscaling (i.e. nodes will only scale up when you
     * run out of capacity and request more resources).
     */
    public AutoscalerConfig withScaleUpThreshold(int scaleUpThreshold) {
        Utils.checkNotNull(scaleUpThreshold, "scaleUpThreshold");
        this.scaleUpThreshold = scaleUpThreshold;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AutoscalerConfig other = (AutoscalerConfig) o;
        return 
            Utils.enhancedDeepEquals(this.scaleUpThreshold, other.scaleUpThreshold);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            scaleUpThreshold);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AutoscalerConfig.class,
                "scaleUpThreshold", scaleUpThreshold);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Integer scaleUpThreshold;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * If vCPU utilization rate is above this threshold percentage, the autoscaler will scale up.
         * If set to 100 this disables preemptive autoscaling (i.e. nodes will only scale up when you
         * run out of capacity and request more resources).
         */
        public Builder scaleUpThreshold(int scaleUpThreshold) {
            Utils.checkNotNull(scaleUpThreshold, "scaleUpThreshold");
            this.scaleUpThreshold = scaleUpThreshold;
            return this;
        }

        public AutoscalerConfig build() {

            return new AutoscalerConfig(
                scaleUpThreshold);
        }

    }
}
