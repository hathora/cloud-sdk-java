/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class CreateAppConfig {
    /**
     * Readable name for an application. Must be unique within an organization.
     */
    @JsonProperty("appName")
    private String appName;

    /**
     * Configure [player authentication](https://hathora.dev/docs/backend-integrations/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
     */
    @JsonProperty("authConfiguration")
    private AuthConfiguration authConfiguration;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loadBalancer")
    private Optional<? extends LoadBalancerConfig> loadBalancer;

    @JsonCreator
    public CreateAppConfig(
            @JsonProperty("appName") String appName,
            @JsonProperty("authConfiguration") AuthConfiguration authConfiguration,
            @JsonProperty("loadBalancer") Optional<? extends LoadBalancerConfig> loadBalancer) {
        Utils.checkNotNull(appName, "appName");
        Utils.checkNotNull(authConfiguration, "authConfiguration");
        Utils.checkNotNull(loadBalancer, "loadBalancer");
        this.appName = appName;
        this.authConfiguration = authConfiguration;
        this.loadBalancer = loadBalancer;
    }
    
    public CreateAppConfig(
            String appName,
            AuthConfiguration authConfiguration) {
        this(appName, authConfiguration, Optional.empty());
    }

    /**
     * Readable name for an application. Must be unique within an organization.
     */
    @JsonIgnore
    public String appName() {
        return appName;
    }

    /**
     * Configure [player authentication](https://hathora.dev/docs/backend-integrations/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
     */
    @JsonIgnore
    public AuthConfiguration authConfiguration() {
        return authConfiguration;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LoadBalancerConfig> loadBalancer() {
        return (Optional<LoadBalancerConfig>) loadBalancer;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Readable name for an application. Must be unique within an organization.
     */
    public CreateAppConfig withAppName(String appName) {
        Utils.checkNotNull(appName, "appName");
        this.appName = appName;
        return this;
    }

    /**
     * Configure [player authentication](https://hathora.dev/docs/backend-integrations/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
     */
    public CreateAppConfig withAuthConfiguration(AuthConfiguration authConfiguration) {
        Utils.checkNotNull(authConfiguration, "authConfiguration");
        this.authConfiguration = authConfiguration;
        return this;
    }

    public CreateAppConfig withLoadBalancer(LoadBalancerConfig loadBalancer) {
        Utils.checkNotNull(loadBalancer, "loadBalancer");
        this.loadBalancer = Optional.ofNullable(loadBalancer);
        return this;
    }


    public CreateAppConfig withLoadBalancer(Optional<? extends LoadBalancerConfig> loadBalancer) {
        Utils.checkNotNull(loadBalancer, "loadBalancer");
        this.loadBalancer = loadBalancer;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateAppConfig other = (CreateAppConfig) o;
        return 
            Utils.enhancedDeepEquals(this.appName, other.appName) &&
            Utils.enhancedDeepEquals(this.authConfiguration, other.authConfiguration) &&
            Utils.enhancedDeepEquals(this.loadBalancer, other.loadBalancer);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            appName, authConfiguration, loadBalancer);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateAppConfig.class,
                "appName", appName,
                "authConfiguration", authConfiguration,
                "loadBalancer", loadBalancer);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String appName;

        private AuthConfiguration authConfiguration;

        private Optional<? extends LoadBalancerConfig> loadBalancer = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Readable name for an application. Must be unique within an organization.
         */
        public Builder appName(String appName) {
            Utils.checkNotNull(appName, "appName");
            this.appName = appName;
            return this;
        }


        /**
         * Configure [player authentication](https://hathora.dev/docs/backend-integrations/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
         */
        public Builder authConfiguration(AuthConfiguration authConfiguration) {
            Utils.checkNotNull(authConfiguration, "authConfiguration");
            this.authConfiguration = authConfiguration;
            return this;
        }


        public Builder loadBalancer(LoadBalancerConfig loadBalancer) {
            Utils.checkNotNull(loadBalancer, "loadBalancer");
            this.loadBalancer = Optional.ofNullable(loadBalancer);
            return this;
        }

        public Builder loadBalancer(Optional<? extends LoadBalancerConfig> loadBalancer) {
            Utils.checkNotNull(loadBalancer, "loadBalancer");
            this.loadBalancer = loadBalancer;
            return this;
        }

        public CreateAppConfig build() {

            return new CreateAppConfig(
                appName, authConfiguration, loadBalancer);
        }

    }
}
