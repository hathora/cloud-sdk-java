/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class DeploymentConfigV3 {
    /**
     * Additional ports your server listens on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalContainerPorts")
    private Optional<? extends List<ContainerPort>> additionalContainerPorts;

    /**
     * System generated id for a build. Can also be user defined when creating a build.
     */
    @JsonProperty("buildId")
    private String buildId;

    /**
     * Default port the server listens on.
     */
    @JsonProperty("containerPort")
    private int containerPort;

    /**
     * Arbitrary metadata associated with a deployment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deploymentTag")
    private Optional<String> deploymentTag;

    /**
     * The environment variable that our process will have access to at runtime.
     */
    @JsonProperty("env")
    private List<DeploymentConfigV3Env> env;

    /**
     * EXPERIMENTAL - this feature is in closed beta.
     * The number of GPUs allocated to your process. Must be an integer.
     * If not provided, the requested GPU is 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("experimentalRequestedGPU")
    private Optional<Double> experimentalRequestedGPU;

    /**
     * The id of the fleet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fleetId")
    private Optional<String> fleetId;

    /**
     * Option to shut down processes that have had no new connections or rooms
     * for five minutes.
     */
    @JsonProperty("idleTimeoutEnabled")
    private boolean idleTimeoutEnabled;

    /**
     * The number of cores allocated to your process.
     */
    @JsonProperty("requestedCPU")
    private double requestedCPU;

    /**
     * The number of GPUs allocated to your process. Must be an integer.
     * If not provided, the requested GPU is 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedGPU")
    private Optional<Double> requestedGPU;

    /**
     * The amount of memory allocated to your process.
     */
    @JsonProperty("requestedMemoryMB")
    private double requestedMemoryMB;

    /**
     * Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
     */
    @JsonProperty("roomsPerProcess")
    private int roomsPerProcess;

    /**
     * Transport type specifies the underlying communication protocol to the exposed port.
     */
    @JsonProperty("transportType")
    private TransportType transportType;

    @JsonCreator
    public DeploymentConfigV3(
            @JsonProperty("additionalContainerPorts") Optional<? extends List<ContainerPort>> additionalContainerPorts,
            @JsonProperty("buildId") String buildId,
            @JsonProperty("containerPort") int containerPort,
            @JsonProperty("deploymentTag") Optional<String> deploymentTag,
            @JsonProperty("env") List<DeploymentConfigV3Env> env,
            @JsonProperty("experimentalRequestedGPU") Optional<Double> experimentalRequestedGPU,
            @JsonProperty("fleetId") Optional<String> fleetId,
            @JsonProperty("idleTimeoutEnabled") boolean idleTimeoutEnabled,
            @JsonProperty("requestedCPU") double requestedCPU,
            @JsonProperty("requestedGPU") Optional<Double> requestedGPU,
            @JsonProperty("requestedMemoryMB") double requestedMemoryMB,
            @JsonProperty("roomsPerProcess") int roomsPerProcess,
            @JsonProperty("transportType") TransportType transportType) {
        Utils.checkNotNull(additionalContainerPorts, "additionalContainerPorts");
        Utils.checkNotNull(buildId, "buildId");
        Utils.checkNotNull(containerPort, "containerPort");
        Utils.checkNotNull(deploymentTag, "deploymentTag");
        Utils.checkNotNull(env, "env");
        Utils.checkNotNull(experimentalRequestedGPU, "experimentalRequestedGPU");
        Utils.checkNotNull(fleetId, "fleetId");
        Utils.checkNotNull(idleTimeoutEnabled, "idleTimeoutEnabled");
        Utils.checkNotNull(requestedCPU, "requestedCPU");
        Utils.checkNotNull(requestedGPU, "requestedGPU");
        Utils.checkNotNull(requestedMemoryMB, "requestedMemoryMB");
        Utils.checkNotNull(roomsPerProcess, "roomsPerProcess");
        Utils.checkNotNull(transportType, "transportType");
        this.additionalContainerPorts = additionalContainerPorts;
        this.buildId = buildId;
        this.containerPort = containerPort;
        this.deploymentTag = deploymentTag;
        this.env = env;
        this.experimentalRequestedGPU = experimentalRequestedGPU;
        this.fleetId = fleetId;
        this.idleTimeoutEnabled = idleTimeoutEnabled;
        this.requestedCPU = requestedCPU;
        this.requestedGPU = requestedGPU;
        this.requestedMemoryMB = requestedMemoryMB;
        this.roomsPerProcess = roomsPerProcess;
        this.transportType = transportType;
    }
    
    public DeploymentConfigV3(
            String buildId,
            int containerPort,
            List<DeploymentConfigV3Env> env,
            boolean idleTimeoutEnabled,
            double requestedCPU,
            double requestedMemoryMB,
            int roomsPerProcess,
            TransportType transportType) {
        this(Optional.empty(), buildId, containerPort,
            Optional.empty(), env, Optional.empty(),
            Optional.empty(), idleTimeoutEnabled, requestedCPU,
            Optional.empty(), requestedMemoryMB, roomsPerProcess,
            transportType);
    }

    /**
     * Additional ports your server listens on.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ContainerPort>> additionalContainerPorts() {
        return (Optional<List<ContainerPort>>) additionalContainerPorts;
    }

    /**
     * System generated id for a build. Can also be user defined when creating a build.
     */
    @JsonIgnore
    public String buildId() {
        return buildId;
    }

    /**
     * Default port the server listens on.
     */
    @JsonIgnore
    public int containerPort() {
        return containerPort;
    }

    /**
     * Arbitrary metadata associated with a deployment.
     */
    @JsonIgnore
    public Optional<String> deploymentTag() {
        return deploymentTag;
    }

    /**
     * The environment variable that our process will have access to at runtime.
     */
    @JsonIgnore
    public List<DeploymentConfigV3Env> env() {
        return env;
    }

    /**
     * EXPERIMENTAL - this feature is in closed beta.
     * The number of GPUs allocated to your process. Must be an integer.
     * If not provided, the requested GPU is 0.
     */
    @JsonIgnore
    public Optional<Double> experimentalRequestedGPU() {
        return experimentalRequestedGPU;
    }

    /**
     * The id of the fleet.
     */
    @JsonIgnore
    public Optional<String> fleetId() {
        return fleetId;
    }

    /**
     * Option to shut down processes that have had no new connections or rooms
     * for five minutes.
     */
    @JsonIgnore
    public boolean idleTimeoutEnabled() {
        return idleTimeoutEnabled;
    }

    /**
     * The number of cores allocated to your process.
     */
    @JsonIgnore
    public double requestedCPU() {
        return requestedCPU;
    }

    /**
     * The number of GPUs allocated to your process. Must be an integer.
     * If not provided, the requested GPU is 0.
     */
    @JsonIgnore
    public Optional<Double> requestedGPU() {
        return requestedGPU;
    }

    /**
     * The amount of memory allocated to your process.
     */
    @JsonIgnore
    public double requestedMemoryMB() {
        return requestedMemoryMB;
    }

    /**
     * Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
     */
    @JsonIgnore
    public int roomsPerProcess() {
        return roomsPerProcess;
    }

    /**
     * Transport type specifies the underlying communication protocol to the exposed port.
     */
    @JsonIgnore
    public TransportType transportType() {
        return transportType;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Additional ports your server listens on.
     */
    public DeploymentConfigV3 withAdditionalContainerPorts(List<ContainerPort> additionalContainerPorts) {
        Utils.checkNotNull(additionalContainerPorts, "additionalContainerPorts");
        this.additionalContainerPorts = Optional.ofNullable(additionalContainerPorts);
        return this;
    }


    /**
     * Additional ports your server listens on.
     */
    public DeploymentConfigV3 withAdditionalContainerPorts(Optional<? extends List<ContainerPort>> additionalContainerPorts) {
        Utils.checkNotNull(additionalContainerPorts, "additionalContainerPorts");
        this.additionalContainerPorts = additionalContainerPorts;
        return this;
    }

    /**
     * System generated id for a build. Can also be user defined when creating a build.
     */
    public DeploymentConfigV3 withBuildId(String buildId) {
        Utils.checkNotNull(buildId, "buildId");
        this.buildId = buildId;
        return this;
    }

    /**
     * Default port the server listens on.
     */
    public DeploymentConfigV3 withContainerPort(int containerPort) {
        Utils.checkNotNull(containerPort, "containerPort");
        this.containerPort = containerPort;
        return this;
    }

    /**
     * Arbitrary metadata associated with a deployment.
     */
    public DeploymentConfigV3 withDeploymentTag(String deploymentTag) {
        Utils.checkNotNull(deploymentTag, "deploymentTag");
        this.deploymentTag = Optional.ofNullable(deploymentTag);
        return this;
    }


    /**
     * Arbitrary metadata associated with a deployment.
     */
    public DeploymentConfigV3 withDeploymentTag(Optional<String> deploymentTag) {
        Utils.checkNotNull(deploymentTag, "deploymentTag");
        this.deploymentTag = deploymentTag;
        return this;
    }

    /**
     * The environment variable that our process will have access to at runtime.
     */
    public DeploymentConfigV3 withEnv(List<DeploymentConfigV3Env> env) {
        Utils.checkNotNull(env, "env");
        this.env = env;
        return this;
    }

    /**
     * EXPERIMENTAL - this feature is in closed beta.
     * The number of GPUs allocated to your process. Must be an integer.
     * If not provided, the requested GPU is 0.
     */
    public DeploymentConfigV3 withExperimentalRequestedGPU(double experimentalRequestedGPU) {
        Utils.checkNotNull(experimentalRequestedGPU, "experimentalRequestedGPU");
        this.experimentalRequestedGPU = Optional.ofNullable(experimentalRequestedGPU);
        return this;
    }


    /**
     * EXPERIMENTAL - this feature is in closed beta.
     * The number of GPUs allocated to your process. Must be an integer.
     * If not provided, the requested GPU is 0.
     */
    public DeploymentConfigV3 withExperimentalRequestedGPU(Optional<Double> experimentalRequestedGPU) {
        Utils.checkNotNull(experimentalRequestedGPU, "experimentalRequestedGPU");
        this.experimentalRequestedGPU = experimentalRequestedGPU;
        return this;
    }

    /**
     * The id of the fleet.
     */
    public DeploymentConfigV3 withFleetId(String fleetId) {
        Utils.checkNotNull(fleetId, "fleetId");
        this.fleetId = Optional.ofNullable(fleetId);
        return this;
    }


    /**
     * The id of the fleet.
     */
    public DeploymentConfigV3 withFleetId(Optional<String> fleetId) {
        Utils.checkNotNull(fleetId, "fleetId");
        this.fleetId = fleetId;
        return this;
    }

    /**
     * Option to shut down processes that have had no new connections or rooms
     * for five minutes.
     */
    public DeploymentConfigV3 withIdleTimeoutEnabled(boolean idleTimeoutEnabled) {
        Utils.checkNotNull(idleTimeoutEnabled, "idleTimeoutEnabled");
        this.idleTimeoutEnabled = idleTimeoutEnabled;
        return this;
    }

    /**
     * The number of cores allocated to your process.
     */
    public DeploymentConfigV3 withRequestedCPU(double requestedCPU) {
        Utils.checkNotNull(requestedCPU, "requestedCPU");
        this.requestedCPU = requestedCPU;
        return this;
    }

    /**
     * The number of GPUs allocated to your process. Must be an integer.
     * If not provided, the requested GPU is 0.
     */
    public DeploymentConfigV3 withRequestedGPU(double requestedGPU) {
        Utils.checkNotNull(requestedGPU, "requestedGPU");
        this.requestedGPU = Optional.ofNullable(requestedGPU);
        return this;
    }


    /**
     * The number of GPUs allocated to your process. Must be an integer.
     * If not provided, the requested GPU is 0.
     */
    public DeploymentConfigV3 withRequestedGPU(Optional<Double> requestedGPU) {
        Utils.checkNotNull(requestedGPU, "requestedGPU");
        this.requestedGPU = requestedGPU;
        return this;
    }

    /**
     * The amount of memory allocated to your process.
     */
    public DeploymentConfigV3 withRequestedMemoryMB(double requestedMemoryMB) {
        Utils.checkNotNull(requestedMemoryMB, "requestedMemoryMB");
        this.requestedMemoryMB = requestedMemoryMB;
        return this;
    }

    /**
     * Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
     */
    public DeploymentConfigV3 withRoomsPerProcess(int roomsPerProcess) {
        Utils.checkNotNull(roomsPerProcess, "roomsPerProcess");
        this.roomsPerProcess = roomsPerProcess;
        return this;
    }

    /**
     * Transport type specifies the underlying communication protocol to the exposed port.
     */
    public DeploymentConfigV3 withTransportType(TransportType transportType) {
        Utils.checkNotNull(transportType, "transportType");
        this.transportType = transportType;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeploymentConfigV3 other = (DeploymentConfigV3) o;
        return 
            Utils.enhancedDeepEquals(this.additionalContainerPorts, other.additionalContainerPorts) &&
            Utils.enhancedDeepEquals(this.buildId, other.buildId) &&
            Utils.enhancedDeepEquals(this.containerPort, other.containerPort) &&
            Utils.enhancedDeepEquals(this.deploymentTag, other.deploymentTag) &&
            Utils.enhancedDeepEquals(this.env, other.env) &&
            Utils.enhancedDeepEquals(this.experimentalRequestedGPU, other.experimentalRequestedGPU) &&
            Utils.enhancedDeepEquals(this.fleetId, other.fleetId) &&
            Utils.enhancedDeepEquals(this.idleTimeoutEnabled, other.idleTimeoutEnabled) &&
            Utils.enhancedDeepEquals(this.requestedCPU, other.requestedCPU) &&
            Utils.enhancedDeepEquals(this.requestedGPU, other.requestedGPU) &&
            Utils.enhancedDeepEquals(this.requestedMemoryMB, other.requestedMemoryMB) &&
            Utils.enhancedDeepEquals(this.roomsPerProcess, other.roomsPerProcess) &&
            Utils.enhancedDeepEquals(this.transportType, other.transportType);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            additionalContainerPorts, buildId, containerPort,
            deploymentTag, env, experimentalRequestedGPU,
            fleetId, idleTimeoutEnabled, requestedCPU,
            requestedGPU, requestedMemoryMB, roomsPerProcess,
            transportType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeploymentConfigV3.class,
                "additionalContainerPorts", additionalContainerPorts,
                "buildId", buildId,
                "containerPort", containerPort,
                "deploymentTag", deploymentTag,
                "env", env,
                "experimentalRequestedGPU", experimentalRequestedGPU,
                "fleetId", fleetId,
                "idleTimeoutEnabled", idleTimeoutEnabled,
                "requestedCPU", requestedCPU,
                "requestedGPU", requestedGPU,
                "requestedMemoryMB", requestedMemoryMB,
                "roomsPerProcess", roomsPerProcess,
                "transportType", transportType);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends List<ContainerPort>> additionalContainerPorts = Optional.empty();

        private String buildId;

        private Integer containerPort;

        private Optional<String> deploymentTag = Optional.empty();

        private List<DeploymentConfigV3Env> env;

        private Optional<Double> experimentalRequestedGPU = Optional.empty();

        private Optional<String> fleetId = Optional.empty();

        private Boolean idleTimeoutEnabled;

        private Double requestedCPU;

        private Optional<Double> requestedGPU = Optional.empty();

        private Double requestedMemoryMB;

        private Integer roomsPerProcess;

        private TransportType transportType;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Additional ports your server listens on.
         */
        public Builder additionalContainerPorts(List<ContainerPort> additionalContainerPorts) {
            Utils.checkNotNull(additionalContainerPorts, "additionalContainerPorts");
            this.additionalContainerPorts = Optional.ofNullable(additionalContainerPorts);
            return this;
        }

        /**
         * Additional ports your server listens on.
         */
        public Builder additionalContainerPorts(Optional<? extends List<ContainerPort>> additionalContainerPorts) {
            Utils.checkNotNull(additionalContainerPorts, "additionalContainerPorts");
            this.additionalContainerPorts = additionalContainerPorts;
            return this;
        }


        /**
         * System generated id for a build. Can also be user defined when creating a build.
         */
        public Builder buildId(String buildId) {
            Utils.checkNotNull(buildId, "buildId");
            this.buildId = buildId;
            return this;
        }


        /**
         * Default port the server listens on.
         */
        public Builder containerPort(int containerPort) {
            Utils.checkNotNull(containerPort, "containerPort");
            this.containerPort = containerPort;
            return this;
        }


        /**
         * Arbitrary metadata associated with a deployment.
         */
        public Builder deploymentTag(String deploymentTag) {
            Utils.checkNotNull(deploymentTag, "deploymentTag");
            this.deploymentTag = Optional.ofNullable(deploymentTag);
            return this;
        }

        /**
         * Arbitrary metadata associated with a deployment.
         */
        public Builder deploymentTag(Optional<String> deploymentTag) {
            Utils.checkNotNull(deploymentTag, "deploymentTag");
            this.deploymentTag = deploymentTag;
            return this;
        }


        /**
         * The environment variable that our process will have access to at runtime.
         */
        public Builder env(List<DeploymentConfigV3Env> env) {
            Utils.checkNotNull(env, "env");
            this.env = env;
            return this;
        }


        /**
         * EXPERIMENTAL - this feature is in closed beta.
         * The number of GPUs allocated to your process. Must be an integer.
         * If not provided, the requested GPU is 0.
         */
        public Builder experimentalRequestedGPU(double experimentalRequestedGPU) {
            Utils.checkNotNull(experimentalRequestedGPU, "experimentalRequestedGPU");
            this.experimentalRequestedGPU = Optional.ofNullable(experimentalRequestedGPU);
            return this;
        }

        /**
         * EXPERIMENTAL - this feature is in closed beta.
         * The number of GPUs allocated to your process. Must be an integer.
         * If not provided, the requested GPU is 0.
         */
        public Builder experimentalRequestedGPU(Optional<Double> experimentalRequestedGPU) {
            Utils.checkNotNull(experimentalRequestedGPU, "experimentalRequestedGPU");
            this.experimentalRequestedGPU = experimentalRequestedGPU;
            return this;
        }


        /**
         * The id of the fleet.
         */
        public Builder fleetId(String fleetId) {
            Utils.checkNotNull(fleetId, "fleetId");
            this.fleetId = Optional.ofNullable(fleetId);
            return this;
        }

        /**
         * The id of the fleet.
         */
        public Builder fleetId(Optional<String> fleetId) {
            Utils.checkNotNull(fleetId, "fleetId");
            this.fleetId = fleetId;
            return this;
        }


        /**
         * Option to shut down processes that have had no new connections or rooms
         * for five minutes.
         */
        public Builder idleTimeoutEnabled(boolean idleTimeoutEnabled) {
            Utils.checkNotNull(idleTimeoutEnabled, "idleTimeoutEnabled");
            this.idleTimeoutEnabled = idleTimeoutEnabled;
            return this;
        }


        /**
         * The number of cores allocated to your process.
         */
        public Builder requestedCPU(double requestedCPU) {
            Utils.checkNotNull(requestedCPU, "requestedCPU");
            this.requestedCPU = requestedCPU;
            return this;
        }


        /**
         * The number of GPUs allocated to your process. Must be an integer.
         * If not provided, the requested GPU is 0.
         */
        public Builder requestedGPU(double requestedGPU) {
            Utils.checkNotNull(requestedGPU, "requestedGPU");
            this.requestedGPU = Optional.ofNullable(requestedGPU);
            return this;
        }

        /**
         * The number of GPUs allocated to your process. Must be an integer.
         * If not provided, the requested GPU is 0.
         */
        public Builder requestedGPU(Optional<Double> requestedGPU) {
            Utils.checkNotNull(requestedGPU, "requestedGPU");
            this.requestedGPU = requestedGPU;
            return this;
        }


        /**
         * The amount of memory allocated to your process.
         */
        public Builder requestedMemoryMB(double requestedMemoryMB) {
            Utils.checkNotNull(requestedMemoryMB, "requestedMemoryMB");
            this.requestedMemoryMB = requestedMemoryMB;
            return this;
        }


        /**
         * Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
         */
        public Builder roomsPerProcess(int roomsPerProcess) {
            Utils.checkNotNull(roomsPerProcess, "roomsPerProcess");
            this.roomsPerProcess = roomsPerProcess;
            return this;
        }


        /**
         * Transport type specifies the underlying communication protocol to the exposed port.
         */
        public Builder transportType(TransportType transportType) {
            Utils.checkNotNull(transportType, "transportType");
            this.transportType = transportType;
            return this;
        }

        public DeploymentConfigV3 build() {

            return new DeploymentConfigV3(
                additionalContainerPorts, buildId, containerPort,
                deploymentTag, env, experimentalRequestedGPU,
                fleetId, idleTimeoutEnabled, requestedCPU,
                requestedGPU, requestedMemoryMB, roomsPerProcess,
                transportType);
        }

    }
}
