/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
@JsonDeserialize(using = NodeShape._Deserializer.class)
@JsonSerialize(using = NodeShape._Serializer.class)
public class NodeShape {

    public static final NodeShape CPU48 = new NodeShape("cpu-4-8");
    public static final NodeShape CPU816 = new NodeShape("cpu-8-16");
    public static final NodeShape CPU1632 = new NodeShape("cpu-16-32");
    public static final NodeShape CPU3264 = new NodeShape("cpu-32-64");
    public static final NodeShape CPU64128 = new NodeShape("cpu-64-128");
    public static final NodeShape CPU416 = new NodeShape("cpu-4-16");
    public static final NodeShape CPU832 = new NodeShape("cpu-8-32");
    public static final NodeShape CPU1664 = new NodeShape("cpu-16-64");
    public static final NodeShape CPU32128 = new NodeShape("cpu-32-128");
    public static final NodeShape GPU_L41416 = new NodeShape("gpu-l4-1-4-16");
    public static final NodeShape GPU_L411248 = new NodeShape("gpu-l4-1-12-48");
    public static final NodeShape GPU_L422496 = new NodeShape("gpu-l4-2-24-96");
    public static final NodeShape GPU_L4448192 = new NodeShape("gpu-l4-4-48-192");
    public static final NodeShape GPU_L4896384 = new NodeShape("gpu-l4-8-96-384");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, NodeShape> values = createValuesMap();
    private static final Map<String, NodeShapeEnum> enums = createEnumsMap();

    private final String value;

    private NodeShape(String value) {
        this.value = value;
    }

    /**
     * Returns a NodeShape with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as NodeShape
     */ 
    public static NodeShape of(String value) {
        synchronized (NodeShape.class) {
            return values.computeIfAbsent(value, v -> new NodeShape(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<NodeShapeEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        NodeShape other = (NodeShape) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "NodeShape [value=" + value + "]";
    }

    // return an array just like an enum
    public static NodeShape[] values() {
        synchronized (NodeShape.class) {
            return values.values().toArray(new NodeShape[] {});
        }
    }

    private static final Map<String, NodeShape> createValuesMap() {
        Map<String, NodeShape> map = new LinkedHashMap<>();
        map.put("cpu-4-8", CPU48);
        map.put("cpu-8-16", CPU816);
        map.put("cpu-16-32", CPU1632);
        map.put("cpu-32-64", CPU3264);
        map.put("cpu-64-128", CPU64128);
        map.put("cpu-4-16", CPU416);
        map.put("cpu-8-32", CPU832);
        map.put("cpu-16-64", CPU1664);
        map.put("cpu-32-128", CPU32128);
        map.put("gpu-l4-1-4-16", GPU_L41416);
        map.put("gpu-l4-1-12-48", GPU_L411248);
        map.put("gpu-l4-2-24-96", GPU_L422496);
        map.put("gpu-l4-4-48-192", GPU_L4448192);
        map.put("gpu-l4-8-96-384", GPU_L4896384);
        return map;
    }

    private static final Map<String, NodeShapeEnum> createEnumsMap() {
        Map<String, NodeShapeEnum> map = new HashMap<>();
        map.put("cpu-4-8", NodeShapeEnum.CPU48);
        map.put("cpu-8-16", NodeShapeEnum.CPU816);
        map.put("cpu-16-32", NodeShapeEnum.CPU1632);
        map.put("cpu-32-64", NodeShapeEnum.CPU3264);
        map.put("cpu-64-128", NodeShapeEnum.CPU64128);
        map.put("cpu-4-16", NodeShapeEnum.CPU416);
        map.put("cpu-8-32", NodeShapeEnum.CPU832);
        map.put("cpu-16-64", NodeShapeEnum.CPU1664);
        map.put("cpu-32-128", NodeShapeEnum.CPU32128);
        map.put("gpu-l4-1-4-16", NodeShapeEnum.GPU_L41416);
        map.put("gpu-l4-1-12-48", NodeShapeEnum.GPU_L411248);
        map.put("gpu-l4-2-24-96", NodeShapeEnum.GPU_L422496);
        map.put("gpu-l4-4-48-192", NodeShapeEnum.GPU_L4448192);
        map.put("gpu-l4-8-96-384", NodeShapeEnum.GPU_L4896384);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<NodeShape> {

        protected _Serializer() {
            super(NodeShape.class);
        }

        @Override
        public void serialize(NodeShape value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<NodeShape> {

        protected _Deserializer() {
            super(NodeShape.class);
        }

        @Override
        public NodeShape deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return NodeShape.of(v);
        }
    }
    
    public enum NodeShapeEnum {

        CPU48("cpu-4-8"),
        CPU816("cpu-8-16"),
        CPU1632("cpu-16-32"),
        CPU3264("cpu-32-64"),
        CPU64128("cpu-64-128"),
        CPU416("cpu-4-16"),
        CPU832("cpu-8-32"),
        CPU1664("cpu-16-64"),
        CPU32128("cpu-32-128"),
        GPU_L41416("gpu-l4-1-4-16"),
        GPU_L411248("gpu-l4-1-12-48"),
        GPU_L422496("gpu-l4-2-24-96"),
        GPU_L4448192("gpu-l4-4-48-192"),
        GPU_L4896384("gpu-l4-8-96-384"),;

        private final String value;

        private NodeShapeEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

