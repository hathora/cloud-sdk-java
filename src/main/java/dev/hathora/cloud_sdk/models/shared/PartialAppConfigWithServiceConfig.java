/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * PartialAppConfigWithServiceConfig
 * 
 * <p>Make all properties in T optional
 */
public class PartialAppConfigWithServiceConfig {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appName")
    private Optional<String> appName;

    /**
     * Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authConfiguration")
    private Optional<? extends AuthConfiguration> authConfiguration;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceConfig")
    private Optional<? extends ServiceConfig> serviceConfig;

    @JsonCreator
    public PartialAppConfigWithServiceConfig(
            @JsonProperty("appName") Optional<String> appName,
            @JsonProperty("authConfiguration") Optional<? extends AuthConfiguration> authConfiguration,
            @JsonProperty("serviceConfig") Optional<? extends ServiceConfig> serviceConfig) {
        Utils.checkNotNull(appName, "appName");
        Utils.checkNotNull(authConfiguration, "authConfiguration");
        Utils.checkNotNull(serviceConfig, "serviceConfig");
        this.appName = appName;
        this.authConfiguration = authConfiguration;
        this.serviceConfig = serviceConfig;
    }
    
    public PartialAppConfigWithServiceConfig() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> appName() {
        return appName;
    }

    /**
     * Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AuthConfiguration> authConfiguration() {
        return (Optional<AuthConfiguration>) authConfiguration;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ServiceConfig> serviceConfig() {
        return (Optional<ServiceConfig>) serviceConfig;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PartialAppConfigWithServiceConfig withAppName(String appName) {
        Utils.checkNotNull(appName, "appName");
        this.appName = Optional.ofNullable(appName);
        return this;
    }

    public PartialAppConfigWithServiceConfig withAppName(Optional<String> appName) {
        Utils.checkNotNull(appName, "appName");
        this.appName = appName;
        return this;
    }

    /**
     * Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
     */
    public PartialAppConfigWithServiceConfig withAuthConfiguration(AuthConfiguration authConfiguration) {
        Utils.checkNotNull(authConfiguration, "authConfiguration");
        this.authConfiguration = Optional.ofNullable(authConfiguration);
        return this;
    }

    /**
     * Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
     */
    public PartialAppConfigWithServiceConfig withAuthConfiguration(Optional<? extends AuthConfiguration> authConfiguration) {
        Utils.checkNotNull(authConfiguration, "authConfiguration");
        this.authConfiguration = authConfiguration;
        return this;
    }

    public PartialAppConfigWithServiceConfig withServiceConfig(ServiceConfig serviceConfig) {
        Utils.checkNotNull(serviceConfig, "serviceConfig");
        this.serviceConfig = Optional.ofNullable(serviceConfig);
        return this;
    }

    public PartialAppConfigWithServiceConfig withServiceConfig(Optional<? extends ServiceConfig> serviceConfig) {
        Utils.checkNotNull(serviceConfig, "serviceConfig");
        this.serviceConfig = serviceConfig;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PartialAppConfigWithServiceConfig other = (PartialAppConfigWithServiceConfig) o;
        return 
            Objects.deepEquals(this.appName, other.appName) &&
            Objects.deepEquals(this.authConfiguration, other.authConfiguration) &&
            Objects.deepEquals(this.serviceConfig, other.serviceConfig);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            appName,
            authConfiguration,
            serviceConfig);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PartialAppConfigWithServiceConfig.class,
                "appName", appName,
                "authConfiguration", authConfiguration,
                "serviceConfig", serviceConfig);
    }
    
    public final static class Builder {
 
        private Optional<String> appName = Optional.empty();
 
        private Optional<? extends AuthConfiguration> authConfiguration = Optional.empty();
 
        private Optional<? extends ServiceConfig> serviceConfig = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder appName(String appName) {
            Utils.checkNotNull(appName, "appName");
            this.appName = Optional.ofNullable(appName);
            return this;
        }

        public Builder appName(Optional<String> appName) {
            Utils.checkNotNull(appName, "appName");
            this.appName = appName;
            return this;
        }

        /**
         * Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
         */
        public Builder authConfiguration(AuthConfiguration authConfiguration) {
            Utils.checkNotNull(authConfiguration, "authConfiguration");
            this.authConfiguration = Optional.ofNullable(authConfiguration);
            return this;
        }

        /**
         * Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
         */
        public Builder authConfiguration(Optional<? extends AuthConfiguration> authConfiguration) {
            Utils.checkNotNull(authConfiguration, "authConfiguration");
            this.authConfiguration = authConfiguration;
            return this;
        }

        public Builder serviceConfig(ServiceConfig serviceConfig) {
            Utils.checkNotNull(serviceConfig, "serviceConfig");
            this.serviceConfig = Optional.ofNullable(serviceConfig);
            return this;
        }

        public Builder serviceConfig(Optional<? extends ServiceConfig> serviceConfig) {
            Utils.checkNotNull(serviceConfig, "serviceConfig");
            this.serviceConfig = serviceConfig;
            return this;
        }
        
        public PartialAppConfigWithServiceConfig build() {
            return new PartialAppConfigWithServiceConfig(
                appName,
                authConfiguration,
                serviceConfig);
        }
    }
}
