/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class CreateRoomParams {
    /**
     * An optional list of client IP addresses to whitelist for DDoS protection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIPs")
    private Optional<? extends List<String>> clientIPs;

    /**
     * System generated id for a deployment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deploymentId")
    private Optional<String> deploymentId;


    @JsonProperty("region")
    private Region region;

    /**
     * Optional configuration parameters for the room. Can be any string including stringified JSON. It is accessible from the room via [`GetRoomInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetRoomInfo).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roomConfig")
    private Optional<String> roomConfig;

    @JsonCreator
    public CreateRoomParams(
            @JsonProperty("clientIPs") Optional<? extends List<String>> clientIPs,
            @JsonProperty("deploymentId") Optional<String> deploymentId,
            @JsonProperty("region") Region region,
            @JsonProperty("roomConfig") Optional<String> roomConfig) {
        Utils.checkNotNull(clientIPs, "clientIPs");
        Utils.checkNotNull(deploymentId, "deploymentId");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(roomConfig, "roomConfig");
        this.clientIPs = clientIPs;
        this.deploymentId = deploymentId;
        this.region = region;
        this.roomConfig = roomConfig;
    }
    
    public CreateRoomParams(
            Region region) {
        this(Optional.empty(), Optional.empty(), region,
            Optional.empty());
    }

    /**
     * An optional list of client IP addresses to whitelist for DDoS protection.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> clientIPs() {
        return (Optional<List<String>>) clientIPs;
    }

    /**
     * System generated id for a deployment.
     */
    @JsonIgnore
    public Optional<String> deploymentId() {
        return deploymentId;
    }

    @JsonIgnore
    public Region region() {
        return region;
    }

    /**
     * Optional configuration parameters for the room. Can be any string including stringified JSON. It is accessible from the room via [`GetRoomInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetRoomInfo).
     */
    @JsonIgnore
    public Optional<String> roomConfig() {
        return roomConfig;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * An optional list of client IP addresses to whitelist for DDoS protection.
     */
    public CreateRoomParams withClientIPs(List<String> clientIPs) {
        Utils.checkNotNull(clientIPs, "clientIPs");
        this.clientIPs = Optional.ofNullable(clientIPs);
        return this;
    }


    /**
     * An optional list of client IP addresses to whitelist for DDoS protection.
     */
    public CreateRoomParams withClientIPs(Optional<? extends List<String>> clientIPs) {
        Utils.checkNotNull(clientIPs, "clientIPs");
        this.clientIPs = clientIPs;
        return this;
    }

    /**
     * System generated id for a deployment.
     */
    public CreateRoomParams withDeploymentId(String deploymentId) {
        Utils.checkNotNull(deploymentId, "deploymentId");
        this.deploymentId = Optional.ofNullable(deploymentId);
        return this;
    }


    /**
     * System generated id for a deployment.
     */
    public CreateRoomParams withDeploymentId(Optional<String> deploymentId) {
        Utils.checkNotNull(deploymentId, "deploymentId");
        this.deploymentId = deploymentId;
        return this;
    }

    public CreateRoomParams withRegion(Region region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * Optional configuration parameters for the room. Can be any string including stringified JSON. It is accessible from the room via [`GetRoomInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetRoomInfo).
     */
    public CreateRoomParams withRoomConfig(String roomConfig) {
        Utils.checkNotNull(roomConfig, "roomConfig");
        this.roomConfig = Optional.ofNullable(roomConfig);
        return this;
    }


    /**
     * Optional configuration parameters for the room. Can be any string including stringified JSON. It is accessible from the room via [`GetRoomInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetRoomInfo).
     */
    public CreateRoomParams withRoomConfig(Optional<String> roomConfig) {
        Utils.checkNotNull(roomConfig, "roomConfig");
        this.roomConfig = roomConfig;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateRoomParams other = (CreateRoomParams) o;
        return 
            Utils.enhancedDeepEquals(this.clientIPs, other.clientIPs) &&
            Utils.enhancedDeepEquals(this.deploymentId, other.deploymentId) &&
            Utils.enhancedDeepEquals(this.region, other.region) &&
            Utils.enhancedDeepEquals(this.roomConfig, other.roomConfig);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            clientIPs, deploymentId, region,
            roomConfig);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateRoomParams.class,
                "clientIPs", clientIPs,
                "deploymentId", deploymentId,
                "region", region,
                "roomConfig", roomConfig);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends List<String>> clientIPs = Optional.empty();

        private Optional<String> deploymentId = Optional.empty();

        private Region region;

        private Optional<String> roomConfig = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * An optional list of client IP addresses to whitelist for DDoS protection.
         */
        public Builder clientIPs(List<String> clientIPs) {
            Utils.checkNotNull(clientIPs, "clientIPs");
            this.clientIPs = Optional.ofNullable(clientIPs);
            return this;
        }

        /**
         * An optional list of client IP addresses to whitelist for DDoS protection.
         */
        public Builder clientIPs(Optional<? extends List<String>> clientIPs) {
            Utils.checkNotNull(clientIPs, "clientIPs");
            this.clientIPs = clientIPs;
            return this;
        }


        /**
         * System generated id for a deployment.
         */
        public Builder deploymentId(String deploymentId) {
            Utils.checkNotNull(deploymentId, "deploymentId");
            this.deploymentId = Optional.ofNullable(deploymentId);
            return this;
        }

        /**
         * System generated id for a deployment.
         */
        public Builder deploymentId(Optional<String> deploymentId) {
            Utils.checkNotNull(deploymentId, "deploymentId");
            this.deploymentId = deploymentId;
            return this;
        }


        public Builder region(Region region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }


        /**
         * Optional configuration parameters for the room. Can be any string including stringified JSON. It is accessible from the room via [`GetRoomInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetRoomInfo).
         */
        public Builder roomConfig(String roomConfig) {
            Utils.checkNotNull(roomConfig, "roomConfig");
            this.roomConfig = Optional.ofNullable(roomConfig);
            return this;
        }

        /**
         * Optional configuration parameters for the room. Can be any string including stringified JSON. It is accessible from the room via [`GetRoomInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetRoomInfo).
         */
        public Builder roomConfig(Optional<String> roomConfig) {
            Utils.checkNotNull(roomConfig, "roomConfig");
            this.roomConfig = roomConfig;
            return this;
        }

        public CreateRoomParams build() {

            return new CreateRoomParams(
                clientIPs, deploymentId, region,
                roomConfig);
        }

    }
}
