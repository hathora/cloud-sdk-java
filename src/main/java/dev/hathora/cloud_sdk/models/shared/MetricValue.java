/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;


public class MetricValue {

    @JsonProperty("timestamp")
    private double timestamp;


    @JsonProperty("value")
    private double value;

    @JsonCreator
    public MetricValue(
            @JsonProperty("timestamp") double timestamp,
            @JsonProperty("value") double value) {
        Utils.checkNotNull(timestamp, "timestamp");
        Utils.checkNotNull(value, "value");
        this.timestamp = timestamp;
        this.value = value;
    }

    @JsonIgnore
    public double timestamp() {
        return timestamp;
    }

    @JsonIgnore
    public double value() {
        return value;
    }

    public static Builder builder() {
        return new Builder();
    }


    public MetricValue withTimestamp(double timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }

    public MetricValue withValue(double value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MetricValue other = (MetricValue) o;
        return 
            Utils.enhancedDeepEquals(this.timestamp, other.timestamp) &&
            Utils.enhancedDeepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            timestamp, value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MetricValue.class,
                "timestamp", timestamp,
                "value", value);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Double timestamp;

        private Double value;

        private Builder() {
          // force use of static builder() method
        }


        public Builder timestamp(double timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }


        public Builder value(double value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        public MetricValue build() {

            return new MetricValue(
                timestamp, value);
        }

    }
}
