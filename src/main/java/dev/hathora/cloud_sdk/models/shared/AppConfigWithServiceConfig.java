/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class AppConfigWithServiceConfig {

    /**
     * Readable name for an application. Must be unique within an organization.
     */
    @JsonProperty("appName")
    private String appName;

    /**
     * Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
     */
    @JsonProperty("authConfiguration")
    private AuthConfiguration authConfiguration;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceConfig")
    private Optional<? extends ServiceConfig> serviceConfig;

    @JsonCreator
    public AppConfigWithServiceConfig(
            @JsonProperty("appName") String appName,
            @JsonProperty("authConfiguration") AuthConfiguration authConfiguration,
            @JsonProperty("serviceConfig") Optional<? extends ServiceConfig> serviceConfig) {
        Utils.checkNotNull(appName, "appName");
        Utils.checkNotNull(authConfiguration, "authConfiguration");
        Utils.checkNotNull(serviceConfig, "serviceConfig");
        this.appName = appName;
        this.authConfiguration = authConfiguration;
        this.serviceConfig = serviceConfig;
    }
    
    public AppConfigWithServiceConfig(
            String appName,
            AuthConfiguration authConfiguration) {
        this(appName, authConfiguration, Optional.empty());
    }

    /**
     * Readable name for an application. Must be unique within an organization.
     */
    @JsonIgnore
    public String appName() {
        return appName;
    }

    /**
     * Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
     */
    @JsonIgnore
    public AuthConfiguration authConfiguration() {
        return authConfiguration;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ServiceConfig> serviceConfig() {
        return (Optional<ServiceConfig>) serviceConfig;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Readable name for an application. Must be unique within an organization.
     */
    public AppConfigWithServiceConfig withAppName(String appName) {
        Utils.checkNotNull(appName, "appName");
        this.appName = appName;
        return this;
    }

    /**
     * Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
     */
    public AppConfigWithServiceConfig withAuthConfiguration(AuthConfiguration authConfiguration) {
        Utils.checkNotNull(authConfiguration, "authConfiguration");
        this.authConfiguration = authConfiguration;
        return this;
    }

    public AppConfigWithServiceConfig withServiceConfig(ServiceConfig serviceConfig) {
        Utils.checkNotNull(serviceConfig, "serviceConfig");
        this.serviceConfig = Optional.ofNullable(serviceConfig);
        return this;
    }

    public AppConfigWithServiceConfig withServiceConfig(Optional<? extends ServiceConfig> serviceConfig) {
        Utils.checkNotNull(serviceConfig, "serviceConfig");
        this.serviceConfig = serviceConfig;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AppConfigWithServiceConfig other = (AppConfigWithServiceConfig) o;
        return 
            Objects.deepEquals(this.appName, other.appName) &&
            Objects.deepEquals(this.authConfiguration, other.authConfiguration) &&
            Objects.deepEquals(this.serviceConfig, other.serviceConfig);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            appName,
            authConfiguration,
            serviceConfig);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AppConfigWithServiceConfig.class,
                "appName", appName,
                "authConfiguration", authConfiguration,
                "serviceConfig", serviceConfig);
    }
    
    public final static class Builder {
 
        private String appName;
 
        private AuthConfiguration authConfiguration;
 
        private Optional<? extends ServiceConfig> serviceConfig = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Readable name for an application. Must be unique within an organization.
         */
        public Builder appName(String appName) {
            Utils.checkNotNull(appName, "appName");
            this.appName = appName;
            return this;
        }

        /**
         * Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
         */
        public Builder authConfiguration(AuthConfiguration authConfiguration) {
            Utils.checkNotNull(authConfiguration, "authConfiguration");
            this.authConfiguration = authConfiguration;
            return this;
        }

        public Builder serviceConfig(ServiceConfig serviceConfig) {
            Utils.checkNotNull(serviceConfig, "serviceConfig");
            this.serviceConfig = Optional.ofNullable(serviceConfig);
            return this;
        }

        public Builder serviceConfig(Optional<? extends ServiceConfig> serviceConfig) {
            Utils.checkNotNull(serviceConfig, "serviceConfig");
            this.serviceConfig = serviceConfig;
            return this;
        }
        
        public AppConfigWithServiceConfig build() {
            return new AppConfigWithServiceConfig(
                appName,
                authConfiguration,
                serviceConfig);
        }
    }
}
