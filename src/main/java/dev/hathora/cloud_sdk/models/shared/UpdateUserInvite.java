/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;


public class UpdateUserInvite {
    /**
     * Scopes can only be removed or added if a user has those scopes.
     */
    @JsonProperty("scopes")
    private UpdateUserInviteScopes scopes;

    /**
     * A user's email.
     */
    @JsonProperty("userEmail")
    private String userEmail;

    @JsonCreator
    public UpdateUserInvite(
            @JsonProperty("scopes") UpdateUserInviteScopes scopes,
            @JsonProperty("userEmail") String userEmail) {
        Utils.checkNotNull(scopes, "scopes");
        Utils.checkNotNull(userEmail, "userEmail");
        this.scopes = scopes;
        this.userEmail = userEmail;
    }

    /**
     * Scopes can only be removed or added if a user has those scopes.
     */
    @JsonIgnore
    public UpdateUserInviteScopes scopes() {
        return scopes;
    }

    /**
     * A user's email.
     */
    @JsonIgnore
    public String userEmail() {
        return userEmail;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Scopes can only be removed or added if a user has those scopes.
     */
    public UpdateUserInvite withScopes(UpdateUserInviteScopes scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = scopes;
        return this;
    }

    /**
     * A user's email.
     */
    public UpdateUserInvite withUserEmail(String userEmail) {
        Utils.checkNotNull(userEmail, "userEmail");
        this.userEmail = userEmail;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateUserInvite other = (UpdateUserInvite) o;
        return 
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.userEmail, other.userEmail);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            scopes, userEmail);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateUserInvite.class,
                "scopes", scopes,
                "userEmail", userEmail);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private UpdateUserInviteScopes scopes;

        private String userEmail;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Scopes can only be removed or added if a user has those scopes.
         */
        public Builder scopes(UpdateUserInviteScopes scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = scopes;
            return this;
        }


        /**
         * A user's email.
         */
        public Builder userEmail(String userEmail) {
            Utils.checkNotNull(userEmail, "userEmail");
            this.userEmail = userEmail;
            return this;
        }

        public UpdateUserInvite build() {

            return new UpdateUserInvite(
                scopes, userEmail);
        }

    }
}
