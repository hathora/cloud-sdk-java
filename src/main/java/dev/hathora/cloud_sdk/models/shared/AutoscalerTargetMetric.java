/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;


public class AutoscalerTargetMetric {
    /**
     * The name of the metric.
     * Allowed values:
     * `concurrent-requests`: Tracks the number of concurrent requests that a single Process handles.
     */
    @JsonProperty("metricName")
    private MetricName metricName;


    @JsonProperty("metricValue")
    private double metricValue;

    @JsonCreator
    public AutoscalerTargetMetric(
            @JsonProperty("metricName") MetricName metricName,
            @JsonProperty("metricValue") double metricValue) {
        Utils.checkNotNull(metricName, "metricName");
        Utils.checkNotNull(metricValue, "metricValue");
        this.metricName = metricName;
        this.metricValue = metricValue;
    }

    /**
     * The name of the metric.
     * Allowed values:
     * `concurrent-requests`: Tracks the number of concurrent requests that a single Process handles.
     */
    @JsonIgnore
    public MetricName metricName() {
        return metricName;
    }

    @JsonIgnore
    public double metricValue() {
        return metricValue;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the metric.
     * Allowed values:
     * `concurrent-requests`: Tracks the number of concurrent requests that a single Process handles.
     */
    public AutoscalerTargetMetric withMetricName(MetricName metricName) {
        Utils.checkNotNull(metricName, "metricName");
        this.metricName = metricName;
        return this;
    }

    public AutoscalerTargetMetric withMetricValue(double metricValue) {
        Utils.checkNotNull(metricValue, "metricValue");
        this.metricValue = metricValue;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AutoscalerTargetMetric other = (AutoscalerTargetMetric) o;
        return 
            Utils.enhancedDeepEquals(this.metricName, other.metricName) &&
            Utils.enhancedDeepEquals(this.metricValue, other.metricValue);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            metricName, metricValue);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AutoscalerTargetMetric.class,
                "metricName", metricName,
                "metricValue", metricValue);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private MetricName metricName;

        private Double metricValue;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The name of the metric.
         * Allowed values:
         * `concurrent-requests`: Tracks the number of concurrent requests that a single Process handles.
         */
        public Builder metricName(MetricName metricName) {
            Utils.checkNotNull(metricName, "metricName");
            this.metricName = metricName;
            return this;
        }


        public Builder metricValue(double metricValue) {
            Utils.checkNotNull(metricValue, "metricValue");
            this.metricValue = metricValue;
            return this;
        }

        public AutoscalerTargetMetric build() {

            return new AutoscalerTargetMetric(
                metricName, metricValue);
        }

    }
}
