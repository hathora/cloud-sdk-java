/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class StaticProcessAllocationConfig {

    /**
     * The maximum number of running processes that can be spun up during upgrades
     * Invariant: minProcesses &lt;= maxProcesses
     */
    @JsonProperty("maxProcesses")
    private int maxProcesses;

    /**
     * The minimum running processes required during upgrades.
     * Invariant: 0 &lt;= minProcesses &lt; targetProcesses
     */
    @JsonProperty("minProcesses")
    private int minProcesses;

    @JsonProperty("region")
    private Region region;

    /**
     * The target number of running processes
     */
    @JsonProperty("targetProcesses")
    private int targetProcesses;

    @JsonCreator
    public StaticProcessAllocationConfig(
            @JsonProperty("maxProcesses") int maxProcesses,
            @JsonProperty("minProcesses") int minProcesses,
            @JsonProperty("region") Region region,
            @JsonProperty("targetProcesses") int targetProcesses) {
        Utils.checkNotNull(maxProcesses, "maxProcesses");
        Utils.checkNotNull(minProcesses, "minProcesses");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(targetProcesses, "targetProcesses");
        this.maxProcesses = maxProcesses;
        this.minProcesses = minProcesses;
        this.region = region;
        this.targetProcesses = targetProcesses;
    }

    /**
     * The maximum number of running processes that can be spun up during upgrades
     * Invariant: minProcesses &lt;= maxProcesses
     */
    @JsonIgnore
    public int maxProcesses() {
        return maxProcesses;
    }

    /**
     * The minimum running processes required during upgrades.
     * Invariant: 0 &lt;= minProcesses &lt; targetProcesses
     */
    @JsonIgnore
    public int minProcesses() {
        return minProcesses;
    }

    @JsonIgnore
    public Region region() {
        return region;
    }

    /**
     * The target number of running processes
     */
    @JsonIgnore
    public int targetProcesses() {
        return targetProcesses;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The maximum number of running processes that can be spun up during upgrades
     * Invariant: minProcesses &lt;= maxProcesses
     */
    public StaticProcessAllocationConfig withMaxProcesses(int maxProcesses) {
        Utils.checkNotNull(maxProcesses, "maxProcesses");
        this.maxProcesses = maxProcesses;
        return this;
    }

    /**
     * The minimum running processes required during upgrades.
     * Invariant: 0 &lt;= minProcesses &lt; targetProcesses
     */
    public StaticProcessAllocationConfig withMinProcesses(int minProcesses) {
        Utils.checkNotNull(minProcesses, "minProcesses");
        this.minProcesses = minProcesses;
        return this;
    }

    public StaticProcessAllocationConfig withRegion(Region region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * The target number of running processes
     */
    public StaticProcessAllocationConfig withTargetProcesses(int targetProcesses) {
        Utils.checkNotNull(targetProcesses, "targetProcesses");
        this.targetProcesses = targetProcesses;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StaticProcessAllocationConfig other = (StaticProcessAllocationConfig) o;
        return 
            Objects.deepEquals(this.maxProcesses, other.maxProcesses) &&
            Objects.deepEquals(this.minProcesses, other.minProcesses) &&
            Objects.deepEquals(this.region, other.region) &&
            Objects.deepEquals(this.targetProcesses, other.targetProcesses);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            maxProcesses,
            minProcesses,
            region,
            targetProcesses);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StaticProcessAllocationConfig.class,
                "maxProcesses", maxProcesses,
                "minProcesses", minProcesses,
                "region", region,
                "targetProcesses", targetProcesses);
    }
    
    public final static class Builder {
 
        private Integer maxProcesses;
 
        private Integer minProcesses;
 
        private Region region;
 
        private Integer targetProcesses;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The maximum number of running processes that can be spun up during upgrades
         * Invariant: minProcesses &lt;= maxProcesses
         */
        public Builder maxProcesses(int maxProcesses) {
            Utils.checkNotNull(maxProcesses, "maxProcesses");
            this.maxProcesses = maxProcesses;
            return this;
        }

        /**
         * The minimum running processes required during upgrades.
         * Invariant: 0 &lt;= minProcesses &lt; targetProcesses
         */
        public Builder minProcesses(int minProcesses) {
            Utils.checkNotNull(minProcesses, "minProcesses");
            this.minProcesses = minProcesses;
            return this;
        }

        public Builder region(Region region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        /**
         * The target number of running processes
         */
        public Builder targetProcesses(int targetProcesses) {
            Utils.checkNotNull(targetProcesses, "targetProcesses");
            this.targetProcesses = targetProcesses;
            return this;
        }
        
        public StaticProcessAllocationConfig build() {
            return new StaticProcessAllocationConfig(
                maxProcesses,
                minProcesses,
                region,
                targetProcesses);
        }
    }
}
