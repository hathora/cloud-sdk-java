/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;

/**
 * ProcessAutoscalerConfig
 * 
 * <p>The configuration for the Process Autoscaler for this application.
 * Autoscaling must be enabled on a per-region basis.
 * EXPERIMENTAL - This feature is in closed beta.
 */
public class ProcessAutoscalerConfig {

    @JsonProperty("targetMetric")
    private AutoscalerTargetMetric targetMetric;

    @JsonCreator
    public ProcessAutoscalerConfig(
            @JsonProperty("targetMetric") AutoscalerTargetMetric targetMetric) {
        Utils.checkNotNull(targetMetric, "targetMetric");
        this.targetMetric = targetMetric;
    }

    @JsonIgnore
    public AutoscalerTargetMetric targetMetric() {
        return targetMetric;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ProcessAutoscalerConfig withTargetMetric(AutoscalerTargetMetric targetMetric) {
        Utils.checkNotNull(targetMetric, "targetMetric");
        this.targetMetric = targetMetric;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProcessAutoscalerConfig other = (ProcessAutoscalerConfig) o;
        return 
            Utils.enhancedDeepEquals(this.targetMetric, other.targetMetric);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            targetMetric);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProcessAutoscalerConfig.class,
                "targetMetric", targetMetric);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private AutoscalerTargetMetric targetMetric;

        private Builder() {
          // force use of static builder() method
        }


        public Builder targetMetric(AutoscalerTargetMetric targetMetric) {
            Utils.checkNotNull(targetMetric, "targetMetric");
            this.targetMetric = targetMetric;
            return this;
        }

        public ProcessAutoscalerConfig build() {

            return new ProcessAutoscalerConfig(
                targetMetric);
        }

    }
}
