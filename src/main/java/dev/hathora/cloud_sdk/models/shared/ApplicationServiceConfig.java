/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;

public class ApplicationServiceConfig {

    /**
     * The headroom configuration for each region.
     * EXPERIMENTAL - this feature is in closed beta.
     */
    @JsonProperty("staticProcessAllocation")
    private List<StaticProcessAllocationConfig> staticProcessAllocation;

    @JsonCreator
    public ApplicationServiceConfig(
            @JsonProperty("staticProcessAllocation") List<StaticProcessAllocationConfig> staticProcessAllocation) {
        Utils.checkNotNull(staticProcessAllocation, "staticProcessAllocation");
        this.staticProcessAllocation = staticProcessAllocation;
    }

    /**
     * The headroom configuration for each region.
     * EXPERIMENTAL - this feature is in closed beta.
     */
    @JsonIgnore
    public List<StaticProcessAllocationConfig> staticProcessAllocation() {
        return staticProcessAllocation;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The headroom configuration for each region.
     * EXPERIMENTAL - this feature is in closed beta.
     */
    public ApplicationServiceConfig withStaticProcessAllocation(List<StaticProcessAllocationConfig> staticProcessAllocation) {
        Utils.checkNotNull(staticProcessAllocation, "staticProcessAllocation");
        this.staticProcessAllocation = staticProcessAllocation;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplicationServiceConfig other = (ApplicationServiceConfig) o;
        return 
            Objects.deepEquals(this.staticProcessAllocation, other.staticProcessAllocation);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            staticProcessAllocation);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApplicationServiceConfig.class,
                "staticProcessAllocation", staticProcessAllocation);
    }
    
    public final static class Builder {
 
        private List<StaticProcessAllocationConfig> staticProcessAllocation;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The headroom configuration for each region.
         * EXPERIMENTAL - this feature is in closed beta.
         */
        public Builder staticProcessAllocation(List<StaticProcessAllocationConfig> staticProcessAllocation) {
            Utils.checkNotNull(staticProcessAllocation, "staticProcessAllocation");
            this.staticProcessAllocation = staticProcessAllocation;
            return this;
        }
        
        public ApplicationServiceConfig build() {
            return new ApplicationServiceConfig(
                staticProcessAllocation);
        }
    }
}
