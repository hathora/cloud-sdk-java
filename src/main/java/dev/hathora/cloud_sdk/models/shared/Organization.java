/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Organization {
    /**
     * The maximum number of concurrent processes that can be run by the organization
     * If undefined, the organization has no limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("concurrentProcessVcpusLimit")
    private Optional<Double> concurrentProcessVcpusLimit;

    /**
     * The default fleet ID for this organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultFleetId")
    private JsonNullable<String> defaultFleetId;

    /**
     * The features enabled for this organization and user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabledFeatureFlags")
    private Optional<? extends List<String>> enabledFeatureFlags;


    @JsonProperty("isSingleTenant")
    private boolean isSingleTenant;

    /**
     * The retention period for process logs in hours
     * If undefined, the default is 72h
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logRetentionPeriodHours")
    private Optional<Integer> logRetentionPeriodHours;

    /**
     * The maximum number of cloud nodes that can be set as baseline
     * If undefined, the default is 10
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxCloudBaseline")
    private Optional<Integer> maxCloudBaseline;

    /**
     * The maximum number of inbound connections that can be made to a process
     * If undefined, the default is 1024 connections
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxProcessConnections")
    private Optional<Double> maxProcessConnections;

    /**
     * The maximum memory in MB that can be used by any process in this organization.
     */
    @JsonProperty("maxRequestedMemoryMB")
    private double maxRequestedMemoryMB;

    /**
     * The maximum number of monthly process vcpu hours that can be run by the organization
     * If undefined, the organization has no limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("monthlyProcessVcpuHoursLimit")
    private Optional<Double> monthlyProcessVcpuHoursLimit;

    /**
     * The name of an organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * System generated unique identifier for an organization. Not guaranteed to have a specific format.
     */
    @JsonProperty("orgId")
    private String orgId;

    /**
     * The maximum lifespan in hours of a pod.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("podMaxLifespanHrs")
    private Optional<Double> podMaxLifespanHrs;

    /**
     * The scopes the user who loaded this has on this organization.
     */
    @JsonProperty("scopes")
    private List<Scope> scopes;


    @JsonProperty("stripeCustomerId")
    private String stripeCustomerId;

    @JsonCreator
    public Organization(
            @JsonProperty("concurrentProcessVcpusLimit") Optional<Double> concurrentProcessVcpusLimit,
            @JsonProperty("defaultFleetId") JsonNullable<String> defaultFleetId,
            @JsonProperty("enabledFeatureFlags") Optional<? extends List<String>> enabledFeatureFlags,
            @JsonProperty("isSingleTenant") boolean isSingleTenant,
            @JsonProperty("logRetentionPeriodHours") Optional<Integer> logRetentionPeriodHours,
            @JsonProperty("maxCloudBaseline") Optional<Integer> maxCloudBaseline,
            @JsonProperty("maxProcessConnections") Optional<Double> maxProcessConnections,
            @JsonProperty("maxRequestedMemoryMB") double maxRequestedMemoryMB,
            @JsonProperty("monthlyProcessVcpuHoursLimit") Optional<Double> monthlyProcessVcpuHoursLimit,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("orgId") String orgId,
            @JsonProperty("podMaxLifespanHrs") Optional<Double> podMaxLifespanHrs,
            @JsonProperty("scopes") List<Scope> scopes,
            @JsonProperty("stripeCustomerId") String stripeCustomerId) {
        Utils.checkNotNull(concurrentProcessVcpusLimit, "concurrentProcessVcpusLimit");
        Utils.checkNotNull(defaultFleetId, "defaultFleetId");
        Utils.checkNotNull(enabledFeatureFlags, "enabledFeatureFlags");
        Utils.checkNotNull(isSingleTenant, "isSingleTenant");
        Utils.checkNotNull(logRetentionPeriodHours, "logRetentionPeriodHours");
        Utils.checkNotNull(maxCloudBaseline, "maxCloudBaseline");
        Utils.checkNotNull(maxProcessConnections, "maxProcessConnections");
        Utils.checkNotNull(maxRequestedMemoryMB, "maxRequestedMemoryMB");
        Utils.checkNotNull(monthlyProcessVcpuHoursLimit, "monthlyProcessVcpuHoursLimit");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(orgId, "orgId");
        Utils.checkNotNull(podMaxLifespanHrs, "podMaxLifespanHrs");
        Utils.checkNotNull(scopes, "scopes");
        Utils.checkNotNull(stripeCustomerId, "stripeCustomerId");
        this.concurrentProcessVcpusLimit = concurrentProcessVcpusLimit;
        this.defaultFleetId = defaultFleetId;
        this.enabledFeatureFlags = enabledFeatureFlags;
        this.isSingleTenant = isSingleTenant;
        this.logRetentionPeriodHours = logRetentionPeriodHours;
        this.maxCloudBaseline = maxCloudBaseline;
        this.maxProcessConnections = maxProcessConnections;
        this.maxRequestedMemoryMB = maxRequestedMemoryMB;
        this.monthlyProcessVcpuHoursLimit = monthlyProcessVcpuHoursLimit;
        this.name = name;
        this.orgId = orgId;
        this.podMaxLifespanHrs = podMaxLifespanHrs;
        this.scopes = scopes;
        this.stripeCustomerId = stripeCustomerId;
    }
    
    public Organization(
            boolean isSingleTenant,
            double maxRequestedMemoryMB,
            String orgId,
            List<Scope> scopes,
            String stripeCustomerId) {
        this(Optional.empty(), JsonNullable.undefined(), Optional.empty(),
            isSingleTenant, Optional.empty(), Optional.empty(),
            Optional.empty(), maxRequestedMemoryMB, Optional.empty(),
            Optional.empty(), orgId, Optional.empty(),
            scopes, stripeCustomerId);
    }

    /**
     * The maximum number of concurrent processes that can be run by the organization
     * If undefined, the organization has no limit.
     */
    @JsonIgnore
    public Optional<Double> concurrentProcessVcpusLimit() {
        return concurrentProcessVcpusLimit;
    }

    /**
     * The default fleet ID for this organization.
     */
    @JsonIgnore
    public JsonNullable<String> defaultFleetId() {
        return defaultFleetId;
    }

    /**
     * The features enabled for this organization and user.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> enabledFeatureFlags() {
        return (Optional<List<String>>) enabledFeatureFlags;
    }

    @JsonIgnore
    public boolean isSingleTenant() {
        return isSingleTenant;
    }

    /**
     * The retention period for process logs in hours
     * If undefined, the default is 72h
     */
    @JsonIgnore
    public Optional<Integer> logRetentionPeriodHours() {
        return logRetentionPeriodHours;
    }

    /**
     * The maximum number of cloud nodes that can be set as baseline
     * If undefined, the default is 10
     */
    @JsonIgnore
    public Optional<Integer> maxCloudBaseline() {
        return maxCloudBaseline;
    }

    /**
     * The maximum number of inbound connections that can be made to a process
     * If undefined, the default is 1024 connections
     */
    @JsonIgnore
    public Optional<Double> maxProcessConnections() {
        return maxProcessConnections;
    }

    /**
     * The maximum memory in MB that can be used by any process in this organization.
     */
    @JsonIgnore
    public double maxRequestedMemoryMB() {
        return maxRequestedMemoryMB;
    }

    /**
     * The maximum number of monthly process vcpu hours that can be run by the organization
     * If undefined, the organization has no limit.
     */
    @JsonIgnore
    public Optional<Double> monthlyProcessVcpuHoursLimit() {
        return monthlyProcessVcpuHoursLimit;
    }

    /**
     * The name of an organization.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * System generated unique identifier for an organization. Not guaranteed to have a specific format.
     */
    @JsonIgnore
    public String orgId() {
        return orgId;
    }

    /**
     * The maximum lifespan in hours of a pod.
     */
    @JsonIgnore
    public Optional<Double> podMaxLifespanHrs() {
        return podMaxLifespanHrs;
    }

    /**
     * The scopes the user who loaded this has on this organization.
     */
    @JsonIgnore
    public List<Scope> scopes() {
        return scopes;
    }

    @JsonIgnore
    public String stripeCustomerId() {
        return stripeCustomerId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The maximum number of concurrent processes that can be run by the organization
     * If undefined, the organization has no limit.
     */
    public Organization withConcurrentProcessVcpusLimit(double concurrentProcessVcpusLimit) {
        Utils.checkNotNull(concurrentProcessVcpusLimit, "concurrentProcessVcpusLimit");
        this.concurrentProcessVcpusLimit = Optional.ofNullable(concurrentProcessVcpusLimit);
        return this;
    }


    /**
     * The maximum number of concurrent processes that can be run by the organization
     * If undefined, the organization has no limit.
     */
    public Organization withConcurrentProcessVcpusLimit(Optional<Double> concurrentProcessVcpusLimit) {
        Utils.checkNotNull(concurrentProcessVcpusLimit, "concurrentProcessVcpusLimit");
        this.concurrentProcessVcpusLimit = concurrentProcessVcpusLimit;
        return this;
    }

    /**
     * The default fleet ID for this organization.
     */
    public Organization withDefaultFleetId(String defaultFleetId) {
        Utils.checkNotNull(defaultFleetId, "defaultFleetId");
        this.defaultFleetId = JsonNullable.of(defaultFleetId);
        return this;
    }

    /**
     * The default fleet ID for this organization.
     */
    public Organization withDefaultFleetId(JsonNullable<String> defaultFleetId) {
        Utils.checkNotNull(defaultFleetId, "defaultFleetId");
        this.defaultFleetId = defaultFleetId;
        return this;
    }

    /**
     * The features enabled for this organization and user.
     */
    public Organization withEnabledFeatureFlags(List<String> enabledFeatureFlags) {
        Utils.checkNotNull(enabledFeatureFlags, "enabledFeatureFlags");
        this.enabledFeatureFlags = Optional.ofNullable(enabledFeatureFlags);
        return this;
    }


    /**
     * The features enabled for this organization and user.
     */
    public Organization withEnabledFeatureFlags(Optional<? extends List<String>> enabledFeatureFlags) {
        Utils.checkNotNull(enabledFeatureFlags, "enabledFeatureFlags");
        this.enabledFeatureFlags = enabledFeatureFlags;
        return this;
    }

    public Organization withIsSingleTenant(boolean isSingleTenant) {
        Utils.checkNotNull(isSingleTenant, "isSingleTenant");
        this.isSingleTenant = isSingleTenant;
        return this;
    }

    /**
     * The retention period for process logs in hours
     * If undefined, the default is 72h
     */
    public Organization withLogRetentionPeriodHours(int logRetentionPeriodHours) {
        Utils.checkNotNull(logRetentionPeriodHours, "logRetentionPeriodHours");
        this.logRetentionPeriodHours = Optional.ofNullable(logRetentionPeriodHours);
        return this;
    }


    /**
     * The retention period for process logs in hours
     * If undefined, the default is 72h
     */
    public Organization withLogRetentionPeriodHours(Optional<Integer> logRetentionPeriodHours) {
        Utils.checkNotNull(logRetentionPeriodHours, "logRetentionPeriodHours");
        this.logRetentionPeriodHours = logRetentionPeriodHours;
        return this;
    }

    /**
     * The maximum number of cloud nodes that can be set as baseline
     * If undefined, the default is 10
     */
    public Organization withMaxCloudBaseline(int maxCloudBaseline) {
        Utils.checkNotNull(maxCloudBaseline, "maxCloudBaseline");
        this.maxCloudBaseline = Optional.ofNullable(maxCloudBaseline);
        return this;
    }


    /**
     * The maximum number of cloud nodes that can be set as baseline
     * If undefined, the default is 10
     */
    public Organization withMaxCloudBaseline(Optional<Integer> maxCloudBaseline) {
        Utils.checkNotNull(maxCloudBaseline, "maxCloudBaseline");
        this.maxCloudBaseline = maxCloudBaseline;
        return this;
    }

    /**
     * The maximum number of inbound connections that can be made to a process
     * If undefined, the default is 1024 connections
     */
    public Organization withMaxProcessConnections(double maxProcessConnections) {
        Utils.checkNotNull(maxProcessConnections, "maxProcessConnections");
        this.maxProcessConnections = Optional.ofNullable(maxProcessConnections);
        return this;
    }


    /**
     * The maximum number of inbound connections that can be made to a process
     * If undefined, the default is 1024 connections
     */
    public Organization withMaxProcessConnections(Optional<Double> maxProcessConnections) {
        Utils.checkNotNull(maxProcessConnections, "maxProcessConnections");
        this.maxProcessConnections = maxProcessConnections;
        return this;
    }

    /**
     * The maximum memory in MB that can be used by any process in this organization.
     */
    public Organization withMaxRequestedMemoryMB(double maxRequestedMemoryMB) {
        Utils.checkNotNull(maxRequestedMemoryMB, "maxRequestedMemoryMB");
        this.maxRequestedMemoryMB = maxRequestedMemoryMB;
        return this;
    }

    /**
     * The maximum number of monthly process vcpu hours that can be run by the organization
     * If undefined, the organization has no limit.
     */
    public Organization withMonthlyProcessVcpuHoursLimit(double monthlyProcessVcpuHoursLimit) {
        Utils.checkNotNull(monthlyProcessVcpuHoursLimit, "monthlyProcessVcpuHoursLimit");
        this.monthlyProcessVcpuHoursLimit = Optional.ofNullable(monthlyProcessVcpuHoursLimit);
        return this;
    }


    /**
     * The maximum number of monthly process vcpu hours that can be run by the organization
     * If undefined, the organization has no limit.
     */
    public Organization withMonthlyProcessVcpuHoursLimit(Optional<Double> monthlyProcessVcpuHoursLimit) {
        Utils.checkNotNull(monthlyProcessVcpuHoursLimit, "monthlyProcessVcpuHoursLimit");
        this.monthlyProcessVcpuHoursLimit = monthlyProcessVcpuHoursLimit;
        return this;
    }

    /**
     * The name of an organization.
     */
    public Organization withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    /**
     * The name of an organization.
     */
    public Organization withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * System generated unique identifier for an organization. Not guaranteed to have a specific format.
     */
    public Organization withOrgId(String orgId) {
        Utils.checkNotNull(orgId, "orgId");
        this.orgId = orgId;
        return this;
    }

    /**
     * The maximum lifespan in hours of a pod.
     */
    public Organization withPodMaxLifespanHrs(double podMaxLifespanHrs) {
        Utils.checkNotNull(podMaxLifespanHrs, "podMaxLifespanHrs");
        this.podMaxLifespanHrs = Optional.ofNullable(podMaxLifespanHrs);
        return this;
    }


    /**
     * The maximum lifespan in hours of a pod.
     */
    public Organization withPodMaxLifespanHrs(Optional<Double> podMaxLifespanHrs) {
        Utils.checkNotNull(podMaxLifespanHrs, "podMaxLifespanHrs");
        this.podMaxLifespanHrs = podMaxLifespanHrs;
        return this;
    }

    /**
     * The scopes the user who loaded this has on this organization.
     */
    public Organization withScopes(List<Scope> scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = scopes;
        return this;
    }

    public Organization withStripeCustomerId(String stripeCustomerId) {
        Utils.checkNotNull(stripeCustomerId, "stripeCustomerId");
        this.stripeCustomerId = stripeCustomerId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Organization other = (Organization) o;
        return 
            Utils.enhancedDeepEquals(this.concurrentProcessVcpusLimit, other.concurrentProcessVcpusLimit) &&
            Utils.enhancedDeepEquals(this.defaultFleetId, other.defaultFleetId) &&
            Utils.enhancedDeepEquals(this.enabledFeatureFlags, other.enabledFeatureFlags) &&
            Utils.enhancedDeepEquals(this.isSingleTenant, other.isSingleTenant) &&
            Utils.enhancedDeepEquals(this.logRetentionPeriodHours, other.logRetentionPeriodHours) &&
            Utils.enhancedDeepEquals(this.maxCloudBaseline, other.maxCloudBaseline) &&
            Utils.enhancedDeepEquals(this.maxProcessConnections, other.maxProcessConnections) &&
            Utils.enhancedDeepEquals(this.maxRequestedMemoryMB, other.maxRequestedMemoryMB) &&
            Utils.enhancedDeepEquals(this.monthlyProcessVcpuHoursLimit, other.monthlyProcessVcpuHoursLimit) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.orgId, other.orgId) &&
            Utils.enhancedDeepEquals(this.podMaxLifespanHrs, other.podMaxLifespanHrs) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.stripeCustomerId, other.stripeCustomerId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            concurrentProcessVcpusLimit, defaultFleetId, enabledFeatureFlags,
            isSingleTenant, logRetentionPeriodHours, maxCloudBaseline,
            maxProcessConnections, maxRequestedMemoryMB, monthlyProcessVcpuHoursLimit,
            name, orgId, podMaxLifespanHrs,
            scopes, stripeCustomerId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Organization.class,
                "concurrentProcessVcpusLimit", concurrentProcessVcpusLimit,
                "defaultFleetId", defaultFleetId,
                "enabledFeatureFlags", enabledFeatureFlags,
                "isSingleTenant", isSingleTenant,
                "logRetentionPeriodHours", logRetentionPeriodHours,
                "maxCloudBaseline", maxCloudBaseline,
                "maxProcessConnections", maxProcessConnections,
                "maxRequestedMemoryMB", maxRequestedMemoryMB,
                "monthlyProcessVcpuHoursLimit", monthlyProcessVcpuHoursLimit,
                "name", name,
                "orgId", orgId,
                "podMaxLifespanHrs", podMaxLifespanHrs,
                "scopes", scopes,
                "stripeCustomerId", stripeCustomerId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Double> concurrentProcessVcpusLimit = Optional.empty();

        private JsonNullable<String> defaultFleetId = JsonNullable.undefined();

        private Optional<? extends List<String>> enabledFeatureFlags = Optional.empty();

        private Boolean isSingleTenant;

        private Optional<Integer> logRetentionPeriodHours = Optional.empty();

        private Optional<Integer> maxCloudBaseline = Optional.empty();

        private Optional<Double> maxProcessConnections = Optional.empty();

        private Double maxRequestedMemoryMB;

        private Optional<Double> monthlyProcessVcpuHoursLimit = Optional.empty();

        private Optional<String> name = Optional.empty();

        private String orgId;

        private Optional<Double> podMaxLifespanHrs = Optional.empty();

        private List<Scope> scopes;

        private String stripeCustomerId;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The maximum number of concurrent processes that can be run by the organization
         * If undefined, the organization has no limit.
         */
        public Builder concurrentProcessVcpusLimit(double concurrentProcessVcpusLimit) {
            Utils.checkNotNull(concurrentProcessVcpusLimit, "concurrentProcessVcpusLimit");
            this.concurrentProcessVcpusLimit = Optional.ofNullable(concurrentProcessVcpusLimit);
            return this;
        }

        /**
         * The maximum number of concurrent processes that can be run by the organization
         * If undefined, the organization has no limit.
         */
        public Builder concurrentProcessVcpusLimit(Optional<Double> concurrentProcessVcpusLimit) {
            Utils.checkNotNull(concurrentProcessVcpusLimit, "concurrentProcessVcpusLimit");
            this.concurrentProcessVcpusLimit = concurrentProcessVcpusLimit;
            return this;
        }


        /**
         * The default fleet ID for this organization.
         */
        public Builder defaultFleetId(String defaultFleetId) {
            Utils.checkNotNull(defaultFleetId, "defaultFleetId");
            this.defaultFleetId = JsonNullable.of(defaultFleetId);
            return this;
        }

        /**
         * The default fleet ID for this organization.
         */
        public Builder defaultFleetId(JsonNullable<String> defaultFleetId) {
            Utils.checkNotNull(defaultFleetId, "defaultFleetId");
            this.defaultFleetId = defaultFleetId;
            return this;
        }


        /**
         * The features enabled for this organization and user.
         */
        public Builder enabledFeatureFlags(List<String> enabledFeatureFlags) {
            Utils.checkNotNull(enabledFeatureFlags, "enabledFeatureFlags");
            this.enabledFeatureFlags = Optional.ofNullable(enabledFeatureFlags);
            return this;
        }

        /**
         * The features enabled for this organization and user.
         */
        public Builder enabledFeatureFlags(Optional<? extends List<String>> enabledFeatureFlags) {
            Utils.checkNotNull(enabledFeatureFlags, "enabledFeatureFlags");
            this.enabledFeatureFlags = enabledFeatureFlags;
            return this;
        }


        public Builder isSingleTenant(boolean isSingleTenant) {
            Utils.checkNotNull(isSingleTenant, "isSingleTenant");
            this.isSingleTenant = isSingleTenant;
            return this;
        }


        /**
         * The retention period for process logs in hours
         * If undefined, the default is 72h
         */
        public Builder logRetentionPeriodHours(int logRetentionPeriodHours) {
            Utils.checkNotNull(logRetentionPeriodHours, "logRetentionPeriodHours");
            this.logRetentionPeriodHours = Optional.ofNullable(logRetentionPeriodHours);
            return this;
        }

        /**
         * The retention period for process logs in hours
         * If undefined, the default is 72h
         */
        public Builder logRetentionPeriodHours(Optional<Integer> logRetentionPeriodHours) {
            Utils.checkNotNull(logRetentionPeriodHours, "logRetentionPeriodHours");
            this.logRetentionPeriodHours = logRetentionPeriodHours;
            return this;
        }


        /**
         * The maximum number of cloud nodes that can be set as baseline
         * If undefined, the default is 10
         */
        public Builder maxCloudBaseline(int maxCloudBaseline) {
            Utils.checkNotNull(maxCloudBaseline, "maxCloudBaseline");
            this.maxCloudBaseline = Optional.ofNullable(maxCloudBaseline);
            return this;
        }

        /**
         * The maximum number of cloud nodes that can be set as baseline
         * If undefined, the default is 10
         */
        public Builder maxCloudBaseline(Optional<Integer> maxCloudBaseline) {
            Utils.checkNotNull(maxCloudBaseline, "maxCloudBaseline");
            this.maxCloudBaseline = maxCloudBaseline;
            return this;
        }


        /**
         * The maximum number of inbound connections that can be made to a process
         * If undefined, the default is 1024 connections
         */
        public Builder maxProcessConnections(double maxProcessConnections) {
            Utils.checkNotNull(maxProcessConnections, "maxProcessConnections");
            this.maxProcessConnections = Optional.ofNullable(maxProcessConnections);
            return this;
        }

        /**
         * The maximum number of inbound connections that can be made to a process
         * If undefined, the default is 1024 connections
         */
        public Builder maxProcessConnections(Optional<Double> maxProcessConnections) {
            Utils.checkNotNull(maxProcessConnections, "maxProcessConnections");
            this.maxProcessConnections = maxProcessConnections;
            return this;
        }


        /**
         * The maximum memory in MB that can be used by any process in this organization.
         */
        public Builder maxRequestedMemoryMB(double maxRequestedMemoryMB) {
            Utils.checkNotNull(maxRequestedMemoryMB, "maxRequestedMemoryMB");
            this.maxRequestedMemoryMB = maxRequestedMemoryMB;
            return this;
        }


        /**
         * The maximum number of monthly process vcpu hours that can be run by the organization
         * If undefined, the organization has no limit.
         */
        public Builder monthlyProcessVcpuHoursLimit(double monthlyProcessVcpuHoursLimit) {
            Utils.checkNotNull(monthlyProcessVcpuHoursLimit, "monthlyProcessVcpuHoursLimit");
            this.monthlyProcessVcpuHoursLimit = Optional.ofNullable(monthlyProcessVcpuHoursLimit);
            return this;
        }

        /**
         * The maximum number of monthly process vcpu hours that can be run by the organization
         * If undefined, the organization has no limit.
         */
        public Builder monthlyProcessVcpuHoursLimit(Optional<Double> monthlyProcessVcpuHoursLimit) {
            Utils.checkNotNull(monthlyProcessVcpuHoursLimit, "monthlyProcessVcpuHoursLimit");
            this.monthlyProcessVcpuHoursLimit = monthlyProcessVcpuHoursLimit;
            return this;
        }


        /**
         * The name of an organization.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of an organization.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * System generated unique identifier for an organization. Not guaranteed to have a specific format.
         */
        public Builder orgId(String orgId) {
            Utils.checkNotNull(orgId, "orgId");
            this.orgId = orgId;
            return this;
        }


        /**
         * The maximum lifespan in hours of a pod.
         */
        public Builder podMaxLifespanHrs(double podMaxLifespanHrs) {
            Utils.checkNotNull(podMaxLifespanHrs, "podMaxLifespanHrs");
            this.podMaxLifespanHrs = Optional.ofNullable(podMaxLifespanHrs);
            return this;
        }

        /**
         * The maximum lifespan in hours of a pod.
         */
        public Builder podMaxLifespanHrs(Optional<Double> podMaxLifespanHrs) {
            Utils.checkNotNull(podMaxLifespanHrs, "podMaxLifespanHrs");
            this.podMaxLifespanHrs = podMaxLifespanHrs;
            return this;
        }


        /**
         * The scopes the user who loaded this has on this organization.
         */
        public Builder scopes(List<Scope> scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = scopes;
            return this;
        }


        public Builder stripeCustomerId(String stripeCustomerId) {
            Utils.checkNotNull(stripeCustomerId, "stripeCustomerId");
            this.stripeCustomerId = stripeCustomerId;
            return this;
        }

        public Organization build() {

            return new Organization(
                concurrentProcessVcpusLimit, defaultFleetId, enabledFeatureFlags,
                isSingleTenant, logRetentionPeriodHours, maxCloudBaseline,
                maxProcessConnections, maxRequestedMemoryMB, monthlyProcessVcpuHoursLimit,
                name, orgId, podMaxLifespanHrs,
                scopes, stripeCustomerId);
        }

    }
}
