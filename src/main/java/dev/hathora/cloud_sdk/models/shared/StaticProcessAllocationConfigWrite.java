/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class StaticProcessAllocationConfigWrite {
    /**
     * Whether autoscaling is enabled in this region. When enabled, `targetProcesses` is managed by the Process Autoscaler
     * in accordance with the `processAutoscalerConfig` field set on the application's `serviceConfig`.
     * There MUST be a `processAutoscalerConfig` for the application in order to enable autoscaling.
     * EXPERIMENTAL - this feature is in closed beta.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoscalingEnabled")
    private Optional<Boolean> autoscalingEnabled;

    /**
     * The maximum number of running processes.
     * When maxProcesses is null, will be set to a system-defined maximum value.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("maxProcesses")
    private Optional<Integer> maxProcesses;

    /**
     * The minimum number of running processes.
     * Invariant: 0 &lt;= minProcesses &lt; targetProcesses
     */
    @JsonProperty("minProcesses")
    private int minProcesses;


    @JsonProperty("region")
    private Region region;

    /**
     * The target number of running processes.
     * When using process autoscaling, targetProcesses MUST NOT be set in this object.
     * targetProcesses will be managed by the ProcessAutoscaler
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetProcesses")
    private Optional<Integer> targetProcesses;

    @JsonCreator
    public StaticProcessAllocationConfigWrite(
            @JsonProperty("autoscalingEnabled") Optional<Boolean> autoscalingEnabled,
            @JsonProperty("maxProcesses") Optional<Integer> maxProcesses,
            @JsonProperty("minProcesses") int minProcesses,
            @JsonProperty("region") Region region,
            @JsonProperty("targetProcesses") Optional<Integer> targetProcesses) {
        Utils.checkNotNull(autoscalingEnabled, "autoscalingEnabled");
        Utils.checkNotNull(maxProcesses, "maxProcesses");
        Utils.checkNotNull(minProcesses, "minProcesses");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(targetProcesses, "targetProcesses");
        this.autoscalingEnabled = autoscalingEnabled;
        this.maxProcesses = maxProcesses;
        this.minProcesses = minProcesses;
        this.region = region;
        this.targetProcesses = targetProcesses;
    }
    
    public StaticProcessAllocationConfigWrite(
            int minProcesses,
            Region region) {
        this(Optional.empty(), Optional.empty(), minProcesses,
            region, Optional.empty());
    }

    /**
     * Whether autoscaling is enabled in this region. When enabled, `targetProcesses` is managed by the Process Autoscaler
     * in accordance with the `processAutoscalerConfig` field set on the application's `serviceConfig`.
     * There MUST be a `processAutoscalerConfig` for the application in order to enable autoscaling.
     * EXPERIMENTAL - this feature is in closed beta.
     */
    @JsonIgnore
    public Optional<Boolean> autoscalingEnabled() {
        return autoscalingEnabled;
    }

    /**
     * The maximum number of running processes.
     * When maxProcesses is null, will be set to a system-defined maximum value.
     */
    @JsonIgnore
    public Optional<Integer> maxProcesses() {
        return maxProcesses;
    }

    /**
     * The minimum number of running processes.
     * Invariant: 0 &lt;= minProcesses &lt; targetProcesses
     */
    @JsonIgnore
    public int minProcesses() {
        return minProcesses;
    }

    @JsonIgnore
    public Region region() {
        return region;
    }

    /**
     * The target number of running processes.
     * When using process autoscaling, targetProcesses MUST NOT be set in this object.
     * targetProcesses will be managed by the ProcessAutoscaler
     */
    @JsonIgnore
    public Optional<Integer> targetProcesses() {
        return targetProcesses;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Whether autoscaling is enabled in this region. When enabled, `targetProcesses` is managed by the Process Autoscaler
     * in accordance with the `processAutoscalerConfig` field set on the application's `serviceConfig`.
     * There MUST be a `processAutoscalerConfig` for the application in order to enable autoscaling.
     * EXPERIMENTAL - this feature is in closed beta.
     */
    public StaticProcessAllocationConfigWrite withAutoscalingEnabled(boolean autoscalingEnabled) {
        Utils.checkNotNull(autoscalingEnabled, "autoscalingEnabled");
        this.autoscalingEnabled = Optional.ofNullable(autoscalingEnabled);
        return this;
    }


    /**
     * Whether autoscaling is enabled in this region. When enabled, `targetProcesses` is managed by the Process Autoscaler
     * in accordance with the `processAutoscalerConfig` field set on the application's `serviceConfig`.
     * There MUST be a `processAutoscalerConfig` for the application in order to enable autoscaling.
     * EXPERIMENTAL - this feature is in closed beta.
     */
    public StaticProcessAllocationConfigWrite withAutoscalingEnabled(Optional<Boolean> autoscalingEnabled) {
        Utils.checkNotNull(autoscalingEnabled, "autoscalingEnabled");
        this.autoscalingEnabled = autoscalingEnabled;
        return this;
    }

    /**
     * The maximum number of running processes.
     * When maxProcesses is null, will be set to a system-defined maximum value.
     */
    public StaticProcessAllocationConfigWrite withMaxProcesses(int maxProcesses) {
        Utils.checkNotNull(maxProcesses, "maxProcesses");
        this.maxProcesses = Optional.ofNullable(maxProcesses);
        return this;
    }


    /**
     * The maximum number of running processes.
     * When maxProcesses is null, will be set to a system-defined maximum value.
     */
    public StaticProcessAllocationConfigWrite withMaxProcesses(Optional<Integer> maxProcesses) {
        Utils.checkNotNull(maxProcesses, "maxProcesses");
        this.maxProcesses = maxProcesses;
        return this;
    }

    /**
     * The minimum number of running processes.
     * Invariant: 0 &lt;= minProcesses &lt; targetProcesses
     */
    public StaticProcessAllocationConfigWrite withMinProcesses(int minProcesses) {
        Utils.checkNotNull(minProcesses, "minProcesses");
        this.minProcesses = minProcesses;
        return this;
    }

    public StaticProcessAllocationConfigWrite withRegion(Region region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * The target number of running processes.
     * When using process autoscaling, targetProcesses MUST NOT be set in this object.
     * targetProcesses will be managed by the ProcessAutoscaler
     */
    public StaticProcessAllocationConfigWrite withTargetProcesses(int targetProcesses) {
        Utils.checkNotNull(targetProcesses, "targetProcesses");
        this.targetProcesses = Optional.ofNullable(targetProcesses);
        return this;
    }


    /**
     * The target number of running processes.
     * When using process autoscaling, targetProcesses MUST NOT be set in this object.
     * targetProcesses will be managed by the ProcessAutoscaler
     */
    public StaticProcessAllocationConfigWrite withTargetProcesses(Optional<Integer> targetProcesses) {
        Utils.checkNotNull(targetProcesses, "targetProcesses");
        this.targetProcesses = targetProcesses;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StaticProcessAllocationConfigWrite other = (StaticProcessAllocationConfigWrite) o;
        return 
            Utils.enhancedDeepEquals(this.autoscalingEnabled, other.autoscalingEnabled) &&
            Utils.enhancedDeepEquals(this.maxProcesses, other.maxProcesses) &&
            Utils.enhancedDeepEquals(this.minProcesses, other.minProcesses) &&
            Utils.enhancedDeepEquals(this.region, other.region) &&
            Utils.enhancedDeepEquals(this.targetProcesses, other.targetProcesses);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            autoscalingEnabled, maxProcesses, minProcesses,
            region, targetProcesses);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StaticProcessAllocationConfigWrite.class,
                "autoscalingEnabled", autoscalingEnabled,
                "maxProcesses", maxProcesses,
                "minProcesses", minProcesses,
                "region", region,
                "targetProcesses", targetProcesses);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Boolean> autoscalingEnabled = Optional.empty();

        private Optional<Integer> maxProcesses = Optional.empty();

        private Integer minProcesses;

        private Region region;

        private Optional<Integer> targetProcesses = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Whether autoscaling is enabled in this region. When enabled, `targetProcesses` is managed by the Process Autoscaler
         * in accordance with the `processAutoscalerConfig` field set on the application's `serviceConfig`.
         * There MUST be a `processAutoscalerConfig` for the application in order to enable autoscaling.
         * EXPERIMENTAL - this feature is in closed beta.
         */
        public Builder autoscalingEnabled(boolean autoscalingEnabled) {
            Utils.checkNotNull(autoscalingEnabled, "autoscalingEnabled");
            this.autoscalingEnabled = Optional.ofNullable(autoscalingEnabled);
            return this;
        }

        /**
         * Whether autoscaling is enabled in this region. When enabled, `targetProcesses` is managed by the Process Autoscaler
         * in accordance with the `processAutoscalerConfig` field set on the application's `serviceConfig`.
         * There MUST be a `processAutoscalerConfig` for the application in order to enable autoscaling.
         * EXPERIMENTAL - this feature is in closed beta.
         */
        public Builder autoscalingEnabled(Optional<Boolean> autoscalingEnabled) {
            Utils.checkNotNull(autoscalingEnabled, "autoscalingEnabled");
            this.autoscalingEnabled = autoscalingEnabled;
            return this;
        }


        /**
         * The maximum number of running processes.
         * When maxProcesses is null, will be set to a system-defined maximum value.
         */
        public Builder maxProcesses(int maxProcesses) {
            Utils.checkNotNull(maxProcesses, "maxProcesses");
            this.maxProcesses = Optional.ofNullable(maxProcesses);
            return this;
        }

        /**
         * The maximum number of running processes.
         * When maxProcesses is null, will be set to a system-defined maximum value.
         */
        public Builder maxProcesses(Optional<Integer> maxProcesses) {
            Utils.checkNotNull(maxProcesses, "maxProcesses");
            this.maxProcesses = maxProcesses;
            return this;
        }


        /**
         * The minimum number of running processes.
         * Invariant: 0 &lt;= minProcesses &lt; targetProcesses
         */
        public Builder minProcesses(int minProcesses) {
            Utils.checkNotNull(minProcesses, "minProcesses");
            this.minProcesses = minProcesses;
            return this;
        }


        public Builder region(Region region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }


        /**
         * The target number of running processes.
         * When using process autoscaling, targetProcesses MUST NOT be set in this object.
         * targetProcesses will be managed by the ProcessAutoscaler
         */
        public Builder targetProcesses(int targetProcesses) {
            Utils.checkNotNull(targetProcesses, "targetProcesses");
            this.targetProcesses = Optional.ofNullable(targetProcesses);
            return this;
        }

        /**
         * The target number of running processes.
         * When using process autoscaling, targetProcesses MUST NOT be set in this object.
         * targetProcesses will be managed by the ProcessAutoscaler
         */
        public Builder targetProcesses(Optional<Integer> targetProcesses) {
            Utils.checkNotNull(targetProcesses, "targetProcesses");
            this.targetProcesses = targetProcesses;
            return this;
        }

        public StaticProcessAllocationConfigWrite build() {

            return new StaticProcessAllocationConfigWrite(
                autoscalingEnabled, maxProcesses, minProcesses,
                region, targetProcesses);
        }

    }
}
