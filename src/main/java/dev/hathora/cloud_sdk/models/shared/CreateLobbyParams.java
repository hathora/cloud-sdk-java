/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class CreateLobbyParams {

    /**
     * User input to initialize the game state. Object must be smaller than 64KB.
     */
    @JsonProperty("initialConfig")
    private Object initialConfig;

    @JsonProperty("region")
    private Region region;

    /**
     * Types of lobbies a player can create.
     * 
     * <p>`private`: the player who created the room must share the roomId with their friends
     * 
     * <p>`public`: visible in the public lobby list, anyone can join
     * 
     * <p>`local`: for testing with a server running locally
     */
    @JsonProperty("visibility")
    private LobbyVisibility visibility;

    @JsonCreator
    public CreateLobbyParams(
            @JsonProperty("initialConfig") Object initialConfig,
            @JsonProperty("region") Region region,
            @JsonProperty("visibility") LobbyVisibility visibility) {
        Utils.checkNotNull(initialConfig, "initialConfig");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(visibility, "visibility");
        this.initialConfig = initialConfig;
        this.region = region;
        this.visibility = visibility;
    }

    /**
     * User input to initialize the game state. Object must be smaller than 64KB.
     */
    @JsonIgnore
    public Object initialConfig() {
        return initialConfig;
    }

    @JsonIgnore
    public Region region() {
        return region;
    }

    /**
     * Types of lobbies a player can create.
     * 
     * <p>`private`: the player who created the room must share the roomId with their friends
     * 
     * <p>`public`: visible in the public lobby list, anyone can join
     * 
     * <p>`local`: for testing with a server running locally
     */
    @JsonIgnore
    public LobbyVisibility visibility() {
        return visibility;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * User input to initialize the game state. Object must be smaller than 64KB.
     */
    public CreateLobbyParams withInitialConfig(Object initialConfig) {
        Utils.checkNotNull(initialConfig, "initialConfig");
        this.initialConfig = initialConfig;
        return this;
    }

    public CreateLobbyParams withRegion(Region region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * Types of lobbies a player can create.
     * 
     * <p>`private`: the player who created the room must share the roomId with their friends
     * 
     * <p>`public`: visible in the public lobby list, anyone can join
     * 
     * <p>`local`: for testing with a server running locally
     */
    public CreateLobbyParams withVisibility(LobbyVisibility visibility) {
        Utils.checkNotNull(visibility, "visibility");
        this.visibility = visibility;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateLobbyParams other = (CreateLobbyParams) o;
        return 
            Objects.deepEquals(this.initialConfig, other.initialConfig) &&
            Objects.deepEquals(this.region, other.region) &&
            Objects.deepEquals(this.visibility, other.visibility);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            initialConfig,
            region,
            visibility);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateLobbyParams.class,
                "initialConfig", initialConfig,
                "region", region,
                "visibility", visibility);
    }
    
    public final static class Builder {
 
        private Object initialConfig;
 
        private Region region;
 
        private LobbyVisibility visibility;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * User input to initialize the game state. Object must be smaller than 64KB.
         */
        public Builder initialConfig(Object initialConfig) {
            Utils.checkNotNull(initialConfig, "initialConfig");
            this.initialConfig = initialConfig;
            return this;
        }

        public Builder region(Region region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        /**
         * Types of lobbies a player can create.
         * 
         * <p>`private`: the player who created the room must share the roomId with their friends
         * 
         * <p>`public`: visible in the public lobby list, anyone can join
         * 
         * <p>`local`: for testing with a server running locally
         */
        public Builder visibility(LobbyVisibility visibility) {
            Utils.checkNotNull(visibility, "visibility");
            this.visibility = visibility;
            return this;
        }
        
        public CreateLobbyParams build() {
            return new CreateLobbyParams(
                initialConfig,
                region,
                visibility);
        }
    }
}
