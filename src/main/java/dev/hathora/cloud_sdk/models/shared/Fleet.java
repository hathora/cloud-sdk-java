/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * Fleet
 * 
 * <p>A fleet is a collection of vCPUs across your regions that can scale up and down based on demand.
 */
public class Fleet {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoscalerConfig")
    private Optional<? extends AutoscalerConfig> autoscalerConfig;

    /**
     * the id of the fleet
     */
    @JsonProperty("fleetId")
    private String fleetId;


    @JsonProperty("nodeShape")
    private NodeShape nodeShape;

    /**
     * System generated unique identifier for an organization. Not guaranteed to have a specific format.
     */
    @JsonProperty("orgId")
    private String orgId;

    @JsonCreator
    public Fleet(
            @JsonProperty("autoscalerConfig") Optional<? extends AutoscalerConfig> autoscalerConfig,
            @JsonProperty("fleetId") String fleetId,
            @JsonProperty("nodeShape") NodeShape nodeShape,
            @JsonProperty("orgId") String orgId) {
        Utils.checkNotNull(autoscalerConfig, "autoscalerConfig");
        Utils.checkNotNull(fleetId, "fleetId");
        Utils.checkNotNull(nodeShape, "nodeShape");
        Utils.checkNotNull(orgId, "orgId");
        this.autoscalerConfig = autoscalerConfig;
        this.fleetId = fleetId;
        this.nodeShape = nodeShape;
        this.orgId = orgId;
    }
    
    public Fleet(
            String fleetId,
            NodeShape nodeShape,
            String orgId) {
        this(Optional.empty(), fleetId, nodeShape,
            orgId);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AutoscalerConfig> autoscalerConfig() {
        return (Optional<AutoscalerConfig>) autoscalerConfig;
    }

    /**
     * the id of the fleet
     */
    @JsonIgnore
    public String fleetId() {
        return fleetId;
    }

    @JsonIgnore
    public NodeShape nodeShape() {
        return nodeShape;
    }

    /**
     * System generated unique identifier for an organization. Not guaranteed to have a specific format.
     */
    @JsonIgnore
    public String orgId() {
        return orgId;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Fleet withAutoscalerConfig(AutoscalerConfig autoscalerConfig) {
        Utils.checkNotNull(autoscalerConfig, "autoscalerConfig");
        this.autoscalerConfig = Optional.ofNullable(autoscalerConfig);
        return this;
    }


    public Fleet withAutoscalerConfig(Optional<? extends AutoscalerConfig> autoscalerConfig) {
        Utils.checkNotNull(autoscalerConfig, "autoscalerConfig");
        this.autoscalerConfig = autoscalerConfig;
        return this;
    }

    /**
     * the id of the fleet
     */
    public Fleet withFleetId(String fleetId) {
        Utils.checkNotNull(fleetId, "fleetId");
        this.fleetId = fleetId;
        return this;
    }

    public Fleet withNodeShape(NodeShape nodeShape) {
        Utils.checkNotNull(nodeShape, "nodeShape");
        this.nodeShape = nodeShape;
        return this;
    }

    /**
     * System generated unique identifier for an organization. Not guaranteed to have a specific format.
     */
    public Fleet withOrgId(String orgId) {
        Utils.checkNotNull(orgId, "orgId");
        this.orgId = orgId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Fleet other = (Fleet) o;
        return 
            Utils.enhancedDeepEquals(this.autoscalerConfig, other.autoscalerConfig) &&
            Utils.enhancedDeepEquals(this.fleetId, other.fleetId) &&
            Utils.enhancedDeepEquals(this.nodeShape, other.nodeShape) &&
            Utils.enhancedDeepEquals(this.orgId, other.orgId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            autoscalerConfig, fleetId, nodeShape,
            orgId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Fleet.class,
                "autoscalerConfig", autoscalerConfig,
                "fleetId", fleetId,
                "nodeShape", nodeShape,
                "orgId", orgId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends AutoscalerConfig> autoscalerConfig = Optional.empty();

        private String fleetId;

        private NodeShape nodeShape;

        private String orgId;

        private Builder() {
          // force use of static builder() method
        }


        public Builder autoscalerConfig(AutoscalerConfig autoscalerConfig) {
            Utils.checkNotNull(autoscalerConfig, "autoscalerConfig");
            this.autoscalerConfig = Optional.ofNullable(autoscalerConfig);
            return this;
        }

        public Builder autoscalerConfig(Optional<? extends AutoscalerConfig> autoscalerConfig) {
            Utils.checkNotNull(autoscalerConfig, "autoscalerConfig");
            this.autoscalerConfig = autoscalerConfig;
            return this;
        }


        /**
         * the id of the fleet
         */
        public Builder fleetId(String fleetId) {
            Utils.checkNotNull(fleetId, "fleetId");
            this.fleetId = fleetId;
            return this;
        }


        public Builder nodeShape(NodeShape nodeShape) {
            Utils.checkNotNull(nodeShape, "nodeShape");
            this.nodeShape = nodeShape;
            return this;
        }


        /**
         * System generated unique identifier for an organization. Not guaranteed to have a specific format.
         */
        public Builder orgId(String orgId) {
            Utils.checkNotNull(orgId, "orgId");
            this.orgId = orgId;
            return this;
        }

        public Fleet build() {

            return new Fleet(
                autoscalerConfig, fleetId, nodeShape,
                orgId);
        }

    }
}
