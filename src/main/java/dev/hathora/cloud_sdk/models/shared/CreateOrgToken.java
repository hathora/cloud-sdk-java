/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;


public class CreateOrgToken {
    /**
     * Readable name for a token. Must be unique within an organization.
     */
    @JsonProperty("name")
    private String name;

    /**
     * If not defined, the token has Admin access.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private Optional<? extends Scopes> scopes;

    @JsonCreator
    public CreateOrgToken(
            @JsonProperty("name") String name,
            @JsonProperty("scopes") Optional<? extends Scopes> scopes) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(scopes, "scopes");
        this.name = name;
        this.scopes = scopes;
    }
    
    public CreateOrgToken(
            String name) {
        this(name, Optional.empty());
    }

    /**
     * Readable name for a token. Must be unique within an organization.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * If not defined, the token has Admin access.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Scopes> scopes() {
        return (Optional<Scopes>) scopes;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Readable name for a token. Must be unique within an organization.
     */
    public CreateOrgToken withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * If not defined, the token has Admin access.
     */
    public CreateOrgToken withScopes(Scopes scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = Optional.ofNullable(scopes);
        return this;
    }


    /**
     * If not defined, the token has Admin access.
     */
    public CreateOrgToken withScopes(Optional<? extends Scopes> scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = scopes;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateOrgToken other = (CreateOrgToken) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, scopes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateOrgToken.class,
                "name", name,
                "scopes", scopes);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private Optional<? extends Scopes> scopes = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Readable name for a token. Must be unique within an organization.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * If not defined, the token has Admin access.
         */
        public Builder scopes(Scopes scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = Optional.ofNullable(scopes);
            return this;
        }

        /**
         * If not defined, the token has Admin access.
         */
        public Builder scopes(Optional<? extends Scopes> scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = scopes;
            return this;
        }

        public CreateOrgToken build() {

            return new CreateOrgToken(
                name, scopes);
        }

    }
}
