/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;


public class ApplicationsPage {

    @JsonProperty("applications")
    private List<ApplicationWithLatestDeploymentAndBuild> applications;

    @JsonCreator
    public ApplicationsPage(
            @JsonProperty("applications") List<ApplicationWithLatestDeploymentAndBuild> applications) {
        Utils.checkNotNull(applications, "applications");
        this.applications = applications;
    }

    @JsonIgnore
    public List<ApplicationWithLatestDeploymentAndBuild> applications() {
        return applications;
    }

    public static Builder builder() {
        return new Builder();
    }


    public ApplicationsPage withApplications(List<ApplicationWithLatestDeploymentAndBuild> applications) {
        Utils.checkNotNull(applications, "applications");
        this.applications = applications;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplicationsPage other = (ApplicationsPage) o;
        return 
            Utils.enhancedDeepEquals(this.applications, other.applications);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            applications);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApplicationsPage.class,
                "applications", applications);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<ApplicationWithLatestDeploymentAndBuild> applications;

        private Builder() {
          // force use of static builder() method
        }


        public Builder applications(List<ApplicationWithLatestDeploymentAndBuild> applications) {
            Utils.checkNotNull(applications, "applications");
            this.applications = applications;
            return this;
        }

        public ApplicationsPage build() {

            return new ApplicationsPage(
                applications);
        }

    }
}
