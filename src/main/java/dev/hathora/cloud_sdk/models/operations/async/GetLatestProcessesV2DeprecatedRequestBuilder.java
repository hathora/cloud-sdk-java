/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.operations.async;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;

import dev.hathora.cloud_sdk.SDKConfiguration;
import dev.hathora.cloud_sdk.models.operations.GetLatestProcessesV2DeprecatedRequest;
import dev.hathora.cloud_sdk.models.shared.ProcessStatus;
import dev.hathora.cloud_sdk.models.shared.Region;
import dev.hathora.cloud_sdk.operations.GetLatestProcessesV2Deprecated;
import dev.hathora.cloud_sdk.utils.Headers;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public class GetLatestProcessesV2DeprecatedRequestBuilder {

    private Optional<String> appId = Optional.empty();
    private Optional<? extends List<Region>> region = Optional.empty();
    private Optional<? extends List<ProcessStatus>> status = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public GetLatestProcessesV2DeprecatedRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
                
    public GetLatestProcessesV2DeprecatedRequestBuilder appId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.of(appId);
        return this;
    }

    public GetLatestProcessesV2DeprecatedRequestBuilder appId(Optional<String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }
                
    public GetLatestProcessesV2DeprecatedRequestBuilder region(List<Region> region) {
        Utils.checkNotNull(region, "region");
        this.region = Optional.of(region);
        return this;
    }

    public GetLatestProcessesV2DeprecatedRequestBuilder region(Optional<? extends List<Region>> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }
                
    public GetLatestProcessesV2DeprecatedRequestBuilder status(List<ProcessStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.of(status);
        return this;
    }

    public GetLatestProcessesV2DeprecatedRequestBuilder status(Optional<? extends List<ProcessStatus>> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }


    private GetLatestProcessesV2DeprecatedRequest buildRequest() {

        GetLatestProcessesV2DeprecatedRequest request = new GetLatestProcessesV2DeprecatedRequest(appId,
            region,
            status);

        return request;
    }

    public CompletableFuture<GetLatestProcessesV2DeprecatedResponse> call() throws Exception {
        
        AsyncRequestOperation<GetLatestProcessesV2DeprecatedRequest, GetLatestProcessesV2DeprecatedResponse> operation
              = new GetLatestProcessesV2Deprecated.Async(sdkConfiguration, _headers);
        GetLatestProcessesV2DeprecatedRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
