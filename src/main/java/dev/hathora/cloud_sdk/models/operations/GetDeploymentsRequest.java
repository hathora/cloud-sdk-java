/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import dev.hathora.cloud_sdk.utils.SpeakeasyMetadata;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class GetDeploymentsRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=appId")
    private Optional<String> appId;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=buildTag")
    private Optional<String> buildTag;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=deploymentTag")
    private Optional<String> deploymentTag;

    @JsonCreator
    public GetDeploymentsRequest(
            Optional<String> appId,
            Optional<String> buildTag,
            Optional<String> deploymentTag) {
        Utils.checkNotNull(appId, "appId");
        Utils.checkNotNull(buildTag, "buildTag");
        Utils.checkNotNull(deploymentTag, "deploymentTag");
        this.appId = appId;
        this.buildTag = buildTag;
        this.deploymentTag = deploymentTag;
    }
    
    public GetDeploymentsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> appId() {
        return appId;
    }

    @JsonIgnore
    public Optional<String> buildTag() {
        return buildTag;
    }

    @JsonIgnore
    public Optional<String> deploymentTag() {
        return deploymentTag;
    }

    public static Builder builder() {
        return new Builder();
    }


    public GetDeploymentsRequest withAppId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.ofNullable(appId);
        return this;
    }


    public GetDeploymentsRequest withAppId(Optional<String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    public GetDeploymentsRequest withBuildTag(String buildTag) {
        Utils.checkNotNull(buildTag, "buildTag");
        this.buildTag = Optional.ofNullable(buildTag);
        return this;
    }


    public GetDeploymentsRequest withBuildTag(Optional<String> buildTag) {
        Utils.checkNotNull(buildTag, "buildTag");
        this.buildTag = buildTag;
        return this;
    }

    public GetDeploymentsRequest withDeploymentTag(String deploymentTag) {
        Utils.checkNotNull(deploymentTag, "deploymentTag");
        this.deploymentTag = Optional.ofNullable(deploymentTag);
        return this;
    }


    public GetDeploymentsRequest withDeploymentTag(Optional<String> deploymentTag) {
        Utils.checkNotNull(deploymentTag, "deploymentTag");
        this.deploymentTag = deploymentTag;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDeploymentsRequest other = (GetDeploymentsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.appId, other.appId) &&
            Utils.enhancedDeepEquals(this.buildTag, other.buildTag) &&
            Utils.enhancedDeepEquals(this.deploymentTag, other.deploymentTag);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            appId, buildTag, deploymentTag);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDeploymentsRequest.class,
                "appId", appId,
                "buildTag", buildTag,
                "deploymentTag", deploymentTag);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> appId = Optional.empty();

        private Optional<String> buildTag = Optional.empty();

        private Optional<String> deploymentTag = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder appId(String appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = Optional.ofNullable(appId);
            return this;
        }

        public Builder appId(Optional<String> appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = appId;
            return this;
        }


        public Builder buildTag(String buildTag) {
            Utils.checkNotNull(buildTag, "buildTag");
            this.buildTag = Optional.ofNullable(buildTag);
            return this;
        }

        public Builder buildTag(Optional<String> buildTag) {
            Utils.checkNotNull(buildTag, "buildTag");
            this.buildTag = buildTag;
            return this;
        }


        public Builder deploymentTag(String deploymentTag) {
            Utils.checkNotNull(deploymentTag, "deploymentTag");
            this.deploymentTag = Optional.ofNullable(deploymentTag);
            return this;
        }

        public Builder deploymentTag(Optional<String> deploymentTag) {
            Utils.checkNotNull(deploymentTag, "deploymentTag");
            this.deploymentTag = deploymentTag;
            return this;
        }

        public GetDeploymentsRequest build() {

            return new GetDeploymentsRequest(
                appId, buildTag, deploymentTag);
        }

    }
}
