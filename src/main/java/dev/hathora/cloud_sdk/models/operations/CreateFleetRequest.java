/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import dev.hathora.cloud_sdk.models.shared.CreateFleet;
import dev.hathora.cloud_sdk.utils.SpeakeasyMetadata;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class CreateFleetRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private CreateFleet createFleet;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=orgId")
    private Optional<String> orgId;

    @JsonCreator
    public CreateFleetRequest(
            CreateFleet createFleet,
            Optional<String> orgId) {
        Utils.checkNotNull(createFleet, "createFleet");
        Utils.checkNotNull(orgId, "orgId");
        this.createFleet = createFleet;
        this.orgId = orgId;
    }
    
    public CreateFleetRequest(
            CreateFleet createFleet) {
        this(createFleet, Optional.empty());
    }

    @JsonIgnore
    public CreateFleet createFleet() {
        return createFleet;
    }

    @JsonIgnore
    public Optional<String> orgId() {
        return orgId;
    }

    public static Builder builder() {
        return new Builder();
    }


    public CreateFleetRequest withCreateFleet(CreateFleet createFleet) {
        Utils.checkNotNull(createFleet, "createFleet");
        this.createFleet = createFleet;
        return this;
    }

    public CreateFleetRequest withOrgId(String orgId) {
        Utils.checkNotNull(orgId, "orgId");
        this.orgId = Optional.ofNullable(orgId);
        return this;
    }


    public CreateFleetRequest withOrgId(Optional<String> orgId) {
        Utils.checkNotNull(orgId, "orgId");
        this.orgId = orgId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateFleetRequest other = (CreateFleetRequest) o;
        return 
            Utils.enhancedDeepEquals(this.createFleet, other.createFleet) &&
            Utils.enhancedDeepEquals(this.orgId, other.orgId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            createFleet, orgId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateFleetRequest.class,
                "createFleet", createFleet,
                "orgId", orgId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private CreateFleet createFleet;

        private Optional<String> orgId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder createFleet(CreateFleet createFleet) {
            Utils.checkNotNull(createFleet, "createFleet");
            this.createFleet = createFleet;
            return this;
        }


        public Builder orgId(String orgId) {
            Utils.checkNotNull(orgId, "orgId");
            this.orgId = Optional.ofNullable(orgId);
            return this;
        }

        public Builder orgId(Optional<String> orgId) {
            Utils.checkNotNull(orgId, "orgId");
            this.orgId = orgId;
            return this;
        }

        public CreateFleetRequest build() {

            return new CreateFleetRequest(
                createFleet, orgId);
        }

    }
}
