/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import dev.hathora.cloud_sdk.models.shared.CreateAppConfig;
import dev.hathora.cloud_sdk.utils.SpeakeasyMetadata;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class CreateAppRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private CreateAppConfig createAppConfig;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=orgId")
    private Optional<String> orgId;

    @JsonCreator
    public CreateAppRequest(
            CreateAppConfig createAppConfig,
            Optional<String> orgId) {
        Utils.checkNotNull(createAppConfig, "createAppConfig");
        Utils.checkNotNull(orgId, "orgId");
        this.createAppConfig = createAppConfig;
        this.orgId = orgId;
    }
    
    public CreateAppRequest(
            CreateAppConfig createAppConfig) {
        this(createAppConfig, Optional.empty());
    }

    @JsonIgnore
    public CreateAppConfig createAppConfig() {
        return createAppConfig;
    }

    @JsonIgnore
    public Optional<String> orgId() {
        return orgId;
    }

    public static Builder builder() {
        return new Builder();
    }


    public CreateAppRequest withCreateAppConfig(CreateAppConfig createAppConfig) {
        Utils.checkNotNull(createAppConfig, "createAppConfig");
        this.createAppConfig = createAppConfig;
        return this;
    }

    public CreateAppRequest withOrgId(String orgId) {
        Utils.checkNotNull(orgId, "orgId");
        this.orgId = Optional.ofNullable(orgId);
        return this;
    }


    public CreateAppRequest withOrgId(Optional<String> orgId) {
        Utils.checkNotNull(orgId, "orgId");
        this.orgId = orgId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateAppRequest other = (CreateAppRequest) o;
        return 
            Utils.enhancedDeepEquals(this.createAppConfig, other.createAppConfig) &&
            Utils.enhancedDeepEquals(this.orgId, other.orgId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            createAppConfig, orgId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateAppRequest.class,
                "createAppConfig", createAppConfig,
                "orgId", orgId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private CreateAppConfig createAppConfig;

        private Optional<String> orgId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder createAppConfig(CreateAppConfig createAppConfig) {
            Utils.checkNotNull(createAppConfig, "createAppConfig");
            this.createAppConfig = createAppConfig;
            return this;
        }


        public Builder orgId(String orgId) {
            Utils.checkNotNull(orgId, "orgId");
            this.orgId = Optional.ofNullable(orgId);
            return this;
        }

        public Builder orgId(Optional<String> orgId) {
            Utils.checkNotNull(orgId, "orgId");
            this.orgId = orgId;
            return this;
        }

        public CreateAppRequest build() {

            return new CreateAppRequest(
                createAppConfig, orgId);
        }

    }
}
