/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.operations.async;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;

import dev.hathora.cloud_sdk.SDKConfiguration;
import dev.hathora.cloud_sdk.models.operations.GetDeploymentsRequest;
import dev.hathora.cloud_sdk.operations.GetDeployments;
import dev.hathora.cloud_sdk.utils.Headers;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public class GetDeploymentsRequestBuilder {

    private Optional<String> appId = Optional.empty();
    private Optional<String> buildTag = Optional.empty();
    private Optional<String> deploymentTag = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public GetDeploymentsRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
                
    public GetDeploymentsRequestBuilder appId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.of(appId);
        return this;
    }

    public GetDeploymentsRequestBuilder appId(Optional<String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }
                
    public GetDeploymentsRequestBuilder buildTag(String buildTag) {
        Utils.checkNotNull(buildTag, "buildTag");
        this.buildTag = Optional.of(buildTag);
        return this;
    }

    public GetDeploymentsRequestBuilder buildTag(Optional<String> buildTag) {
        Utils.checkNotNull(buildTag, "buildTag");
        this.buildTag = buildTag;
        return this;
    }
                
    public GetDeploymentsRequestBuilder deploymentTag(String deploymentTag) {
        Utils.checkNotNull(deploymentTag, "deploymentTag");
        this.deploymentTag = Optional.of(deploymentTag);
        return this;
    }

    public GetDeploymentsRequestBuilder deploymentTag(Optional<String> deploymentTag) {
        Utils.checkNotNull(deploymentTag, "deploymentTag");
        this.deploymentTag = deploymentTag;
        return this;
    }


    private GetDeploymentsRequest buildRequest() {

        GetDeploymentsRequest request = new GetDeploymentsRequest(appId,
            buildTag,
            deploymentTag);

        return request;
    }

    public CompletableFuture<GetDeploymentsResponse> call() throws Exception {
        
        AsyncRequestOperation<GetDeploymentsRequest, GetDeploymentsResponse> operation
              = new GetDeployments.Async(sdkConfiguration, _headers);
        GetDeploymentsRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
