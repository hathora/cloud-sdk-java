/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package dev.hathora.cloud_sdk.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import dev.hathora.cloud_sdk.utils.SpeakeasyMetadata;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class RunBuildV2DeprecatedRequestBody {

    @SpeakeasyMetadata("multipartForm:file,name=file")
    private Optional<? extends RunBuildV2DeprecatedFile> file;

    @JsonCreator
    public RunBuildV2DeprecatedRequestBody(
            Optional<? extends RunBuildV2DeprecatedFile> file) {
        Utils.checkNotNull(file, "file");
        this.file = file;
    }
    
    public RunBuildV2DeprecatedRequestBody() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RunBuildV2DeprecatedFile> file() {
        return (Optional<RunBuildV2DeprecatedFile>) file;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RunBuildV2DeprecatedRequestBody withFile(RunBuildV2DeprecatedFile file) {
        Utils.checkNotNull(file, "file");
        this.file = Optional.ofNullable(file);
        return this;
    }

    public RunBuildV2DeprecatedRequestBody withFile(Optional<? extends RunBuildV2DeprecatedFile> file) {
        Utils.checkNotNull(file, "file");
        this.file = file;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RunBuildV2DeprecatedRequestBody other = (RunBuildV2DeprecatedRequestBody) o;
        return 
            Objects.deepEquals(this.file, other.file);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            file);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RunBuildV2DeprecatedRequestBody.class,
                "file", file);
    }
    
    public final static class Builder {
 
        private Optional<? extends RunBuildV2DeprecatedFile> file = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder file(RunBuildV2DeprecatedFile file) {
            Utils.checkNotNull(file, "file");
            this.file = Optional.ofNullable(file);
            return this;
        }

        public Builder file(Optional<? extends RunBuildV2DeprecatedFile> file) {
            Utils.checkNotNull(file, "file");
            this.file = file;
            return this;
        }
        
        public RunBuildV2DeprecatedRequestBody build() {
            return new RunBuildV2DeprecatedRequestBody(
                file);
        }
    }
}

