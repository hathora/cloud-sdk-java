/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.operations.async;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;

import dev.hathora.cloud_sdk.SDKConfiguration;
import dev.hathora.cloud_sdk.models.operations.GetDeploymentRequest;
import dev.hathora.cloud_sdk.operations.GetDeployment;
import dev.hathora.cloud_sdk.utils.Headers;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public class GetDeploymentRequestBuilder {

    private Optional<String> appId = Optional.empty();
    private String deploymentId;
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public GetDeploymentRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
                
    public GetDeploymentRequestBuilder appId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.of(appId);
        return this;
    }

    public GetDeploymentRequestBuilder appId(Optional<String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    public GetDeploymentRequestBuilder deploymentId(String deploymentId) {
        Utils.checkNotNull(deploymentId, "deploymentId");
        this.deploymentId = deploymentId;
        return this;
    }


    private GetDeploymentRequest buildRequest() {

        GetDeploymentRequest request = new GetDeploymentRequest(appId,
            deploymentId);

        return request;
    }

    public CompletableFuture<GetDeploymentResponse> call() throws Exception {
        
        AsyncRequestOperation<GetDeploymentRequest, GetDeploymentResponse> operation
              = new GetDeployment.Async(sdkConfiguration, _headers);
        GetDeploymentRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
