/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.operations;

import static dev.hathora.cloud_sdk.operations.Operations.RequestOperation;

import dev.hathora.cloud_sdk.SDKConfiguration;
import dev.hathora.cloud_sdk.models.shared.Region;
import dev.hathora.cloud_sdk.operations.GetRunningProcesses;
import dev.hathora.cloud_sdk.utils.Headers;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

public class GetRunningProcessesRequestBuilder {

    private Optional<String> appId = Optional.empty();
    private Optional<? extends Region> region = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public GetRunningProcessesRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
                
    public GetRunningProcessesRequestBuilder appId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.of(appId);
        return this;
    }

    public GetRunningProcessesRequestBuilder appId(Optional<String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }
                
    public GetRunningProcessesRequestBuilder region(Region region) {
        Utils.checkNotNull(region, "region");
        this.region = Optional.of(region);
        return this;
    }

    public GetRunningProcessesRequestBuilder region(Optional<? extends Region> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }


    private GetRunningProcessesRequest buildRequest() {

        GetRunningProcessesRequest request = new GetRunningProcessesRequest(appId,
            region);

        return request;
    }

    public GetRunningProcessesResponse call() throws Exception {
        
        RequestOperation<GetRunningProcessesRequest, GetRunningProcessesResponse> operation
              = new GetRunningProcesses.Sync(sdkConfiguration, _headers);
        GetRunningProcessesRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
