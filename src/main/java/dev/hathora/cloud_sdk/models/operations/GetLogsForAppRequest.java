/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.hathora.cloud_sdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import dev.hathora.cloud_sdk.models.shared.Region;
import dev.hathora.cloud_sdk.utils.LazySingletonValue;
import dev.hathora.cloud_sdk.utils.SpeakeasyMetadata;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class GetLogsForAppRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=appId")
    private Optional<String> appId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=follow")
    private Optional<Boolean> follow;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=region")
    private Optional<? extends Region> region;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=tailLines")
    private Optional<Integer> tailLines;

    @JsonCreator
    public GetLogsForAppRequest(
            Optional<String> appId,
            Optional<Boolean> follow,
            Optional<? extends Region> region,
            Optional<Integer> tailLines) {
        Utils.checkNotNull(appId, "appId");
        Utils.checkNotNull(follow, "follow");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(tailLines, "tailLines");
        this.appId = appId;
        this.follow = follow;
        this.region = region;
        this.tailLines = tailLines;
    }
    
    public GetLogsForAppRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> appId() {
        return appId;
    }

    @JsonIgnore
    public Optional<Boolean> follow() {
        return follow;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Region> region() {
        return (Optional<Region>) region;
    }

    @JsonIgnore
    public Optional<Integer> tailLines() {
        return tailLines;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetLogsForAppRequest withAppId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.ofNullable(appId);
        return this;
    }

    public GetLogsForAppRequest withAppId(Optional<String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    public GetLogsForAppRequest withFollow(boolean follow) {
        Utils.checkNotNull(follow, "follow");
        this.follow = Optional.ofNullable(follow);
        return this;
    }

    public GetLogsForAppRequest withFollow(Optional<Boolean> follow) {
        Utils.checkNotNull(follow, "follow");
        this.follow = follow;
        return this;
    }

    public GetLogsForAppRequest withRegion(Region region) {
        Utils.checkNotNull(region, "region");
        this.region = Optional.ofNullable(region);
        return this;
    }

    public GetLogsForAppRequest withRegion(Optional<? extends Region> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    public GetLogsForAppRequest withTailLines(int tailLines) {
        Utils.checkNotNull(tailLines, "tailLines");
        this.tailLines = Optional.ofNullable(tailLines);
        return this;
    }

    public GetLogsForAppRequest withTailLines(Optional<Integer> tailLines) {
        Utils.checkNotNull(tailLines, "tailLines");
        this.tailLines = tailLines;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetLogsForAppRequest other = (GetLogsForAppRequest) o;
        return 
            Objects.deepEquals(this.appId, other.appId) &&
            Objects.deepEquals(this.follow, other.follow) &&
            Objects.deepEquals(this.region, other.region) &&
            Objects.deepEquals(this.tailLines, other.tailLines);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            appId,
            follow,
            region,
            tailLines);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetLogsForAppRequest.class,
                "appId", appId,
                "follow", follow,
                "region", region,
                "tailLines", tailLines);
    }
    
    public final static class Builder {
 
        private Optional<String> appId = Optional.empty();
 
        private Optional<Boolean> follow = Optional.empty();
 
        private Optional<? extends Region> region = Optional.empty();
 
        private Optional<Integer> tailLines;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder appId(String appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = Optional.ofNullable(appId);
            return this;
        }

        public Builder appId(Optional<String> appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = appId;
            return this;
        }

        public Builder follow(boolean follow) {
            Utils.checkNotNull(follow, "follow");
            this.follow = Optional.ofNullable(follow);
            return this;
        }

        public Builder follow(Optional<Boolean> follow) {
            Utils.checkNotNull(follow, "follow");
            this.follow = follow;
            return this;
        }

        public Builder region(Region region) {
            Utils.checkNotNull(region, "region");
            this.region = Optional.ofNullable(region);
            return this;
        }

        public Builder region(Optional<? extends Region> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        public Builder tailLines(int tailLines) {
            Utils.checkNotNull(tailLines, "tailLines");
            this.tailLines = Optional.ofNullable(tailLines);
            return this;
        }

        public Builder tailLines(Optional<Integer> tailLines) {
            Utils.checkNotNull(tailLines, "tailLines");
            this.tailLines = tailLines;
            return this;
        }
        
        public GetLogsForAppRequest build() {
            if (tailLines == null) {
                tailLines = _SINGLETON_VALUE_TailLines.value();
            }            return new GetLogsForAppRequest(
                appId,
                follow,
                region,
                tailLines);
        }

        private static final LazySingletonValue<Optional<Integer>> _SINGLETON_VALUE_TailLines =
                new LazySingletonValue<>(
                        "tailLines",
                        "100",
                        new TypeReference<Optional<Integer>>() {});
    }
}

