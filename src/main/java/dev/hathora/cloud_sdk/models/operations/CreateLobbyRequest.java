/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import dev.hathora.cloud_sdk.models.shared.CreateLobbyV3Params;
import dev.hathora.cloud_sdk.utils.SpeakeasyMetadata;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class CreateLobbyRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private CreateLobbyV3Params createLobbyV3Params;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=appId")
    private Optional<String> appId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=roomId")
    private Optional<String> roomId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=shortCode")
    private Optional<String> shortCode;

    @JsonCreator
    public CreateLobbyRequest(
            CreateLobbyV3Params createLobbyV3Params,
            Optional<String> appId,
            Optional<String> roomId,
            Optional<String> shortCode) {
        Utils.checkNotNull(createLobbyV3Params, "createLobbyV3Params");
        Utils.checkNotNull(appId, "appId");
        Utils.checkNotNull(roomId, "roomId");
        Utils.checkNotNull(shortCode, "shortCode");
        this.createLobbyV3Params = createLobbyV3Params;
        this.appId = appId;
        this.roomId = roomId;
        this.shortCode = shortCode;
    }
    
    public CreateLobbyRequest(
            CreateLobbyV3Params createLobbyV3Params) {
        this(createLobbyV3Params, Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public CreateLobbyV3Params createLobbyV3Params() {
        return createLobbyV3Params;
    }

    @JsonIgnore
    public Optional<String> appId() {
        return appId;
    }

    @JsonIgnore
    public Optional<String> roomId() {
        return roomId;
    }

    @JsonIgnore
    public Optional<String> shortCode() {
        return shortCode;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CreateLobbyRequest withCreateLobbyV3Params(CreateLobbyV3Params createLobbyV3Params) {
        Utils.checkNotNull(createLobbyV3Params, "createLobbyV3Params");
        this.createLobbyV3Params = createLobbyV3Params;
        return this;
    }

    public CreateLobbyRequest withAppId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.ofNullable(appId);
        return this;
    }

    public CreateLobbyRequest withAppId(Optional<String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    public CreateLobbyRequest withRoomId(String roomId) {
        Utils.checkNotNull(roomId, "roomId");
        this.roomId = Optional.ofNullable(roomId);
        return this;
    }

    public CreateLobbyRequest withRoomId(Optional<String> roomId) {
        Utils.checkNotNull(roomId, "roomId");
        this.roomId = roomId;
        return this;
    }

    public CreateLobbyRequest withShortCode(String shortCode) {
        Utils.checkNotNull(shortCode, "shortCode");
        this.shortCode = Optional.ofNullable(shortCode);
        return this;
    }

    public CreateLobbyRequest withShortCode(Optional<String> shortCode) {
        Utils.checkNotNull(shortCode, "shortCode");
        this.shortCode = shortCode;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateLobbyRequest other = (CreateLobbyRequest) o;
        return 
            Objects.deepEquals(this.createLobbyV3Params, other.createLobbyV3Params) &&
            Objects.deepEquals(this.appId, other.appId) &&
            Objects.deepEquals(this.roomId, other.roomId) &&
            Objects.deepEquals(this.shortCode, other.shortCode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            createLobbyV3Params,
            appId,
            roomId,
            shortCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateLobbyRequest.class,
                "createLobbyV3Params", createLobbyV3Params,
                "appId", appId,
                "roomId", roomId,
                "shortCode", shortCode);
    }
    
    public final static class Builder {
 
        private CreateLobbyV3Params createLobbyV3Params;
 
        private Optional<String> appId = Optional.empty();
 
        private Optional<String> roomId = Optional.empty();
 
        private Optional<String> shortCode = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder createLobbyV3Params(CreateLobbyV3Params createLobbyV3Params) {
            Utils.checkNotNull(createLobbyV3Params, "createLobbyV3Params");
            this.createLobbyV3Params = createLobbyV3Params;
            return this;
        }

        public Builder appId(String appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = Optional.ofNullable(appId);
            return this;
        }

        public Builder appId(Optional<String> appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = appId;
            return this;
        }

        public Builder roomId(String roomId) {
            Utils.checkNotNull(roomId, "roomId");
            this.roomId = Optional.ofNullable(roomId);
            return this;
        }

        public Builder roomId(Optional<String> roomId) {
            Utils.checkNotNull(roomId, "roomId");
            this.roomId = roomId;
            return this;
        }

        public Builder shortCode(String shortCode) {
            Utils.checkNotNull(shortCode, "shortCode");
            this.shortCode = Optional.ofNullable(shortCode);
            return this;
        }

        public Builder shortCode(Optional<String> shortCode) {
            Utils.checkNotNull(shortCode, "shortCode");
            this.shortCode = shortCode;
            return this;
        }
        
        public CreateLobbyRequest build() {
            return new CreateLobbyRequest(
                createLobbyV3Params,
                appId,
                roomId,
                shortCode);
        }
    }
}
