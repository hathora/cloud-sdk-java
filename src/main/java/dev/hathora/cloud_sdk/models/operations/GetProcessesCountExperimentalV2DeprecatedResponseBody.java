/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.hathora.cloud_sdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * GetProcessesCountExperimentalV2DeprecatedResponseBody - Ok
 */

public class GetProcessesCountExperimentalV2DeprecatedResponseBody {

    @JsonProperty("count")
    private double count;

    @JsonCreator
    public GetProcessesCountExperimentalV2DeprecatedResponseBody(
            @JsonProperty("count") double count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
    }

    @JsonIgnore
    public double count() {
        return count;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetProcessesCountExperimentalV2DeprecatedResponseBody withCount(double count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetProcessesCountExperimentalV2DeprecatedResponseBody other = (GetProcessesCountExperimentalV2DeprecatedResponseBody) o;
        return 
            Objects.deepEquals(this.count, other.count);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            count);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetProcessesCountExperimentalV2DeprecatedResponseBody.class,
                "count", count);
    }
    
    public final static class Builder {
 
        private Double count;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder count(double count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }
        
        public GetProcessesCountExperimentalV2DeprecatedResponseBody build() {
            return new GetProcessesCountExperimentalV2DeprecatedResponseBody(
                count);
        }
    }
}

