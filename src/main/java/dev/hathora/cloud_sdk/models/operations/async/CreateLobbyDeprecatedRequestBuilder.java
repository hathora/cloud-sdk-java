/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.operations.async;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;

import dev.hathora.cloud_sdk.SDKConfiguration;
import dev.hathora.cloud_sdk.models.operations.CreateLobbyDeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.CreateLobbyDeprecatedSecurity;
import dev.hathora.cloud_sdk.models.shared.CreateLobbyParams;
import dev.hathora.cloud_sdk.operations.CreateLobbyDeprecated;
import dev.hathora.cloud_sdk.utils.Headers;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public class CreateLobbyDeprecatedRequestBuilder {

    private CreateLobbyDeprecatedSecurity security;
    private CreateLobbyParams createLobbyParams;
    private Optional<String> appId = Optional.empty();
    private Optional<String> roomId = Optional.empty();
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public CreateLobbyDeprecatedRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CreateLobbyDeprecatedRequestBuilder security(CreateLobbyDeprecatedSecurity security) {
        Utils.checkNotNull(security, "security");
        this.security = security;
        return this;
    }

    public CreateLobbyDeprecatedRequestBuilder createLobbyParams(CreateLobbyParams createLobbyParams) {
        Utils.checkNotNull(createLobbyParams, "createLobbyParams");
        this.createLobbyParams = createLobbyParams;
        return this;
    }
                
    public CreateLobbyDeprecatedRequestBuilder appId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.of(appId);
        return this;
    }

    public CreateLobbyDeprecatedRequestBuilder appId(Optional<String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }
                
    public CreateLobbyDeprecatedRequestBuilder roomId(String roomId) {
        Utils.checkNotNull(roomId, "roomId");
        this.roomId = Optional.of(roomId);
        return this;
    }

    public CreateLobbyDeprecatedRequestBuilder roomId(Optional<String> roomId) {
        Utils.checkNotNull(roomId, "roomId");
        this.roomId = roomId;
        return this;
    }


    private CreateLobbyDeprecatedRequest buildRequest() {

        CreateLobbyDeprecatedRequest request = new CreateLobbyDeprecatedRequest(createLobbyParams,
            appId,
            roomId);

        return request;
    }

    public CompletableFuture<CreateLobbyDeprecatedResponse> call() throws Exception {
        
        AsyncRequestOperation<CreateLobbyDeprecatedRequest, CreateLobbyDeprecatedResponse> operation
              = new CreateLobbyDeprecated.Async(sdkConfiguration, security, _headers);
        CreateLobbyDeprecatedRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
