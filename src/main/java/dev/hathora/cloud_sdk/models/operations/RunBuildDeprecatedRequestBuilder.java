/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.operations;

import static dev.hathora.cloud_sdk.operations.Operations.RequestOperation;

import dev.hathora.cloud_sdk.SDKConfiguration;
import dev.hathora.cloud_sdk.operations.RunBuildDeprecated;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;

public class RunBuildDeprecatedRequestBuilder {

    private RunBuildDeprecatedRequestBody requestBody;
    private Optional<String> appId = Optional.empty();
    private Integer buildId;
    private final SDKConfiguration sdkConfiguration;

    public RunBuildDeprecatedRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public RunBuildDeprecatedRequestBuilder requestBody(RunBuildDeprecatedRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }
                
    public RunBuildDeprecatedRequestBuilder appId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.of(appId);
        return this;
    }

    public RunBuildDeprecatedRequestBuilder appId(Optional<String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    public RunBuildDeprecatedRequestBuilder buildId(int buildId) {
        Utils.checkNotNull(buildId, "buildId");
        this.buildId = buildId;
        return this;
    }


    private RunBuildDeprecatedRequest buildRequest() {

        RunBuildDeprecatedRequest request = new RunBuildDeprecatedRequest(requestBody,
            appId,
            buildId);

        return request;
    }

    public RunBuildDeprecatedResponse call() throws Exception {
        
        RequestOperation<RunBuildDeprecatedRequest, RunBuildDeprecatedResponse> operation
              = new RunBuildDeprecated.Sync(sdkConfiguration);
        RunBuildDeprecatedRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
