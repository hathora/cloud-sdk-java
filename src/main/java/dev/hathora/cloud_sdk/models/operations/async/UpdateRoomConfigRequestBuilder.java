/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk.models.operations.async;

import static dev.hathora.cloud_sdk.operations.Operations.AsyncRequestOperation;

import dev.hathora.cloud_sdk.SDKConfiguration;
import dev.hathora.cloud_sdk.models.operations.UpdateRoomConfigRequest;
import dev.hathora.cloud_sdk.models.shared.UpdateRoomConfigParams;
import dev.hathora.cloud_sdk.operations.UpdateRoomConfig;
import dev.hathora.cloud_sdk.utils.Headers;
import dev.hathora.cloud_sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public class UpdateRoomConfigRequestBuilder {

    private UpdateRoomConfigParams updateRoomConfigParams;
    private Optional<String> appId = Optional.empty();
    private String roomId;
    private final SDKConfiguration sdkConfiguration;
    private final Headers _headers = new Headers(); 

    public UpdateRoomConfigRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public UpdateRoomConfigRequestBuilder updateRoomConfigParams(UpdateRoomConfigParams updateRoomConfigParams) {
        Utils.checkNotNull(updateRoomConfigParams, "updateRoomConfigParams");
        this.updateRoomConfigParams = updateRoomConfigParams;
        return this;
    }
                
    public UpdateRoomConfigRequestBuilder appId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.of(appId);
        return this;
    }

    public UpdateRoomConfigRequestBuilder appId(Optional<String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    public UpdateRoomConfigRequestBuilder roomId(String roomId) {
        Utils.checkNotNull(roomId, "roomId");
        this.roomId = roomId;
        return this;
    }


    private UpdateRoomConfigRequest buildRequest() {

        UpdateRoomConfigRequest request = new UpdateRoomConfigRequest(updateRoomConfigParams,
            appId,
            roomId);

        return request;
    }

    public CompletableFuture<UpdateRoomConfigResponse> call() throws Exception {
        
        AsyncRequestOperation<UpdateRoomConfigRequest, UpdateRoomConfigResponse> operation
              = new UpdateRoomConfig.Async(sdkConfiguration, _headers);
        UpdateRoomConfigRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
