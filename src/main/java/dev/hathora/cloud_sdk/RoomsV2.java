/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import static dev.hathora.cloud_sdk.operations.Operations.RequestOperation;

import dev.hathora.cloud_sdk.models.operations.CreateRoomRequest;
import dev.hathora.cloud_sdk.models.operations.CreateRoomRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.CreateRoomResponse;
import dev.hathora.cloud_sdk.models.operations.DestroyRoomRequest;
import dev.hathora.cloud_sdk.models.operations.DestroyRoomRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.DestroyRoomResponse;
import dev.hathora.cloud_sdk.models.operations.GetActiveRoomsForProcessRequest;
import dev.hathora.cloud_sdk.models.operations.GetActiveRoomsForProcessRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetActiveRoomsForProcessResponse;
import dev.hathora.cloud_sdk.models.operations.GetConnectionInfoRequest;
import dev.hathora.cloud_sdk.models.operations.GetConnectionInfoRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetConnectionInfoResponse;
import dev.hathora.cloud_sdk.models.operations.GetInactiveRoomsForProcessRequest;
import dev.hathora.cloud_sdk.models.operations.GetInactiveRoomsForProcessRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetInactiveRoomsForProcessResponse;
import dev.hathora.cloud_sdk.models.operations.GetRoomInfoRequest;
import dev.hathora.cloud_sdk.models.operations.GetRoomInfoRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.GetRoomInfoResponse;
import dev.hathora.cloud_sdk.models.operations.ResumeRoomRequest;
import dev.hathora.cloud_sdk.models.operations.ResumeRoomRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.ResumeRoomResponse;
import dev.hathora.cloud_sdk.models.operations.SuspendRoomV2DeprecatedRequest;
import dev.hathora.cloud_sdk.models.operations.SuspendRoomV2DeprecatedRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.SuspendRoomV2DeprecatedResponse;
import dev.hathora.cloud_sdk.models.operations.UpdateRoomConfigRequest;
import dev.hathora.cloud_sdk.models.operations.UpdateRoomConfigRequestBuilder;
import dev.hathora.cloud_sdk.models.operations.UpdateRoomConfigResponse;
import dev.hathora.cloud_sdk.models.shared.CreateRoomParams;
import dev.hathora.cloud_sdk.models.shared.UpdateRoomConfigParams;
import dev.hathora.cloud_sdk.operations.CreateRoom;
import dev.hathora.cloud_sdk.operations.DestroyRoom;
import dev.hathora.cloud_sdk.operations.GetActiveRoomsForProcess;
import dev.hathora.cloud_sdk.operations.GetConnectionInfo;
import dev.hathora.cloud_sdk.operations.GetInactiveRoomsForProcess;
import dev.hathora.cloud_sdk.operations.GetRoomInfo;
import dev.hathora.cloud_sdk.operations.ResumeRoom;
import dev.hathora.cloud_sdk.operations.SuspendRoomV2Deprecated;
import dev.hathora.cloud_sdk.operations.UpdateRoomConfig;
import dev.hathora.cloud_sdk.utils.Headers;
import java.lang.Deprecated;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;


public class RoomsV2 {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncRoomsV2 asyncSDK;

    RoomsV2(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncRoomsV2(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncRoomsV2 async() {
        return asyncSDK;
    }

    /**
     * CreateRoom
     * 
     * <p>Create a new [room](https://hathora.dev/docs/concepts/hathora-entities#room) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application). Poll the [`GetConnectionInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetConnectionInfo) endpoint to get connection details for an active room.
     * 
     * @return The call builder
     */
    public CreateRoomRequestBuilder createRoom() {
        return new CreateRoomRequestBuilder(sdkConfiguration);
    }

    /**
     * CreateRoom
     * 
     * <p>Create a new [room](https://hathora.dev/docs/concepts/hathora-entities#room) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application). Poll the [`GetConnectionInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetConnectionInfo) endpoint to get connection details for an active room.
     * 
     * @param createRoomParams 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateRoomResponse createRoom(CreateRoomParams createRoomParams) throws Exception {
        return createRoom(createRoomParams, Optional.empty(), Optional.empty());
    }

    /**
     * CreateRoom
     * 
     * <p>Create a new [room](https://hathora.dev/docs/concepts/hathora-entities#room) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application). Poll the [`GetConnectionInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetConnectionInfo) endpoint to get connection details for an active room.
     * 
     * @param createRoomParams 
     * @param appId 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateRoomResponse createRoom(
            CreateRoomParams createRoomParams, Optional<String> appId,
            Optional<String> roomId) throws Exception {
        CreateRoomRequest request =
            CreateRoomRequest
                .builder()
                .createRoomParams(createRoomParams)
                .appId(appId)
                .roomId(roomId)
                .build();
        RequestOperation<CreateRoomRequest, CreateRoomResponse> operation
              = new CreateRoom.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * DestroyRoom
     * 
     * <p>Destroy a [room](https://hathora.dev/docs/concepts/hathora-entities#room). All associated metadata is deleted.
     * 
     * @return The call builder
     */
    public DestroyRoomRequestBuilder destroyRoom() {
        return new DestroyRoomRequestBuilder(sdkConfiguration);
    }

    /**
     * DestroyRoom
     * 
     * <p>Destroy a [room](https://hathora.dev/docs/concepts/hathora-entities#room). All associated metadata is deleted.
     * 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DestroyRoomResponse destroyRoom(String roomId) throws Exception {
        return destroyRoom(Optional.empty(), roomId);
    }

    /**
     * DestroyRoom
     * 
     * <p>Destroy a [room](https://hathora.dev/docs/concepts/hathora-entities#room). All associated metadata is deleted.
     * 
     * @param appId 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DestroyRoomResponse destroyRoom(Optional<String> appId, String roomId) throws Exception {
        DestroyRoomRequest request =
            DestroyRoomRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        RequestOperation<DestroyRoomRequest, DestroyRoomResponse> operation
              = new DestroyRoom.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetActiveRoomsForProcess
     * 
     * <p>Get all active [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @return The call builder
     */
    public GetActiveRoomsForProcessRequestBuilder getActiveRoomsForProcess() {
        return new GetActiveRoomsForProcessRequestBuilder(sdkConfiguration);
    }

    /**
     * GetActiveRoomsForProcess
     * 
     * <p>Get all active [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @param processId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetActiveRoomsForProcessResponse getActiveRoomsForProcess(String processId) throws Exception {
        return getActiveRoomsForProcess(Optional.empty(), processId);
    }

    /**
     * GetActiveRoomsForProcess
     * 
     * <p>Get all active [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @param appId 
     * @param processId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetActiveRoomsForProcessResponse getActiveRoomsForProcess(Optional<String> appId, String processId) throws Exception {
        GetActiveRoomsForProcessRequest request =
            GetActiveRoomsForProcessRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        RequestOperation<GetActiveRoomsForProcessRequest, GetActiveRoomsForProcessResponse> operation
              = new GetActiveRoomsForProcess.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetConnectionInfo
     * 
     * <p>Poll this endpoint to get connection details to a [room](https://hathora.dev/docs/concepts/hathora-entities#room). Clients can call this endpoint without authentication.
     * 
     * @return The call builder
     */
    public GetConnectionInfoRequestBuilder getConnectionInfo() {
        return new GetConnectionInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * GetConnectionInfo
     * 
     * <p>Poll this endpoint to get connection details to a [room](https://hathora.dev/docs/concepts/hathora-entities#room). Clients can call this endpoint without authentication.
     * 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetConnectionInfoResponse getConnectionInfo(String roomId) throws Exception {
        return getConnectionInfo(Optional.empty(), roomId);
    }

    /**
     * GetConnectionInfo
     * 
     * <p>Poll this endpoint to get connection details to a [room](https://hathora.dev/docs/concepts/hathora-entities#room). Clients can call this endpoint without authentication.
     * 
     * @param appId 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetConnectionInfoResponse getConnectionInfo(Optional<String> appId, String roomId) throws Exception {
        GetConnectionInfoRequest request =
            GetConnectionInfoRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        RequestOperation<GetConnectionInfoRequest, GetConnectionInfoResponse> operation
              = new GetConnectionInfo.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetInactiveRoomsForProcess
     * 
     * <p>Get all inactive [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @return The call builder
     */
    public GetInactiveRoomsForProcessRequestBuilder getInactiveRoomsForProcess() {
        return new GetInactiveRoomsForProcessRequestBuilder(sdkConfiguration);
    }

    /**
     * GetInactiveRoomsForProcess
     * 
     * <p>Get all inactive [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @param processId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetInactiveRoomsForProcessResponse getInactiveRoomsForProcess(String processId) throws Exception {
        return getInactiveRoomsForProcess(Optional.empty(), processId);
    }

    /**
     * GetInactiveRoomsForProcess
     * 
     * <p>Get all inactive [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     * 
     * @param appId 
     * @param processId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetInactiveRoomsForProcessResponse getInactiveRoomsForProcess(Optional<String> appId, String processId) throws Exception {
        GetInactiveRoomsForProcessRequest request =
            GetInactiveRoomsForProcessRequest
                .builder()
                .appId(appId)
                .processId(processId)
                .build();
        RequestOperation<GetInactiveRoomsForProcessRequest, GetInactiveRoomsForProcessResponse> operation
              = new GetInactiveRoomsForProcess.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * GetRoomInfo
     * 
     * <p>Retreive current and historical allocation data for a [room](https://hathora.dev/docs/concepts/hathora-entities#room).
     * 
     * @return The call builder
     */
    public GetRoomInfoRequestBuilder getRoomInfo() {
        return new GetRoomInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * GetRoomInfo
     * 
     * <p>Retreive current and historical allocation data for a [room](https://hathora.dev/docs/concepts/hathora-entities#room).
     * 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetRoomInfoResponse getRoomInfo(String roomId) throws Exception {
        return getRoomInfo(Optional.empty(), roomId);
    }

    /**
     * GetRoomInfo
     * 
     * <p>Retreive current and historical allocation data for a [room](https://hathora.dev/docs/concepts/hathora-entities#room).
     * 
     * @param appId 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetRoomInfoResponse getRoomInfo(Optional<String> appId, String roomId) throws Exception {
        GetRoomInfoRequest request =
            GetRoomInfoRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        RequestOperation<GetRoomInfoRequest, GetRoomInfoResponse> operation
              = new GetRoomInfo.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * ResumeRoom
     * 
     * @return The call builder
     */
    public ResumeRoomRequestBuilder resumeRoom() {
        return new ResumeRoomRequestBuilder(sdkConfiguration);
    }

    /**
     * ResumeRoom
     * 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ResumeRoomResponse resumeRoom(String roomId) throws Exception {
        return resumeRoom(Optional.empty(), roomId);
    }

    /**
     * ResumeRoom
     * 
     * @param appId 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ResumeRoomResponse resumeRoom(Optional<String> appId, String roomId) throws Exception {
        ResumeRoomRequest request =
            ResumeRoomRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        RequestOperation<ResumeRoomRequest, ResumeRoomResponse> operation
              = new ResumeRoom.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * SuspendRoomV2Deprecated
     * 
     * <p>Suspend a [room](https://hathora.dev/docs/concepts/hathora-entities#room). The room is unallocated from the process but can be rescheduled later using the same `roomId`.
     * 
     * @return The call builder
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public SuspendRoomV2DeprecatedRequestBuilder suspendRoomV2Deprecated() {
        return new SuspendRoomV2DeprecatedRequestBuilder(sdkConfiguration);
    }

    /**
     * SuspendRoomV2Deprecated
     * 
     * <p>Suspend a [room](https://hathora.dev/docs/concepts/hathora-entities#room). The room is unallocated from the process but can be rescheduled later using the same `roomId`.
     * 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public SuspendRoomV2DeprecatedResponse suspendRoomV2Deprecated(String roomId) throws Exception {
        return suspendRoomV2Deprecated(Optional.empty(), roomId);
    }

    /**
     * SuspendRoomV2Deprecated
     * 
     * <p>Suspend a [room](https://hathora.dev/docs/concepts/hathora-entities#room). The room is unallocated from the process but can be rescheduled later using the same `roomId`.
     * 
     * @param appId 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public SuspendRoomV2DeprecatedResponse suspendRoomV2Deprecated(Optional<String> appId, String roomId) throws Exception {
        SuspendRoomV2DeprecatedRequest request =
            SuspendRoomV2DeprecatedRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        RequestOperation<SuspendRoomV2DeprecatedRequest, SuspendRoomV2DeprecatedResponse> operation
              = new SuspendRoomV2Deprecated.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * UpdateRoomConfig
     * 
     * @return The call builder
     */
    public UpdateRoomConfigRequestBuilder updateRoomConfig() {
        return new UpdateRoomConfigRequestBuilder(sdkConfiguration);
    }

    /**
     * UpdateRoomConfig
     * 
     * @param updateRoomConfigParams 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateRoomConfigResponse updateRoomConfig(UpdateRoomConfigParams updateRoomConfigParams, String roomId) throws Exception {
        return updateRoomConfig(updateRoomConfigParams, Optional.empty(), roomId);
    }

    /**
     * UpdateRoomConfig
     * 
     * @param updateRoomConfigParams 
     * @param appId 
     * @param roomId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateRoomConfigResponse updateRoomConfig(
            UpdateRoomConfigParams updateRoomConfigParams, Optional<String> appId,
            String roomId) throws Exception {
        UpdateRoomConfigRequest request =
            UpdateRoomConfigRequest
                .builder()
                .updateRoomConfigParams(updateRoomConfigParams)
                .appId(appId)
                .roomId(roomId)
                .build();
        RequestOperation<UpdateRoomConfigRequest, UpdateRoomConfigResponse> operation
              = new UpdateRoomConfig.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}
