/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package dev.hathora.cloud_api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import dev.hathora.cloud_api.models.errors.SDKError;
import dev.hathora.cloud_api.models.operations.SDKMethodInterfaces.*;
import dev.hathora.cloud_api.utils.HTTPClient;
import dev.hathora.cloud_api.utils.HTTPRequest;
import dev.hathora.cloud_api.utils.JSON;
import dev.hathora.cloud_api.utils.SerializedBody;
import dev.hathora.cloud_api.utils.Utils;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Operations to create and manage lobbies using our [Lobby Service](https://hathora.dev/docs/lobbies-and-matchmaking/lobby-service).
 */
public class LobbyV3 implements
            MethodCallCreateLobby,
            MethodCallGetLobbyInfoByRoomId,
            MethodCallGetLobbyInfoByShortCode,
            MethodCallListActivePublicLobbies {

    private final SDKConfiguration sdkConfiguration;

    LobbyV3(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public dev.hathora.cloud_api.models.operations.CreateLobbyRequestBuilder createLobby() {
        return new dev.hathora.cloud_api.models.operations.CreateLobbyRequestBuilder(this);
    }

    /**
     * Create a new lobby for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). A lobby object is a wrapper around a [room](https://hathora.dev/docs/concepts/hathora-entities#room) object. With a lobby, you get additional functionality like configuring the visibility of the room, managing the state of a match, and retrieving a list of public lobbies to display to players.
     * @param request The request object containing all of the parameters for the API call.
     * @param security The security details to use for authentication.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public dev.hathora.cloud_api.models.operations.CreateLobbyResponse createLobby(
            dev.hathora.cloud_api.models.operations.CreateLobbyRequest request,
            dev.hathora.cloud_api.models.operations.CreateLobbySecurity security) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = dev.hathora.cloud_api.utils.Utils.generateURL(
                dev.hathora.cloud_api.models.operations.CreateLobbyRequest.class,
                baseUrl,
                "/lobby/v3/{appId}/create",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<dev.hathora.cloud_api.models.operations.CreateLobbyRequest>() {});
        SerializedBody serializedRequestBody = dev.hathora.cloud_api.utils.Utils.serializeRequestBody(
                _convertedRequest, "createLobbyV3Params", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = dev.hathora.cloud_api.utils.Utils.getQueryParams(
                dev.hathora.cloud_api.models.operations.CreateLobbyRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = dev.hathora.cloud_api.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, security);

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        dev.hathora.cloud_api.models.operations.CreateLobbyResponse.Builder resBuilder = 
            dev.hathora.cloud_api.models.operations.CreateLobbyResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        dev.hathora.cloud_api.models.operations.CreateLobbyResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 201) {
            if (dev.hathora.cloud_api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                dev.hathora.cloud_api.models.shared.LobbyV3 out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<dev.hathora.cloud_api.models.shared.LobbyV3>() {});
                res.withLobbyV3(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 402 || httpRes.statusCode() == 404 || httpRes.statusCode() == 422 || httpRes.statusCode() == 429 || httpRes.statusCode() == 500) {
            if (dev.hathora.cloud_api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                dev.hathora.cloud_api.models.shared.ApiError out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<dev.hathora.cloud_api.models.shared.ApiError>() {});
                res.withApiError(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public dev.hathora.cloud_api.models.operations.GetLobbyInfoByRoomIdRequestBuilder getLobbyInfoByRoomId() {
        return new dev.hathora.cloud_api.models.operations.GetLobbyInfoByRoomIdRequestBuilder(this);
    }

    /**
     * Get details for a lobby.
     * @param appId
     * @param roomId
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public dev.hathora.cloud_api.models.operations.GetLobbyInfoByRoomIdResponse getLobbyInfoByRoomId(
            Optional<? extends String> appId,
            String roomId) throws Exception {
        dev.hathora.cloud_api.models.operations.GetLobbyInfoByRoomIdRequest request =
            dev.hathora.cloud_api.models.operations.GetLobbyInfoByRoomIdRequest
                .builder()
                .appId(appId)
                .roomId(roomId)
                .build();
        

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = dev.hathora.cloud_api.utils.Utils.generateURL(
                dev.hathora.cloud_api.models.operations.GetLobbyInfoByRoomIdRequest.class,
                baseUrl,
                "/lobby/v3/{appId}/info/roomid/{roomId}",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        dev.hathora.cloud_api.models.operations.GetLobbyInfoByRoomIdResponse.Builder resBuilder = 
            dev.hathora.cloud_api.models.operations.GetLobbyInfoByRoomIdResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        dev.hathora.cloud_api.models.operations.GetLobbyInfoByRoomIdResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (dev.hathora.cloud_api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                dev.hathora.cloud_api.models.shared.LobbyV3 out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<dev.hathora.cloud_api.models.shared.LobbyV3>() {});
                res.withLobbyV3(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 404) {
            if (dev.hathora.cloud_api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                dev.hathora.cloud_api.models.shared.ApiError out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<dev.hathora.cloud_api.models.shared.ApiError>() {});
                res.withApiError(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public dev.hathora.cloud_api.models.operations.GetLobbyInfoByShortCodeRequestBuilder getLobbyInfoByShortCode() {
        return new dev.hathora.cloud_api.models.operations.GetLobbyInfoByShortCodeRequestBuilder(this);
    }

    /**
     * Get details for a lobby. If 2 or more lobbies have the same `shortCode`, then the most recently created lobby will be returned.
     * @param appId
     * @param shortCode
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public dev.hathora.cloud_api.models.operations.GetLobbyInfoByShortCodeResponse getLobbyInfoByShortCode(
            Optional<? extends String> appId,
            String shortCode) throws Exception {
        dev.hathora.cloud_api.models.operations.GetLobbyInfoByShortCodeRequest request =
            dev.hathora.cloud_api.models.operations.GetLobbyInfoByShortCodeRequest
                .builder()
                .appId(appId)
                .shortCode(shortCode)
                .build();
        

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = dev.hathora.cloud_api.utils.Utils.generateURL(
                dev.hathora.cloud_api.models.operations.GetLobbyInfoByShortCodeRequest.class,
                baseUrl,
                "/lobby/v3/{appId}/info/shortcode/{shortCode}",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        dev.hathora.cloud_api.models.operations.GetLobbyInfoByShortCodeResponse.Builder resBuilder = 
            dev.hathora.cloud_api.models.operations.GetLobbyInfoByShortCodeResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        dev.hathora.cloud_api.models.operations.GetLobbyInfoByShortCodeResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (dev.hathora.cloud_api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                dev.hathora.cloud_api.models.shared.LobbyV3 out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<dev.hathora.cloud_api.models.shared.LobbyV3>() {});
                res.withLobbyV3(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 404) {
            if (dev.hathora.cloud_api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                dev.hathora.cloud_api.models.shared.ApiError out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<dev.hathora.cloud_api.models.shared.ApiError>() {});
                res.withApiError(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public dev.hathora.cloud_api.models.operations.ListActivePublicLobbiesRequestBuilder listActivePublicLobbies() {
        return new dev.hathora.cloud_api.models.operations.ListActivePublicLobbiesRequestBuilder(this);
    }

    /**
     * Get all active lobbies for a given [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `region`. Use this endpoint to display all public lobbies that a player can join in the game client.
     * @param appId
     * @param region
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public dev.hathora.cloud_api.models.operations.ListActivePublicLobbiesResponse listActivePublicLobbies(
            Optional<? extends String> appId,
            Optional<? extends dev.hathora.cloud_api.models.shared.Region> region) throws Exception {
        dev.hathora.cloud_api.models.operations.ListActivePublicLobbiesRequest request =
            dev.hathora.cloud_api.models.operations.ListActivePublicLobbiesRequest
                .builder()
                .appId(appId)
                .region(region)
                .build();
        

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = dev.hathora.cloud_api.utils.Utils.generateURL(
                dev.hathora.cloud_api.models.operations.ListActivePublicLobbiesRequest.class,
                baseUrl,
                "/lobby/v3/{appId}/list/public",
                request, this.sdkConfiguration.globals);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = dev.hathora.cloud_api.utils.Utils.getQueryParams(
                dev.hathora.cloud_api.models.operations.ListActivePublicLobbiesRequest.class, request, this.sdkConfiguration.globals);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        dev.hathora.cloud_api.models.operations.ListActivePublicLobbiesResponse.Builder resBuilder = 
            dev.hathora.cloud_api.models.operations.ListActivePublicLobbiesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        dev.hathora.cloud_api.models.operations.ListActivePublicLobbiesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (dev.hathora.cloud_api.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.List<dev.hathora.cloud_api.models.shared.LobbyV3> out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<java.util.List<dev.hathora.cloud_api.models.shared.LobbyV3>>() {});
                res.withClasses(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
