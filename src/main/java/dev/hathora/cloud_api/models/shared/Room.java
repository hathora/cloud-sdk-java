/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package dev.hathora.cloud_api.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import dev.hathora.cloud_api.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * Room - A room object represents a game session or match.
 */

public class Room {

    @JsonProperty("allocations")
    private java.util.List<RoomAllocation> allocations;

    /**
     * System generated unique identifier for an application.
     */
    @JsonProperty("appId")
    private String appId;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("currentAllocation")
    private Optional<? extends CurrentAllocation> currentAllocation;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("roomConfig")
    private Optional<? extends String> roomConfig;

    /**
     * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
     * Note: error will be returned if `roomId` is not globally unique.
     */
    @JsonProperty("roomId")
    private String roomId;

    /**
     * The allocation status of a room.
     * 
     * `scheduling`: a process is not allocated yet and the room is waiting to be scheduled
     * 
     * `active`: ready to accept connections
     * 
     * `suspended`: room is unallocated from the process but can be rescheduled later with the same `roomId`
     * 
     * `destroyed`: all associated metadata is deleted
     */
    @JsonProperty("status")
    private RoomStatus status;

    public Room(
            @JsonProperty("allocations") java.util.List<RoomAllocation> allocations,
            @JsonProperty("appId") String appId,
            @JsonProperty("currentAllocation") Optional<? extends CurrentAllocation> currentAllocation,
            @JsonProperty("roomConfig") Optional<? extends String> roomConfig,
            @JsonProperty("roomId") String roomId,
            @JsonProperty("status") RoomStatus status) {
        Utils.checkNotNull(allocations, "allocations");
        Utils.checkNotNull(appId, "appId");
        Utils.checkNotNull(currentAllocation, "currentAllocation");
        Utils.checkNotNull(roomConfig, "roomConfig");
        Utils.checkNotNull(roomId, "roomId");
        Utils.checkNotNull(status, "status");
        this.allocations = allocations;
        this.appId = appId;
        this.currentAllocation = currentAllocation;
        this.roomConfig = roomConfig;
        this.roomId = roomId;
        this.status = status;
    }

    public java.util.List<RoomAllocation> allocations() {
        return allocations;
    }

    /**
     * System generated unique identifier for an application.
     */
    public String appId() {
        return appId;
    }

    public Optional<? extends CurrentAllocation> currentAllocation() {
        return currentAllocation;
    }

    public Optional<? extends String> roomConfig() {
        return roomConfig;
    }

    /**
     * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
     * Note: error will be returned if `roomId` is not globally unique.
     */
    public String roomId() {
        return roomId;
    }

    /**
     * The allocation status of a room.
     * 
     * `scheduling`: a process is not allocated yet and the room is waiting to be scheduled
     * 
     * `active`: ready to accept connections
     * 
     * `suspended`: room is unallocated from the process but can be rescheduled later with the same `roomId`
     * 
     * `destroyed`: all associated metadata is deleted
     */
    public RoomStatus status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Room withAllocations(java.util.List<RoomAllocation> allocations) {
        Utils.checkNotNull(allocations, "allocations");
        this.allocations = allocations;
        return this;
    }

    /**
     * System generated unique identifier for an application.
     */
    public Room withAppId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    public Room withCurrentAllocation(CurrentAllocation currentAllocation) {
        Utils.checkNotNull(currentAllocation, "currentAllocation");
        this.currentAllocation = Optional.ofNullable(currentAllocation);
        return this;
    }

    public Room withCurrentAllocation(Optional<? extends CurrentAllocation> currentAllocation) {
        Utils.checkNotNull(currentAllocation, "currentAllocation");
        this.currentAllocation = currentAllocation;
        return this;
    }

    public Room withRoomConfig(String roomConfig) {
        Utils.checkNotNull(roomConfig, "roomConfig");
        this.roomConfig = Optional.ofNullable(roomConfig);
        return this;
    }

    public Room withRoomConfig(Optional<? extends String> roomConfig) {
        Utils.checkNotNull(roomConfig, "roomConfig");
        this.roomConfig = roomConfig;
        return this;
    }

    /**
     * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
     * Note: error will be returned if `roomId` is not globally unique.
     */
    public Room withRoomId(String roomId) {
        Utils.checkNotNull(roomId, "roomId");
        this.roomId = roomId;
        return this;
    }

    /**
     * The allocation status of a room.
     * 
     * `scheduling`: a process is not allocated yet and the room is waiting to be scheduled
     * 
     * `active`: ready to accept connections
     * 
     * `suspended`: room is unallocated from the process but can be rescheduled later with the same `roomId`
     * 
     * `destroyed`: all associated metadata is deleted
     */
    public Room withStatus(RoomStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Room other = (Room) o;
        return 
            java.util.Objects.deepEquals(this.allocations, other.allocations) &&
            java.util.Objects.deepEquals(this.appId, other.appId) &&
            java.util.Objects.deepEquals(this.currentAllocation, other.currentAllocation) &&
            java.util.Objects.deepEquals(this.roomConfig, other.roomConfig) &&
            java.util.Objects.deepEquals(this.roomId, other.roomId) &&
            java.util.Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            allocations,
            appId,
            currentAllocation,
            roomConfig,
            roomId,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Room.class,
                "allocations", allocations,
                "appId", appId,
                "currentAllocation", currentAllocation,
                "roomConfig", roomConfig,
                "roomId", roomId,
                "status", status);
    }
    
    public final static class Builder {
 
        private java.util.List<RoomAllocation> allocations;
 
        private String appId;
 
        private Optional<? extends CurrentAllocation> currentAllocation = Optional.empty();
 
        private Optional<? extends String> roomConfig = Optional.empty();
 
        private String roomId;
 
        private RoomStatus status;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder allocations(java.util.List<RoomAllocation> allocations) {
            Utils.checkNotNull(allocations, "allocations");
            this.allocations = allocations;
            return this;
        }

        /**
         * System generated unique identifier for an application.
         */
        public Builder appId(String appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = appId;
            return this;
        }

        public Builder currentAllocation(CurrentAllocation currentAllocation) {
            Utils.checkNotNull(currentAllocation, "currentAllocation");
            this.currentAllocation = Optional.ofNullable(currentAllocation);
            return this;
        }

        public Builder currentAllocation(Optional<? extends CurrentAllocation> currentAllocation) {
            Utils.checkNotNull(currentAllocation, "currentAllocation");
            this.currentAllocation = currentAllocation;
            return this;
        }

        public Builder roomConfig(String roomConfig) {
            Utils.checkNotNull(roomConfig, "roomConfig");
            this.roomConfig = Optional.ofNullable(roomConfig);
            return this;
        }

        public Builder roomConfig(Optional<? extends String> roomConfig) {
            Utils.checkNotNull(roomConfig, "roomConfig");
            this.roomConfig = roomConfig;
            return this;
        }

        /**
         * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
         * Note: error will be returned if `roomId` is not globally unique.
         */
        public Builder roomId(String roomId) {
            Utils.checkNotNull(roomId, "roomId");
            this.roomId = roomId;
            return this;
        }

        /**
         * The allocation status of a room.
         * 
         * `scheduling`: a process is not allocated yet and the room is waiting to be scheduled
         * 
         * `active`: ready to accept connections
         * 
         * `suspended`: room is unallocated from the process but can be rescheduled later with the same `roomId`
         * 
         * `destroyed`: all associated metadata is deleted
         */
        public Builder status(RoomStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public Room build() {
            return new Room(
                allocations,
                appId,
                currentAllocation,
                roomConfig,
                roomId,
                status);
        }
    }
}

