/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package dev.hathora.cloud_api.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import dev.hathora.cloud_api.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class InviteStatusAccepted {

    @JsonProperty("type")
    private Type type;

    /**
     * System generated unique identifier for a user. Not guaranteed to have a specific format.
     */
    @JsonProperty("userId")
    private String userId;

    @JsonCreator
    public InviteStatusAccepted(
            @JsonProperty("type") Type type,
            @JsonProperty("userId") String userId) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(userId, "userId");
        this.type = type;
        this.userId = userId;
    }

    @JsonIgnore
    public Type type() {
        return type;
    }

    /**
     * System generated unique identifier for a user. Not guaranteed to have a specific format.
     */
    @JsonIgnore
    public String userId() {
        return userId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public InviteStatusAccepted withType(Type type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * System generated unique identifier for a user. Not guaranteed to have a specific format.
     */
    public InviteStatusAccepted withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InviteStatusAccepted other = (InviteStatusAccepted) o;
        return 
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.userId, other.userId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            type,
            userId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InviteStatusAccepted.class,
                "type", type,
                "userId", userId);
    }
    
    public final static class Builder {
 
        private Type type;
 
        private String userId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder type(Type type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * System generated unique identifier for a user. Not guaranteed to have a specific format.
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }
        
        public InviteStatusAccepted build() {
            return new InviteStatusAccepted(
                type,
                userId);
        }
    }
}

