/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package dev.hathora.cloud_api.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import dev.hathora.cloud_api.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;


public class MetricValue {

    @JsonProperty("timestamp")
    private double timestamp;

    @JsonProperty("value")
    private double value;

    public MetricValue(
            @JsonProperty("timestamp") double timestamp,
            @JsonProperty("value") double value) {
        Utils.checkNotNull(timestamp, "timestamp");
        Utils.checkNotNull(value, "value");
        this.timestamp = timestamp;
        this.value = value;
    }

    public double timestamp() {
        return timestamp;
    }

    public double value() {
        return value;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MetricValue withTimestamp(double timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }

    public MetricValue withValue(double value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MetricValue other = (MetricValue) o;
        return 
            java.util.Objects.deepEquals(this.timestamp, other.timestamp) &&
            java.util.Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            timestamp,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MetricValue.class,
                "timestamp", timestamp,
                "value", value);
    }
    
    public final static class Builder {
 
        private Double timestamp;
 
        private Double value;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder timestamp(double timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }

        public Builder value(double value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }
        
        public MetricValue build() {
            return new MetricValue(
                timestamp,
                value);
        }
    }
}

