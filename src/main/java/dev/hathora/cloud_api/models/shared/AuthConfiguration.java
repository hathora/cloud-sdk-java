/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package dev.hathora.cloud_api.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import dev.hathora.cloud_api.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * AuthConfiguration - Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
 */

public class AuthConfiguration {

    /**
     * Construct a type with a set of properties K of type T
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anonymous")
    private Optional<? extends RecordStringNever> anonymous;

    /**
     * Enable google auth for your application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("google")
    private Optional<? extends Google> google;

    /**
     * Construct a type with a set of properties K of type T
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nickname")
    private Optional<? extends RecordStringNever> nickname;

    public AuthConfiguration(
            @JsonProperty("anonymous") Optional<? extends RecordStringNever> anonymous,
            @JsonProperty("google") Optional<? extends Google> google,
            @JsonProperty("nickname") Optional<? extends RecordStringNever> nickname) {
        Utils.checkNotNull(anonymous, "anonymous");
        Utils.checkNotNull(google, "google");
        Utils.checkNotNull(nickname, "nickname");
        this.anonymous = anonymous;
        this.google = google;
        this.nickname = nickname;
    }

    /**
     * Construct a type with a set of properties K of type T
     */
    public Optional<? extends RecordStringNever> anonymous() {
        return anonymous;
    }

    /**
     * Enable google auth for your application.
     */
    public Optional<? extends Google> google() {
        return google;
    }

    /**
     * Construct a type with a set of properties K of type T
     */
    public Optional<? extends RecordStringNever> nickname() {
        return nickname;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Construct a type with a set of properties K of type T
     */
    public AuthConfiguration withAnonymous(RecordStringNever anonymous) {
        Utils.checkNotNull(anonymous, "anonymous");
        this.anonymous = Optional.ofNullable(anonymous);
        return this;
    }

    /**
     * Construct a type with a set of properties K of type T
     */
    public AuthConfiguration withAnonymous(Optional<? extends RecordStringNever> anonymous) {
        Utils.checkNotNull(anonymous, "anonymous");
        this.anonymous = anonymous;
        return this;
    }

    /**
     * Enable google auth for your application.
     */
    public AuthConfiguration withGoogle(Google google) {
        Utils.checkNotNull(google, "google");
        this.google = Optional.ofNullable(google);
        return this;
    }

    /**
     * Enable google auth for your application.
     */
    public AuthConfiguration withGoogle(Optional<? extends Google> google) {
        Utils.checkNotNull(google, "google");
        this.google = google;
        return this;
    }

    /**
     * Construct a type with a set of properties K of type T
     */
    public AuthConfiguration withNickname(RecordStringNever nickname) {
        Utils.checkNotNull(nickname, "nickname");
        this.nickname = Optional.ofNullable(nickname);
        return this;
    }

    /**
     * Construct a type with a set of properties K of type T
     */
    public AuthConfiguration withNickname(Optional<? extends RecordStringNever> nickname) {
        Utils.checkNotNull(nickname, "nickname");
        this.nickname = nickname;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthConfiguration other = (AuthConfiguration) o;
        return 
            java.util.Objects.deepEquals(this.anonymous, other.anonymous) &&
            java.util.Objects.deepEquals(this.google, other.google) &&
            java.util.Objects.deepEquals(this.nickname, other.nickname);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            anonymous,
            google,
            nickname);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthConfiguration.class,
                "anonymous", anonymous,
                "google", google,
                "nickname", nickname);
    }
    
    public final static class Builder {
 
        private Optional<? extends RecordStringNever> anonymous = Optional.empty();
 
        private Optional<? extends Google> google = Optional.empty();
 
        private Optional<? extends RecordStringNever> nickname = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Construct a type with a set of properties K of type T
         */
        public Builder anonymous(RecordStringNever anonymous) {
            Utils.checkNotNull(anonymous, "anonymous");
            this.anonymous = Optional.ofNullable(anonymous);
            return this;
        }

        /**
         * Construct a type with a set of properties K of type T
         */
        public Builder anonymous(Optional<? extends RecordStringNever> anonymous) {
            Utils.checkNotNull(anonymous, "anonymous");
            this.anonymous = anonymous;
            return this;
        }

        /**
         * Enable google auth for your application.
         */
        public Builder google(Google google) {
            Utils.checkNotNull(google, "google");
            this.google = Optional.ofNullable(google);
            return this;
        }

        /**
         * Enable google auth for your application.
         */
        public Builder google(Optional<? extends Google> google) {
            Utils.checkNotNull(google, "google");
            this.google = google;
            return this;
        }

        /**
         * Construct a type with a set of properties K of type T
         */
        public Builder nickname(RecordStringNever nickname) {
            Utils.checkNotNull(nickname, "nickname");
            this.nickname = Optional.ofNullable(nickname);
            return this;
        }

        /**
         * Construct a type with a set of properties K of type T
         */
        public Builder nickname(Optional<? extends RecordStringNever> nickname) {
            Utils.checkNotNull(nickname, "nickname");
            this.nickname = nickname;
            return this;
        }
        
        public AuthConfiguration build() {
            return new AuthConfiguration(
                anonymous,
                google,
                nickname);
        }
    }
}

