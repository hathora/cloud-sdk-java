/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package dev.hathora.cloud_api.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import dev.hathora.cloud_api.utils.SpeakeasyMetadata;
import dev.hathora.cloud_api.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class Security {

    @SpeakeasyMetadata("security:scheme=true,type=http,subtype=bearer,name=Authorization")
    private Optional<? extends String> hathoraDevToken;

    public Security(
            Optional<? extends String> hathoraDevToken) {
        Utils.checkNotNull(hathoraDevToken, "hathoraDevToken");
        this.hathoraDevToken = hathoraDevToken;
    }

    public Optional<? extends String> hathoraDevToken() {
        return hathoraDevToken;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Security withHathoraDevToken(String hathoraDevToken) {
        Utils.checkNotNull(hathoraDevToken, "hathoraDevToken");
        this.hathoraDevToken = Optional.ofNullable(hathoraDevToken);
        return this;
    }

    public Security withHathoraDevToken(Optional<? extends String> hathoraDevToken) {
        Utils.checkNotNull(hathoraDevToken, "hathoraDevToken");
        this.hathoraDevToken = hathoraDevToken;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Security other = (Security) o;
        return 
            java.util.Objects.deepEquals(this.hathoraDevToken, other.hathoraDevToken);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            hathoraDevToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Security.class,
                "hathoraDevToken", hathoraDevToken);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> hathoraDevToken = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder hathoraDevToken(String hathoraDevToken) {
            Utils.checkNotNull(hathoraDevToken, "hathoraDevToken");
            this.hathoraDevToken = Optional.ofNullable(hathoraDevToken);
            return this;
        }

        public Builder hathoraDevToken(Optional<? extends String> hathoraDevToken) {
            Utils.checkNotNull(hathoraDevToken, "hathoraDevToken");
            this.hathoraDevToken = hathoraDevToken;
            return this;
        }
        
        public Security build() {
            return new Security(
                hathoraDevToken);
        }
    }
}

