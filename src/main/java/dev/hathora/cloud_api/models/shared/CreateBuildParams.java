/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package dev.hathora.cloud_api.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import dev.hathora.cloud_api.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateBuildParams {

    /**
     * Tag to associate an external version with a build. It is accessible via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV1/operation/GetBuildInfo).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buildTag")
    private Optional<? extends String> buildTag;

    public CreateBuildParams(
            @JsonProperty("buildTag") Optional<? extends String> buildTag) {
        Utils.checkNotNull(buildTag, "buildTag");
        this.buildTag = buildTag;
    }

    /**
     * Tag to associate an external version with a build. It is accessible via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV1/operation/GetBuildInfo).
     */
    public Optional<? extends String> buildTag() {
        return buildTag;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Tag to associate an external version with a build. It is accessible via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV1/operation/GetBuildInfo).
     */
    public CreateBuildParams withBuildTag(String buildTag) {
        Utils.checkNotNull(buildTag, "buildTag");
        this.buildTag = Optional.ofNullable(buildTag);
        return this;
    }

    /**
     * Tag to associate an external version with a build. It is accessible via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV1/operation/GetBuildInfo).
     */
    public CreateBuildParams withBuildTag(Optional<? extends String> buildTag) {
        Utils.checkNotNull(buildTag, "buildTag");
        this.buildTag = buildTag;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateBuildParams other = (CreateBuildParams) o;
        return 
            java.util.Objects.deepEquals(this.buildTag, other.buildTag);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            buildTag);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateBuildParams.class,
                "buildTag", buildTag);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> buildTag = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Tag to associate an external version with a build. It is accessible via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV1/operation/GetBuildInfo).
         */
        public Builder buildTag(String buildTag) {
            Utils.checkNotNull(buildTag, "buildTag");
            this.buildTag = Optional.ofNullable(buildTag);
            return this;
        }

        /**
         * Tag to associate an external version with a build. It is accessible via [`GetBuildInfo()`](https://hathora.dev/api#tag/BuildV1/operation/GetBuildInfo).
         */
        public Builder buildTag(Optional<? extends String> buildTag) {
            Utils.checkNotNull(buildTag, "buildTag");
            this.buildTag = buildTag;
            return this;
        }
        
        public CreateBuildParams build() {
            return new CreateBuildParams(
                buildTag);
        }
    }
}

