/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package dev.hathora.cloud_api.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import dev.hathora.cloud_api.utils.LazySingletonValue;
import dev.hathora.cloud_api.utils.SpeakeasyMetadata;
import dev.hathora.cloud_api.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class GetLogsForDeploymentRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=appId")
    private Optional<? extends String> appId;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=deploymentId")
    private int deploymentId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=follow")
    private Optional<? extends Boolean> follow;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=tailLines")
    private Optional<? extends Integer> tailLines;

    public GetLogsForDeploymentRequest(
            Optional<? extends String> appId,
            int deploymentId,
            Optional<? extends Boolean> follow,
            Optional<? extends Integer> tailLines) {
        Utils.checkNotNull(appId, "appId");
        Utils.checkNotNull(deploymentId, "deploymentId");
        Utils.checkNotNull(follow, "follow");
        Utils.checkNotNull(tailLines, "tailLines");
        this.appId = appId;
        this.deploymentId = deploymentId;
        this.follow = follow;
        this.tailLines = tailLines;
    }

    public Optional<? extends String> appId() {
        return appId;
    }

    public int deploymentId() {
        return deploymentId;
    }

    public Optional<? extends Boolean> follow() {
        return follow;
    }

    public Optional<? extends Integer> tailLines() {
        return tailLines;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetLogsForDeploymentRequest withAppId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.ofNullable(appId);
        return this;
    }

    public GetLogsForDeploymentRequest withAppId(Optional<? extends String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    public GetLogsForDeploymentRequest withDeploymentId(int deploymentId) {
        Utils.checkNotNull(deploymentId, "deploymentId");
        this.deploymentId = deploymentId;
        return this;
    }

    public GetLogsForDeploymentRequest withFollow(boolean follow) {
        Utils.checkNotNull(follow, "follow");
        this.follow = Optional.ofNullable(follow);
        return this;
    }

    public GetLogsForDeploymentRequest withFollow(Optional<? extends Boolean> follow) {
        Utils.checkNotNull(follow, "follow");
        this.follow = follow;
        return this;
    }

    public GetLogsForDeploymentRequest withTailLines(int tailLines) {
        Utils.checkNotNull(tailLines, "tailLines");
        this.tailLines = Optional.ofNullable(tailLines);
        return this;
    }

    public GetLogsForDeploymentRequest withTailLines(Optional<? extends Integer> tailLines) {
        Utils.checkNotNull(tailLines, "tailLines");
        this.tailLines = tailLines;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetLogsForDeploymentRequest other = (GetLogsForDeploymentRequest) o;
        return 
            java.util.Objects.deepEquals(this.appId, other.appId) &&
            java.util.Objects.deepEquals(this.deploymentId, other.deploymentId) &&
            java.util.Objects.deepEquals(this.follow, other.follow) &&
            java.util.Objects.deepEquals(this.tailLines, other.tailLines);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            appId,
            deploymentId,
            follow,
            tailLines);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetLogsForDeploymentRequest.class,
                "appId", appId,
                "deploymentId", deploymentId,
                "follow", follow,
                "tailLines", tailLines);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> appId = Optional.empty();
 
        private Integer deploymentId;
 
        private Optional<? extends Boolean> follow;
 
        private Optional<? extends Integer> tailLines;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder appId(String appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = Optional.ofNullable(appId);
            return this;
        }

        public Builder appId(Optional<? extends String> appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = appId;
            return this;
        }

        public Builder deploymentId(int deploymentId) {
            Utils.checkNotNull(deploymentId, "deploymentId");
            this.deploymentId = deploymentId;
            return this;
        }

        public Builder follow(boolean follow) {
            Utils.checkNotNull(follow, "follow");
            this.follow = Optional.ofNullable(follow);
            return this;
        }

        public Builder follow(Optional<? extends Boolean> follow) {
            Utils.checkNotNull(follow, "follow");
            this.follow = follow;
            return this;
        }

        public Builder tailLines(int tailLines) {
            Utils.checkNotNull(tailLines, "tailLines");
            this.tailLines = Optional.ofNullable(tailLines);
            return this;
        }

        public Builder tailLines(Optional<? extends Integer> tailLines) {
            Utils.checkNotNull(tailLines, "tailLines");
            this.tailLines = tailLines;
            return this;
        }
        
        public GetLogsForDeploymentRequest build() {
            if (follow == null) {
                follow = _SINGLETON_VALUE_Follow.value();
            }
            if (tailLines == null) {
                tailLines = _SINGLETON_VALUE_TailLines.value();
            }
            return new GetLogsForDeploymentRequest(
                appId,
                deploymentId,
                follow,
                tailLines);
        }

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_Follow =
                new LazySingletonValue<>(
                        "follow",
                        "\"false\"",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends Integer>> _SINGLETON_VALUE_TailLines =
                new LazySingletonValue<>(
                        "tailLines",
                        "\"100\"",
                        new TypeReference<Optional<? extends Integer>>() {});
    }
}

