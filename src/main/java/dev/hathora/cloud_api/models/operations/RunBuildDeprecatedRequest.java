/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package dev.hathora.cloud_api.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import dev.hathora.cloud_api.utils.SpeakeasyMetadata;
import dev.hathora.cloud_api.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class RunBuildDeprecatedRequest {

    @SpeakeasyMetadata("request:mediaType=multipart/form-data")
    private RunBuildDeprecatedRequestBody requestBody;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=appId")
    private Optional<? extends String> appId;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=buildId")
    private int buildId;

    @JsonCreator
    public RunBuildDeprecatedRequest(
            RunBuildDeprecatedRequestBody requestBody,
            Optional<? extends String> appId,
            int buildId) {
        Utils.checkNotNull(requestBody, "requestBody");
        Utils.checkNotNull(appId, "appId");
        Utils.checkNotNull(buildId, "buildId");
        this.requestBody = requestBody;
        this.appId = appId;
        this.buildId = buildId;
    }
    
    public RunBuildDeprecatedRequest(
            RunBuildDeprecatedRequestBody requestBody,
            int buildId) {
        this(requestBody, Optional.empty(), buildId);
    }

    @JsonIgnore
    public RunBuildDeprecatedRequestBody requestBody() {
        return requestBody;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> appId() {
        return (Optional<String>) appId;
    }

    @JsonIgnore
    public int buildId() {
        return buildId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RunBuildDeprecatedRequest withRequestBody(RunBuildDeprecatedRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    public RunBuildDeprecatedRequest withAppId(String appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = Optional.ofNullable(appId);
        return this;
    }

    public RunBuildDeprecatedRequest withAppId(Optional<? extends String> appId) {
        Utils.checkNotNull(appId, "appId");
        this.appId = appId;
        return this;
    }

    public RunBuildDeprecatedRequest withBuildId(int buildId) {
        Utils.checkNotNull(buildId, "buildId");
        this.buildId = buildId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RunBuildDeprecatedRequest other = (RunBuildDeprecatedRequest) o;
        return 
            java.util.Objects.deepEquals(this.requestBody, other.requestBody) &&
            java.util.Objects.deepEquals(this.appId, other.appId) &&
            java.util.Objects.deepEquals(this.buildId, other.buildId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            requestBody,
            appId,
            buildId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RunBuildDeprecatedRequest.class,
                "requestBody", requestBody,
                "appId", appId,
                "buildId", buildId);
    }
    
    public final static class Builder {
 
        private RunBuildDeprecatedRequestBody requestBody;
 
        private Optional<? extends String> appId = Optional.empty();
 
        private Integer buildId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder requestBody(RunBuildDeprecatedRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        public Builder appId(String appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = Optional.ofNullable(appId);
            return this;
        }

        public Builder appId(Optional<? extends String> appId) {
            Utils.checkNotNull(appId, "appId");
            this.appId = appId;
            return this;
        }

        public Builder buildId(int buildId) {
            Utils.checkNotNull(buildId, "buildId");
            this.buildId = buildId;
            return this;
        }
        
        public RunBuildDeprecatedRequest build() {
            return new RunBuildDeprecatedRequest(
                requestBody,
                appId,
                buildId);
        }
    }
}

