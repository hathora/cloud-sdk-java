/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.hathora.cloud_sdk;

import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import java.util.concurrent.TimeUnit;

import dev.hathora.cloud_sdk.utils.BackoffStrategy;
import dev.hathora.cloud_sdk.utils.HTTPClient;
import dev.hathora.cloud_sdk.utils.RetryConfig;
import dev.hathora.cloud_sdk.utils.SpeakeasyHTTPClient;
import java.lang.IllegalStateException;
import java.lang.String;
import java.lang.System;
import java.util.Optional;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Consumer;


/**
 * Spring Boot Auto Configuration for Hathora-Cloud SDK
 * This configuration class automatically configures the Hathora-Cloud SDK
 * when Spring Boot detects it on the classpath.
 */
@AutoConfiguration
@ConditionalOnClass(HathoraCloud.class)
@EnableConfigurationProperties(CloudSDKAutoConfigProperties.class)
public class CloudSDKAutoConfig {

    /**
     * Constructor.
     */
    public CloudSDKAutoConfig() {
    }

    /**
     * Creates a RetryConfig bean from properties if retry is enabled.
     * 
     * @param properties the configuration properties
     * @return A configured RetryConfig instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnProperty(prefix = "cloudsdk.retry-config", name = "strategy")
    public RetryConfig retryConfig(CloudSDKAutoConfigProperties properties) {
        CloudSDKAutoConfigProperties.RetryConfig retryProps = properties.getRetryConfig();
        
        if (RetryConfig.Strategy.BACKOFF.equals(retryProps.getStrategy())) {
            CloudSDKAutoConfigProperties.RetryConfig.Backoff backoff = retryProps.getBackoff();
            return RetryConfig.builder()
                .backoff(
                    BackoffStrategy.builder()
                        .initialInterval(backoff.getInitialInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxInterval(backoff.getMaxInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxElapsedTime(backoff.getMaxElapsedTime().toMillis(), TimeUnit.MILLISECONDS)
                        .baseFactor(backoff.getBaseFactor())
                        .jitterFactor(backoff.getJitterFactor())
                        .retryConnectError(backoff.isRetryConnectError())
                        .retryReadTimeoutError(backoff.isRetryReadTimeoutError())
                        .build()
                )
                .build();
        }
        
        // Default retry config for other strategies
        return RetryConfig.builder().build();
    }

    /**
     * Creates a {@code Consumer<String>} bean for HTTP debug logging if none exists.
     * This logger is used by the SpeakeasyHTTPClient for debug output when debug logging is enabled.
     * By default, it logs to {@code System.out}, but can be customized by providing your own {@code Consumer<String>} bean.
     *
     * @return A {@code Consumer<String>} that logs messages to {@code System.out}
     */
    @Bean
    @ConditionalOnMissingBean
    public Consumer<String> httpLogger() {
        return System.out::println;
    }

    /**
     * Creates an HTTPClient bean if none exists.
     *
     * @param properties the configuration properties
     * @param httpLogger the logger for HTTP debug output
     * @return A configured HTTPClient instance
     */
    @Bean
    @ConditionalOnMissingBean
    public HTTPClient httpClient(CloudSDKAutoConfigProperties properties, Consumer<String> httpLogger) {
        CloudSDKAutoConfigProperties.HttpClient httpClientProps = properties.getHttpClient();

        // Configure the static logger
        SpeakeasyHTTPClient.setLogger(httpLogger);

        if (httpClientProps != null) {
            // Configure debug logging
            SpeakeasyHTTPClient.setDebugLogging(httpClientProps.isEnableDebugLogging());

            // Configure redacted headers
            if (httpClientProps.getRedactedHeaders() != null && !httpClientProps.getRedactedHeaders().isEmpty()) {
                SpeakeasyHTTPClient.setRedactedHeaders(httpClientProps.getRedactedHeaders());
            }
        }

        return new SpeakeasyHTTPClient();
    }
    /**
     * Creates a SecuritySource bean if none exists and security properties are configured.
     *
     * @param properties the configuration properties
     * @return A configured SecuritySource instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnPropertyPrefix(prefix = "cloudsdk.security")
    public SecuritySource securitySource(CloudSDKAutoConfigProperties properties) {CloudSDKAutoConfigProperties.Security securityProps = properties.getSecurity();
        dev.hathora.cloud_sdk.models.shared.Security.Builder securityBuilder = dev.hathora.cloud_sdk.models.shared.Security.builder();
        boolean hasAnySecurityConfiguration = false;
        // Build hathoraDevToken security from direct properties (primitive value)
        if (securityProps.getHathoraDevToken() != null) {
            securityBuilder.hathoraDevToken(securityProps.getHathoraDevToken());
            hasAnySecurityConfiguration = true;
        }
        
        if (!hasAnySecurityConfiguration) {
            throw new IllegalStateException("Security configuration is present but no security options are configured. " +
                "Please configure at least one security option in your application properties.");
        }
        
        return SecuritySource.of(securityBuilder.build());
    }

    /**
     * Creates the SDKConfiguration bean as the single source of truth for all SDK configuration.
     *
     * @param properties the configuration properties
     * @param httpClient the HTTP client bean
     * @param hooks the hooks bean
     * @param asyncHooks the async hooks bean
     * @param securitySource the security source bean (optional)
     * @param globals the globals configuration bean
     * @param retryConfig the retry config bean (optional)
     * @return A configured SDKConfiguration instance
     */
    @Bean
    @ConditionalOnMissingBean
    public SDKConfiguration sdkConfiguration(
            CloudSDKAutoConfigProperties properties,
            HTTPClient httpClient,
            dev.hathora.cloud_sdk.utils.Hooks hooks,
            dev.hathora.cloud_sdk.utils.AsyncHooks asyncHooks,
            SecuritySource securitySource,
            dev.hathora.cloud_sdk.utils.Globals globals,
            Optional<RetryConfig> retryConfig) {
        
        SDKConfiguration sdkConfiguration = new SDKConfiguration();
        
        sdkConfiguration.setClient(httpClient);
        
        sdkConfiguration.setHooks(hooks);
        sdkConfiguration.setAsyncHooks(asyncHooks);
        sdkConfiguration.setSecuritySource(securitySource);
        
        if (properties.getServerUrl() != null) {
            sdkConfiguration.setServerUrl(properties.getServerUrl());
        }
        sdkConfiguration.setServerIdx(properties.getServerIdx());
        sdkConfiguration.setGlobals(globals);
        
        sdkConfiguration.setRetryConfig(retryConfig);
        
        return sdkConfiguration;
    }

    /**
     * Creates the main SDK bean using the configured SDKConfiguration.
     *
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured HathoraCloud instance
     */
    @Bean
    @ConditionalOnMissingBean
    public HathoraCloud hathoraCloud(SDKConfiguration sdkConfiguration) {
        return new HathoraCloud(sdkConfiguration);
    }

    /**
     * Creates a Globals configuration bean if none exists, populated from properties.
     *
     * @param properties the configuration properties
     * @return A configured Globals instance
     */
    @Bean
    @ConditionalOnMissingBean
    public dev.hathora.cloud_sdk.utils.Globals globals(CloudSDKAutoConfigProperties properties) {
        dev.hathora.cloud_sdk.utils.Globals globals = new dev.hathora.cloud_sdk.utils.Globals();
        
        // Populate globals from properties
        CloudSDKAutoConfigProperties.Globals globalProps = properties.getGlobals();
        if (globalProps.getAppId() != null) {
            globals.putParam("pathParam", "appId", globalProps.getAppId());
        }
        if (globalProps.getOrgId() != null) {
            globals.putParam("queryParam", "orgId", globalProps.getOrgId());
        }
        
        return globals;
    }

    /**
     * Creates an AsyncHooks bean if none exists.
     * 
     * @return A configured AsyncHooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public dev.hathora.cloud_sdk.utils.AsyncHooks asyncHooks() {
        return new dev.hathora.cloud_sdk.utils.AsyncHooks();
    }

    /**
     * Creates a ScheduledExecutorService for async retry operations if none exists.
     * 
     * @return A configured ScheduledExecutorService instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ScheduledExecutorService retryScheduler() {
        return Executors.newSingleThreadScheduledExecutor();
    }

    /**
     * Creates a Hooks configuration bean if none exists.
     *
     * @return A configured Hooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public dev.hathora.cloud_sdk.utils.Hooks hooks() {
        return new dev.hathora.cloud_sdk.utils.Hooks();
    }
    /**
     * Creates a AppsV1 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured AppsV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AppsV1 appsV1(HathoraCloud hathoraCloud) {
        return hathoraCloud.appsV1();
    }
    /**
     * Creates a AppsV2 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured AppsV2 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AppsV2 appsV2(HathoraCloud hathoraCloud) {
        return hathoraCloud.appsV2();
    }
    /**
     * Creates a AuthV1 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured AuthV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AuthV1 authV1(HathoraCloud hathoraCloud) {
        return hathoraCloud.authV1();
    }
    /**
     * Creates a BillingV1 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured BillingV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public BillingV1 billingV1(HathoraCloud hathoraCloud) {
        return hathoraCloud.billingV1();
    }
    /**
     * Creates a BuildsV1 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured BuildsV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public BuildsV1 buildsV1(HathoraCloud hathoraCloud) {
        return hathoraCloud.buildsV1();
    }
    /**
     * Creates a BuildsV2 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured BuildsV2 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public BuildsV2 buildsV2(HathoraCloud hathoraCloud) {
        return hathoraCloud.buildsV2();
    }
    /**
     * Creates a BuildsV3 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured BuildsV3 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public BuildsV3 buildsV3(HathoraCloud hathoraCloud) {
        return hathoraCloud.buildsV3();
    }
    /**
     * Creates a DeploymentsV1 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured DeploymentsV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public DeploymentsV1 deploymentsV1(HathoraCloud hathoraCloud) {
        return hathoraCloud.deploymentsV1();
    }
    /**
     * Creates a DeploymentsV2 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured DeploymentsV2 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public DeploymentsV2 deploymentsV2(HathoraCloud hathoraCloud) {
        return hathoraCloud.deploymentsV2();
    }
    /**
     * Creates a DeploymentsV3 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured DeploymentsV3 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public DeploymentsV3 deploymentsV3(HathoraCloud hathoraCloud) {
        return hathoraCloud.deploymentsV3();
    }
    /**
     * Creates a DiscoveryV1 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured DiscoveryV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public DiscoveryV1 discoveryV1(HathoraCloud hathoraCloud) {
        return hathoraCloud.discoveryV1();
    }
    /**
     * Creates a DiscoveryV2 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured DiscoveryV2 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public DiscoveryV2 discoveryV2(HathoraCloud hathoraCloud) {
        return hathoraCloud.discoveryV2();
    }
    /**
     * Creates a FleetsV1 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured FleetsV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public FleetsV1 fleetsV1(HathoraCloud hathoraCloud) {
        return hathoraCloud.fleetsV1();
    }
    /**
     * Creates a LobbiesV1 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured LobbiesV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public LobbiesV1 lobbiesV1(HathoraCloud hathoraCloud) {
        return hathoraCloud.lobbiesV1();
    }
    /**
     * Creates a LobbiesV2 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured LobbiesV2 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public LobbiesV2 lobbiesV2(HathoraCloud hathoraCloud) {
        return hathoraCloud.lobbiesV2();
    }
    /**
     * Creates a LobbiesV3 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured LobbiesV3 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public LobbiesV3 lobbiesV3(HathoraCloud hathoraCloud) {
        return hathoraCloud.lobbiesV3();
    }
    /**
     * Creates a LogsV1 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured LogsV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public LogsV1 logsV1(HathoraCloud hathoraCloud) {
        return hathoraCloud.logsV1();
    }
    /**
     * Creates a ManagementV1 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured ManagementV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ManagementV1 managementV1(HathoraCloud hathoraCloud) {
        return hathoraCloud.managementV1();
    }
    /**
     * Creates a MetricsV1 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured MetricsV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public MetricsV1 metricsV1(HathoraCloud hathoraCloud) {
        return hathoraCloud.metricsV1();
    }
    /**
     * Creates a OrganizationsV1 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured OrganizationsV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public OrganizationsV1 organizationsV1(HathoraCloud hathoraCloud) {
        return hathoraCloud.organizationsV1();
    }
    /**
     * Creates a ProcessesV1 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured ProcessesV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ProcessesV1 processesV1(HathoraCloud hathoraCloud) {
        return hathoraCloud.processesV1();
    }
    /**
     * Creates a ProcessesV2 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured ProcessesV2 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ProcessesV2 processesV2(HathoraCloud hathoraCloud) {
        return hathoraCloud.processesV2();
    }
    /**
     * Creates a ProcessesV3 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured ProcessesV3 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ProcessesV3 processesV3(HathoraCloud hathoraCloud) {
        return hathoraCloud.processesV3();
    }
    /**
     * Creates a RoomsV1 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured RoomsV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public RoomsV1 roomsV1(HathoraCloud hathoraCloud) {
        return hathoraCloud.roomsV1();
    }
    /**
     * Creates a RoomsV2 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured RoomsV2 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public RoomsV2 roomsV2(HathoraCloud hathoraCloud) {
        return hathoraCloud.roomsV2();
    }
    /**
     * Creates a TokensV1 sub-SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @return A configured TokensV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public TokensV1 tokensV1(HathoraCloud hathoraCloud) {
        return hathoraCloud.tokensV1();
    }

    /**
     * Creates the async SDK bean if none exists.
     *
     * @param hathoraCloud the main SDK instance
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured AsyncHathoraCloud instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncHathoraCloud asyncHathoraCloud(HathoraCloud hathoraCloud, SDKConfiguration sdkConfiguration) {
        return new AsyncHathoraCloud(hathoraCloud, sdkConfiguration);
    }
    /**
     * Creates an AsyncAppsV1 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncAppsV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncAppsV1 asyncAppsV1(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.appsV1();
    }
    /**
     * Creates an AsyncAppsV2 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncAppsV2 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncAppsV2 asyncAppsV2(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.appsV2();
    }
    /**
     * Creates an AsyncAuthV1 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncAuthV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncAuthV1 asyncAuthV1(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.authV1();
    }
    /**
     * Creates an AsyncBillingV1 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncBillingV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncBillingV1 asyncBillingV1(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.billingV1();
    }
    /**
     * Creates an AsyncBuildsV1 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncBuildsV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncBuildsV1 asyncBuildsV1(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.buildsV1();
    }
    /**
     * Creates an AsyncBuildsV2 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncBuildsV2 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncBuildsV2 asyncBuildsV2(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.buildsV2();
    }
    /**
     * Creates an AsyncBuildsV3 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncBuildsV3 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncBuildsV3 asyncBuildsV3(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.buildsV3();
    }
    /**
     * Creates an AsyncDeploymentsV1 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncDeploymentsV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncDeploymentsV1 asyncDeploymentsV1(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.deploymentsV1();
    }
    /**
     * Creates an AsyncDeploymentsV2 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncDeploymentsV2 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncDeploymentsV2 asyncDeploymentsV2(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.deploymentsV2();
    }
    /**
     * Creates an AsyncDeploymentsV3 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncDeploymentsV3 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncDeploymentsV3 asyncDeploymentsV3(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.deploymentsV3();
    }
    /**
     * Creates an AsyncDiscoveryV1 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncDiscoveryV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncDiscoveryV1 asyncDiscoveryV1(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.discoveryV1();
    }
    /**
     * Creates an AsyncDiscoveryV2 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncDiscoveryV2 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncDiscoveryV2 asyncDiscoveryV2(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.discoveryV2();
    }
    /**
     * Creates an AsyncFleetsV1 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncFleetsV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncFleetsV1 asyncFleetsV1(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.fleetsV1();
    }
    /**
     * Creates an AsyncLobbiesV1 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncLobbiesV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncLobbiesV1 asyncLobbiesV1(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.lobbiesV1();
    }
    /**
     * Creates an AsyncLobbiesV2 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncLobbiesV2 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncLobbiesV2 asyncLobbiesV2(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.lobbiesV2();
    }
    /**
     * Creates an AsyncLobbiesV3 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncLobbiesV3 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncLobbiesV3 asyncLobbiesV3(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.lobbiesV3();
    }
    /**
     * Creates an AsyncLogsV1 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncLogsV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncLogsV1 asyncLogsV1(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.logsV1();
    }
    /**
     * Creates an AsyncManagementV1 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncManagementV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncManagementV1 asyncManagementV1(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.managementV1();
    }
    /**
     * Creates an AsyncMetricsV1 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncMetricsV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncMetricsV1 asyncMetricsV1(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.metricsV1();
    }
    /**
     * Creates an AsyncOrganizationsV1 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncOrganizationsV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncOrganizationsV1 asyncOrganizationsV1(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.organizationsV1();
    }
    /**
     * Creates an AsyncProcessesV1 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncProcessesV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncProcessesV1 asyncProcessesV1(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.processesV1();
    }
    /**
     * Creates an AsyncProcessesV2 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncProcessesV2 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncProcessesV2 asyncProcessesV2(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.processesV2();
    }
    /**
     * Creates an AsyncProcessesV3 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncProcessesV3 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncProcessesV3 asyncProcessesV3(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.processesV3();
    }
    /**
     * Creates an AsyncRoomsV1 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncRoomsV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncRoomsV1 asyncRoomsV1(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.roomsV1();
    }
    /**
     * Creates an AsyncRoomsV2 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncRoomsV2 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncRoomsV2 asyncRoomsV2(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.roomsV2();
    }
    /**
     * Creates an AsyncTokensV1 sub-SDK bean if none exists.
     *
     * @param asyncHathoraCloud the async SDK instance
     * @return A configured AsyncTokensV1 instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncTokensV1 asyncTokensV1(AsyncHathoraCloud asyncHathoraCloud) {
        return asyncHathoraCloud.tokensV1();
    }
}