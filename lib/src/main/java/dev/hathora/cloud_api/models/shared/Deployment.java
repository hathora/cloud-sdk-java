/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package dev.hathora.cloud_api.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import dev.hathora.cloud_api.utils.DateTimeDeserializer;
import dev.hathora.cloud_api.utils.DateTimeSerializer;
import java.time.OffsetDateTime;

/**
 * Deployment - Deployment is a versioned configuration for a build that describes runtime behavior.
 */

public class Deployment {
    /**
     * Additional ports your server listens on.
     */
    @JsonProperty("additionalContainerPorts")
    public ContainerPort[] additionalContainerPorts;

    public Deployment withAdditionalContainerPorts(ContainerPort[] additionalContainerPorts) {
        this.additionalContainerPorts = additionalContainerPorts;
        return this;
    }
    
    /**
     * System generated unique identifier for an application.
     */
    @JsonProperty("appId")
    public String appId;

    public Deployment withAppId(String appId) {
        this.appId = appId;
        return this;
    }
    
    /**
     * System generated id for a build associated with this deployment. Increments by 1.
     */
    @JsonProperty("buildId")
    public Integer buildId;

    public Deployment withBuildId(Integer buildId) {
        this.buildId = buildId;
        return this;
    }
    
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonProperty("containerPort")
    @Deprecated
    public Double containerPort;

    @Deprecated
    public Deployment withContainerPort(Double containerPort) {
        this.containerPort = containerPort;
        return this;
    }
    
    /**
     * When the deployment was created.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;

    public Deployment withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Email address for the user that created the deployment.
     */
    @JsonProperty("createdBy")
    public String createdBy;

    public Deployment withCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }
    
    /**
     * A container port object represents the transport configruations for how your server will listen.
     */
    @JsonProperty("defaultContainerPort")
    public ContainerPort defaultContainerPort;

    public Deployment withDefaultContainerPort(ContainerPort defaultContainerPort) {
        this.defaultContainerPort = defaultContainerPort;
        return this;
    }
    
    /**
     * System generated id for a deployment. Increments by 1.
     */
    @JsonProperty("deploymentId")
    public Integer deploymentId;

    public Deployment withDeploymentId(Integer deploymentId) {
        this.deploymentId = deploymentId;
        return this;
    }
    
    /**
     * The environment variable that our process will have access to at runtime.
     */
    @JsonProperty("env")
    public DeploymentEnv[] env;

    public Deployment withEnv(DeploymentEnv[] env) {
        this.env = env;
        return this;
    }
    
    /**
     * A plan defines how much CPU and memory is required to run an instance of your game server.
     * 
     * `tiny`: shared core, 1gb memory
     * 
     * `small`: 1 core, 2gb memory
     * 
     * `medium`: 2 core, 4gb memory
     * 
     * `large`: 4 core, 8gb memory
     */
    @JsonProperty("planName")
    public PlanName planName;

    public Deployment withPlanName(PlanName planName) {
        this.planName = planName;
        return this;
    }
    
    /**
     * The number of cores allocated to your process.
     */
    @JsonProperty("requestedCPU")
    public Double requestedCPU;

    public Deployment withRequestedCPU(Double requestedCPU) {
        this.requestedCPU = requestedCPU;
        return this;
    }
    
    /**
     * The amount of memory allocated to your process.
     */
    @JsonProperty("requestedMemoryMB")
    public Double requestedMemoryMB;

    public Deployment withRequestedMemoryMB(Double requestedMemoryMB) {
        this.requestedMemoryMB = requestedMemoryMB;
        return this;
    }
    
    /**
     * Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
     */
    @JsonProperty("roomsPerProcess")
    public Integer roomsPerProcess;

    public Deployment withRoomsPerProcess(Integer roomsPerProcess) {
        this.roomsPerProcess = roomsPerProcess;
        return this;
    }
    
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonProperty("transportType")
    @Deprecated
    public DeploymentTransportType transportType;

    @Deprecated
    public Deployment withTransportType(DeploymentTransportType transportType) {
        this.transportType = transportType;
        return this;
    }
    
    public Deployment(@JsonProperty("additionalContainerPorts") ContainerPort[] additionalContainerPorts, @JsonProperty("appId") String appId, @JsonProperty("buildId") Integer buildId, @JsonProperty("containerPort") Double containerPort, @JsonProperty("createdAt") OffsetDateTime createdAt, @JsonProperty("createdBy") String createdBy, @JsonProperty("defaultContainerPort") ContainerPort defaultContainerPort, @JsonProperty("deploymentId") Integer deploymentId, @JsonProperty("env") DeploymentEnv[] env, @JsonProperty("planName") PlanName planName, @JsonProperty("requestedCPU") Double requestedCPU, @JsonProperty("requestedMemoryMB") Double requestedMemoryMB, @JsonProperty("roomsPerProcess") Integer roomsPerProcess, @JsonProperty("transportType") DeploymentTransportType transportType) {
        this.additionalContainerPorts = additionalContainerPorts;
        this.appId = appId;
        this.buildId = buildId;
        this.containerPort = containerPort;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.defaultContainerPort = defaultContainerPort;
        this.deploymentId = deploymentId;
        this.env = env;
        this.planName = planName;
        this.requestedCPU = requestedCPU;
        this.requestedMemoryMB = requestedMemoryMB;
        this.roomsPerProcess = roomsPerProcess;
        this.transportType = transportType;
  }
}
