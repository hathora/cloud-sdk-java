/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package dev.hathora.cloud_api.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import dev.hathora.cloud_api.utils.DateTimeDeserializer;
import dev.hathora.cloud_api.utils.DateTimeSerializer;
import java.time.OffsetDateTime;

/**
 * Build - Build is a versioned artifact for a game server's container image and its data.
 */

public class Build {
    /**
     * System generated unique identifier for an application.
     */
    @JsonProperty("appId")
    public String appId;

    public Build withAppId(String appId) {
        this.appId = appId;
        return this;
    }
    
    /**
     * System generated id for a build. Increments by 1.
     */
    @JsonProperty("buildId")
    public Integer buildId;

    public Build withBuildId(Integer buildId) {
        this.buildId = buildId;
        return this;
    }
    
    /**
     * When a new `buildId` is generated.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;

    public Build withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Email address for the user that created the build.
     */
    @JsonProperty("createdBy")
    public String createdBy;

    public Build withCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }
    
    /**
     * When the container image was deleted.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("deletedAt")
    public OffsetDateTime deletedAt;

    public Build withDeletedAt(OffsetDateTime deletedAt) {
        this.deletedAt = deletedAt;
        return this;
    }
    
    /**
     * When the container image finished being built.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("finishedAt")
    public OffsetDateTime finishedAt;

    public Build withFinishedAt(OffsetDateTime finishedAt) {
        this.finishedAt = finishedAt;
        return this;
    }
    
    /**
     * Image size in MB.
     */
    @JsonProperty("imageSize")
    public Double imageSize;

    public Build withImageSize(Double imageSize) {
        this.imageSize = imageSize;
        return this;
    }
    
    /**
     * An alias for the container image in our regional registries.
     */
    @JsonProperty("regionalContainerTags")
    public BuildRegionalContainerTags[] regionalContainerTags;

    public Build withRegionalContainerTags(BuildRegionalContainerTags[] regionalContainerTags) {
        this.regionalContainerTags = regionalContainerTags;
        return this;
    }
    
    /**
     * When the container image starts getting built.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startedAt")
    public OffsetDateTime startedAt;

    public Build withStartedAt(OffsetDateTime startedAt) {
        this.startedAt = startedAt;
        return this;
    }
    
    /**
     * Status of creating a build.
     * 
     * `created`: a new `buildId` was generated
     * 
     * `running`: the container image is being built
     * 
     * `succeeded`: the container image was successfully built and stored in our registry
     * 
     * `failed`: there was an issue creating and storing the container image in our container registry
     */
    @JsonProperty("status")
    public BuildStatus status;

    public Build withStatus(BuildStatus status) {
        this.status = status;
        return this;
    }
    
    public Build(@JsonProperty("appId") String appId, @JsonProperty("buildId") Integer buildId, @JsonProperty("createdAt") OffsetDateTime createdAt, @JsonProperty("createdBy") String createdBy, @JsonProperty("deletedAt") OffsetDateTime deletedAt, @JsonProperty("finishedAt") OffsetDateTime finishedAt, @JsonProperty("imageSize") Double imageSize, @JsonProperty("regionalContainerTags") BuildRegionalContainerTags[] regionalContainerTags, @JsonProperty("startedAt") OffsetDateTime startedAt, @JsonProperty("status") BuildStatus status) {
        this.appId = appId;
        this.buildId = buildId;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.deletedAt = deletedAt;
        this.finishedAt = finishedAt;
        this.imageSize = imageSize;
        this.regionalContainerTags = regionalContainerTags;
        this.startedAt = startedAt;
        this.status = status;
  }
}
