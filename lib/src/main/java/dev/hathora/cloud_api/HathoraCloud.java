/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package dev.hathora.cloud_api;

import dev.hathora.cloud_api.utils.HTTPClient;
import dev.hathora.cloud_api.utils.SpeakeasyHTTPClient;

/**
 * Hathora Cloud API: Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
 */
public class HathoraCloud {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://api.hathora.dev",
        "/",
	};
  	
    /**
     * Operations that allow you manage your [applications](https://hathora.dev/docs/concepts/hathora-entities#application).
     */
    public AppV1 appV1;
    /**
     * Operations that allow you to configure authentication for your [applications](https://hathora.dev/docs/concepts/hathora-entities#application).
     */
    public AuthV1 authV1;
    public BillingV1 billingV1;
    /**
     * Operations that allow you create and manage your [build](https://hathora.dev/docs/concepts/hathora-entities#build).
     */
    public BuildV1 buildV1;
    /**
     * Operations that allow you configure and manage an application's [build](https://hathora.dev/docs/concepts/hathora-entities#build) at runtime.
     */
    public DeploymentV1 deploymentV1;
    /**
     * Service that allows clients to directly ping all Hathora regions to get latency information
     */
    public DiscoveryV1 discoveryV1;
    public LobbyV1 lobbyV1;
    /**
     * Operations to create and manage [lobbies](https://hathora.dev/docs/concepts/hathora-entities#lobby).
     */
    public LobbyV2 lobbyV2;
    /**
     * Operations to get logs by [applications](https://hathora.dev/docs/concepts/hathora-entities#application), [processes](https://hathora.dev/docs/concepts/hathora-entities#process), and [deployments](https://hathora.dev/docs/concepts/hathora-entities#deployment). We store 20GB of logs data.
     */
    public LogV1 logV1;
    public ManagementV1 managementV1;
    /**
     * Operations to get metrics by [process](https://hathora.dev/docs/concepts/hathora-entities#process). We store 72 hours of metrics data.
     */
    public MetricsV1 metricsV1;
    /**
     * Operations to get data on active and stopped [processes](https://hathora.dev/docs/concepts/hathora-entities#process).
     */
    public ProcessesV1 processesV1;
    public RoomV1 roomV1;
    /**
     * Operations to create, manage, and connect to [rooms](https://hathora.dev/docs/concepts/hathora-entities#room).
     */
    public RoomV2 roomV2;	

	private SDKConfiguration sdkConfiguration;

	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private SDKConfiguration sdkConfiguration = new SDKConfiguration();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.sdkConfiguration.defaultClient = client;
			return this;
		}
		
		/**
		 * Configures the SDK to use the provided security details.
		 * @param security The security details to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setSecurity(dev.hathora.cloud_api.models.shared.Security security) {
			this.sdkConfiguration.security = security;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.sdkConfiguration.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.sdkConfiguration.serverUrl = dev.hathora.cloud_api.utils.Utils.templateUrl(serverUrl, params);
			return this;
		}
		
		/**
		 * Allows the overriding of the default server by index
		 * @param serverIdx The server to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerIndex(int serverIdx) {
			this.sdkConfiguration.serverIdx = serverIdx;
			this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public HathoraCloud build() throws Exception {
			if (this.sdkConfiguration.defaultClient == null) {
				this.sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
			}
			
			if (this.sdkConfiguration.security != null) {
				this.sdkConfiguration.securityClient = dev.hathora.cloud_api.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, this.sdkConfiguration.security);
			}
			
			if (this.sdkConfiguration.securityClient == null) {
				this.sdkConfiguration.securityClient = this.sdkConfiguration.defaultClient;
			}
			
			if (this.sdkConfiguration.serverUrl == null || this.sdkConfiguration.serverUrl.isBlank()) {
				this.sdkConfiguration.serverUrl = SERVERS[0];
				this.sdkConfiguration.serverIdx = 0;
			}

			if (this.sdkConfiguration.serverUrl.endsWith("/")) {
				this.sdkConfiguration.serverUrl = this.sdkConfiguration.serverUrl.substring(0, this.sdkConfiguration.serverUrl.length() - 1);
			}
			
			return new HathoraCloud(this.sdkConfiguration);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private HathoraCloud(SDKConfiguration sdkConfiguration) throws Exception {
		this.sdkConfiguration = sdkConfiguration;
		
		this.appV1 = new AppV1(this.sdkConfiguration);
		
		this.authV1 = new AuthV1(this.sdkConfiguration);
		
		this.billingV1 = new BillingV1(this.sdkConfiguration);
		
		this.buildV1 = new BuildV1(this.sdkConfiguration);
		
		this.deploymentV1 = new DeploymentV1(this.sdkConfiguration);
		
		this.discoveryV1 = new DiscoveryV1(this.sdkConfiguration);
		
		this.lobbyV1 = new LobbyV1(this.sdkConfiguration);
		
		this.lobbyV2 = new LobbyV2(this.sdkConfiguration);
		
		this.logV1 = new LogV1(this.sdkConfiguration);
		
		this.managementV1 = new ManagementV1(this.sdkConfiguration);
		
		this.metricsV1 = new MetricsV1(this.sdkConfiguration);
		
		this.processesV1 = new ProcessesV1(this.sdkConfiguration);
		
		this.roomV1 = new RoomV1(this.sdkConfiguration);
		
		this.roomV2 = new RoomV2(this.sdkConfiguration);
	}
}